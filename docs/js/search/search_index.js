var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.651,1,2.619]],["body/controllers/AppController.html",[0,3.049,1,4.265,2,2.061,3,0.277,4,0.248,5,0.192,6,4.247,7,0.367,8,3.928,9,4.265,10,4.687,11,4.265,12,6.11,13,2.689,14,0.942,15,2.841,16,5.956,17,1.769,18,0.019,19,1.147,20,4.941,21,3.647,22,4.687,23,5.315,24,3.407,25,4.687,26,2.419,27,0.863,28,5.252,29,3.196,30,4.687,31,3.647,32,1.024,33,1.389,34,3.959,35,4.247,36,3.176,37,1.957,38,4.941,39,4.941,40,0.277,41,0.275,42,3.176,43,2.585,44,2.174,45,4.941,46,0.015,47,0.015]],["title/modules/AppModule.html",[48,1.486,49,2.619]],["body/modules/AppModule.html",[1,4.485,2,2.44,3,0.258,4,0.231,5,0.179,18,0.019,32,1.151,33,1.296,34,4.255,35,3.962,40,0.258,41,0.257,46,0.014,47,0.014,48,2.544,49,5.34,50,2.27,51,2.27,52,2.751,53,2.751,54,2.411,55,3.583,56,2.751,57,3.962,58,3.962,59,3.962,60,4.582,61,4.582,62,4.582,63,4.582,64,4.255,65,3.491,66,2.751,67,2.57,68,4.609,69,3.491,70,4.609,71,3.535,72,4.609,73,4.609,74,4.609,75,4.609,76,3.217,77,2.028,78,3.962,79,4.609,80,4.609,81,4.609]],["title/injectables/AppService.html",[34,2.239,82,1.343]],["body/injectables/AppService.html",[3,0.2,4,0.18,5,0.139,7,0.368,9,4.633,14,0.683,16,3.079,18,0.019,19,1.42,22,5.219,23,4.349,24,3.161,25,4.349,26,2.745,27,0.903,28,3.079,30,4.349,31,3.384,32,0.764,33,1.007,34,3.831,40,0.2,41,0.276,42,2.303,43,1.874,44,2.691,46,0.012,47,0.012,71,2.748,82,1.772,83,1.874,84,3.079,85,3.199,86,3.796,87,5.257,88,6.123,89,2.759,90,4.949,91,5.566,92,5.67,93,5.67,94,1.666,95,3.582,96,6.933,97,3.582,98,1.042,99,1.265,100,1.494,101,0.915,102,0.718,103,1.056,104,3.454,105,4.633,106,3.582,107,3.582,108,4.949,109,4.254,110,3.645,111,4.254,112,6.116,113,3.582,114,3.582,115,3.796,116,4.254,117,6.418,118,3.645,119,3.582,120,3.181,121,3.454,122,2.759,123,4.254,124,4.48,125,3.454,126,5.705,127,1.719,128,0.792,129,2.5,130,1.666,131,4.949,132,3.079,133,3.181,134,1.764,135,3.079,136,3.582,137,2.178,138,3.582,139,6.116,140,3.582,141,1.666,142,3.582,143,2.303,144,2.138,145,2.748,146,3.582,147,1.666,148,3.582,149,4.254,150,3.796,151,3.582,152,2.5,153,3.079,154,3.582,155,3.079,156,2.5,157,3.582,158,3.582,159,3.582]],["title/controllers/AuthController.html",[0,1.651,160,2.619]],["body/controllers/AuthController.html",[0,2.134,2,1.132,3,0.152,4,0.136,5,0.105,7,0.537,8,1.744,13,2.367,14,0.517,15,1.884,17,1.736,18,0.019,19,1.126,26,2.548,29,2.12,32,1.034,33,0.763,36,1.744,37,1.074,40,0.152,41,0.226,43,1.419,44,2.134,46,0.01,47,0.01,85,2.12,89,2.259,94,1.262,98,0.571,99,0.693,100,2.023,101,1.543,102,1.154,103,1.43,122,2.259,128,1.336,130,2.809,147,2.992,160,3.755,161,2.332,162,1.893,163,2.713,164,1.548,165,2.895,166,2.419,167,3.755,168,3.274,169,3.441,170,3.72,171,4.169,172,2.332,173,3.841,174,2.713,175,4.624,176,4.127,177,4.052,178,1.884,179,2.332,180,4.624,181,5.38,182,4.052,183,3.483,184,2.167,185,2.713,186,3.483,187,2.895,188,2.713,189,3.483,190,2.704,191,4.127,192,1.631,193,2.658,194,1.975,195,3.211,196,3.294,197,3.605,198,2.332,199,4.136,200,2.713,201,5.38,202,2.713,203,3.483,204,3.012,205,2.704,206,3.385,207,3.385,208,2.713,209,3.483,210,2.13,211,3.483,212,2.975,213,2.713,214,4.228,215,4.127,216,2.677,217,2.713,218,2.713,219,2.12,220,3.587,221,2.259,222,1.996,223,2.081,224,1.893,225,2.713,226,2.081,227,3.108,228,4.936,229,3.436,230,2.332,231,2.332,232,3.72,233,2.713,234,3.012,235,2.332,236,2.081,237,1.619,238,2.081,239,1.744,240,2.713,241,2.713,242,2.713,243,2.332,244,1.336,245,1.512,246,2.419,247,4.052,248,2.332,249,1.893,250,3.118,251,2.713,252,3.083,253,2.713,254,2.713,255,1.893,256,2.332,257,2.713,258,1.194,259,2.332,260,2.713,261,2.713,262,2.713,263,2.713,264,1.744,265,0.8,266,2.081,267,2.713,268,2.713,269,2.713]],["title/modules/AuthModule.html",[48,1.486,60,2.412]],["body/modules/AuthModule.html",[2,2.507,3,0.269,4,0.241,5,0.187,18,0.019,32,1.113,33,1.353,40,0.269,41,0.268,46,0.015,47,0.015,48,2.596,50,2.371,51,2.371,52,2.873,53,2.873,54,2.518,55,3.655,56,3.913,60,4.852,64,4.302,65,3.588,66,2.873,67,2.684,69,3.588,78,4.137,160,4.575,229,4.527,230,4.137,270,4.137,271,4.813,272,4.137,273,4.137,274,4.302,275,4.813,276,4.813,277,3.692,278,4.813,279,4.813,280,4.813,281,4.813,282,4.137,283,4.813,284,4.813,285,4.813]],["title/injectables/AuthService.html",[82,1.343,229,2.239]],["body/injectables/AuthService.html",[3,0.216,4,0.194,5,0.15,7,0.438,8,3.35,14,0.736,15,2.424,18,0.019,19,1.21,26,2.064,29,3.302,32,0.975,33,1.086,40,0.216,41,0.29,44,1.7,46,0.013,47,0.013,82,1.866,83,2.021,85,3.552,94,2.424,98,1.097,99,1.332,100,2.174,101,1.332,102,1.044,103,1.537,121,3.637,128,1.304,130,1.797,137,2.595,147,2.936,164,1.486,165,3.111,166,3.111,168,3.741,169,3.085,172,4.479,173,4.143,184,1.454,189,4.479,190,3.786,191,5.209,192,1.21,193,2.293,194,1.861,195,3.934,196,3.065,197,3.111,204,3.085,212,2.567,229,3.934,231,3.321,232,2.964,234,3.692,244,2.567,245,2.906,246,3.111,250,2.484,255,2.697,259,4.479,277,2.964,286,3.321,287,5.211,288,3.791,289,3.321,290,7.151,291,3.864,292,5.211,293,5.211,294,4.479,295,3.864,296,5.211,297,3.35,298,4.479,299,3.864,300,3.864,301,2.154,302,3.864,303,3.321,304,3.864,305,3.321,306,3.864,307,3.864]],["title/classes/CreateProjectDto.html",[41,0.209,308,2.239]],["body/classes/CreateProjectDto.html",[3,0.197,4,0.177,5,0.137,7,0.533,14,0.671,17,2.284,18,0.019,19,1.305,27,0.924,32,0.868,37,1.395,40,0.197,41,0.355,46,0.012,47,0.012,101,1.731,102,1.323,103,1.882,122,2.728,144,2.103,192,1.533,193,2.153,194,1.443,210,2.682,258,3.184,308,3.355,309,0.706,310,5.22,311,2.703,312,2.728,313,3.145,314,1.756,315,2.728,316,2.728,317,1.552,318,3.415,319,2.542,320,2.041,321,3.145,322,3.415,323,2.941,324,4.893,325,3.625,326,3.613,327,1.752,328,4.354,329,3.355,330,5.22,331,5.621,332,3.524,333,3.524,334,5.22,335,4.658,336,3.355,337,2.991,338,3.071,339,4.609,340,1.965,341,3.524,342,3.524,343,3.753,344,4.206,345,1.376,346,2.728,347,2.41,348,3.524,349,3.524,350,3.386,351,3.355,352,3.613,353,3.145,354,3.415,355,1.843,356,1.395,357,4.206,358,4.206]],["title/classes/CreateTicketDto.html",[41,0.209,359,2.239]],["body/classes/CreateTicketDto.html",[3,0.139,4,0.124,5,0.096,7,0.526,10,2.905,14,0.473,17,2.173,18,0.019,19,1.409,27,0.957,32,0.709,37,0.982,40,0.139,41,0.308,46,0.009,47,0.009,102,1.485,103,2.123,122,2.111,141,1.761,144,3.069,164,0.797,168,3.356,192,1.193,210,1.499,252,3.278,258,3.262,309,0.497,312,2.111,313,2.434,314,1.355,315,2.111,316,2.111,317,0.968,318,2.643,319,2.446,320,1.58,321,2.434,323,1.297,325,1.48,326,3.275,327,1.84,329,3.624,336,3.484,337,2.532,340,2.111,346,2.111,350,3.49,351,3.305,352,3.305,353,3.559,354,2.643,355,1.297,356,0.982,359,2.742,360,5.381,361,1.902,362,2.032,363,2.434,364,3.787,365,4.478,366,4.478,367,1.229,368,4.645,369,4.477,370,4.392,371,3.787,372,3.787,373,3.255,374,3.787,375,3.523,376,3.206,377,2.48,378,2.48,379,3.255,380,2.643,381,3.255,382,4.419,383,4.247,384,3.948,385,3.948,386,2.48,387,2.48,388,4.419,389,2.905,390,4.419,391,3.206,392,3.523,393,3.948,394,2.48,395,2.48,396,2.643,397,3.787,398,4.247,399,3.787,400,2.48,401,3.255,402,2.905,403,2.643,404,3.943,405,2.48,406,2.48,407,5.017,408,3.865,409,2.48,410,2.434,411,3.787,412,2.643,413,2.434,414,2.905,415,2.905,416,3.255,417,3.523,418,2.48,419,2.48,420,3.523,421,3.255,422,3.255,423,3.255,424,3.787]],["title/interfaces/ExpressRequestWithUser.html",[216,1.745,425,1.963]],["body/interfaces/ExpressRequestWithUser.html",[3,0.29,4,0.26,5,0.201,7,0.385,13,2.77,14,0.988,18,0.019,32,0.801,40,0.29,46,0.015,47,0.015,102,1.261,164,1.545,194,1.856,212,3.1,216,3.152,220,4.092,221,3.51,327,2.253,413,4.046,425,3.293,426,3.334,427,4.459,428,1.716,429,4.046,430,3.885,431,3.293,432,4.828,433,3.621]],["title/interfaces/ExpressRequestWithUser-1.html",[216,1.46,425,1.642,434,2.408]],["body/interfaces/ExpressRequestWithUser-1.html",[3,0.29,4,0.26,5,0.201,7,0.385,13,2.77,14,0.988,18,0.019,32,0.801,40,0.29,46,0.015,47,0.015,102,1.261,164,1.545,194,1.856,212,3.1,216,3.152,220,4.092,221,3.51,327,2.253,413,4.046,425,3.293,426,3.334,428,1.716,429,4.046,430,3.885,431,3.293,432,4.828,433,3.621,435,4.459]],["title/interfaces/ExpressRequestWithUser-2.html",[216,1.46,425,1.642,436,3.139]],["body/interfaces/ExpressRequestWithUser-2.html",[3,0.29,4,0.26,5,0.201,7,0.385,13,2.77,14,0.988,18,0.019,32,0.801,40,0.29,46,0.015,47,0.015,102,1.261,164,1.545,194,1.856,212,3.1,216,3.152,220,4.092,221,3.51,327,2.253,413,4.046,425,3.293,426,3.334,428,1.716,429,4.046,430,3.885,431,3.293,432,4.828,433,3.621,437,4.459]],["title/controllers/HealthController.html",[0,1.651,438,2.619]],["body/controllers/HealthController.html",[0,2.631,2,1.656,3,0.222,4,0.199,5,0.154,7,0.295,14,0.756,15,2.468,17,1.421,18,0.019,19,0.921,26,2.101,32,0.923,33,1.116,36,2.552,37,1.572,40,0.222,41,0.295,44,1.747,46,0.013,47,0.013,85,2.077,94,1.846,98,0.836,99,1.014,115,5.361,128,1.471,162,2.771,166,3.168,196,3.378,197,3.168,246,3.97,250,2.552,338,3.093,438,4.454,439,3.412,440,6.413,441,6.181,442,4.071,443,3.97,444,3.97,445,5.307,446,5.307,447,5.307,448,5.102,449,5.717,450,6.651,451,3.168,452,5.978,453,5.978,454,5.307,455,5.978,456,5.978,457,5.978,458,3.97,459,3.97,460,3.045,461,3.97,462,3.97,463,6.382,464,3.97,465,3.97,466,3.97,467,3.412,468,3.97,469,3.97,470,3.97,471,3.97,472,5.307,473,6.988,474,3.97,475,3.97,476,3.412,477,3.97,478,3.97]],["title/modules/HealthModule.html",[48,1.486,61,2.412]],["body/modules/HealthModule.html",[2,2.738,3,0.311,4,0.279,5,0.216,18,0.019,32,1.114,33,1.564,40,0.311,41,0.31,46,0.016,47,0.016,48,2.599,50,2.741,61,4.22,69,3.321,438,4.874,460,4.268,479,5.564,480,6.564,481,6.564,482,4.783,483,5.564]],["title/injectables/JwtAuthGuard.html",[82,1.343,237,2.239]],["body/injectables/JwtAuthGuard.html",[3,0.298,4,0.267,5,0.207,7,0.475,11,4.464,18,0.019,24,2.969,32,0.988,33,1.497,40,0.298,41,0.356,46,0.015,47,0.015,82,2.289,83,2.786,165,3.179,190,3.821,237,4.091,428,1.67,484,4.577,485,4.577,486,6.854,487,5.497,488,4.905,489,6.111,490,4.905,491,6.395,492,6.395,493,4.085,494,5.325,495,5.325]],["title/injectables/JwtStrategy.html",[82,1.343,274,2.239]],["body/injectables/JwtStrategy.html",[3,0.214,4,0.192,5,0.148,7,0.436,13,2.766,14,0.729,15,2.407,18,0.019,19,1.201,21,3.089,24,2.885,26,2.049,27,0.818,32,1.014,33,1.075,40,0.214,41,0.288,42,2.458,43,2,44,1.683,46,0.013,47,0.013,82,1.853,83,2,85,2.707,94,2.407,98,1.09,99,1.322,100,2.159,101,1.322,102,1.259,103,1.526,128,1.144,130,1.778,137,1.683,144,2.282,147,2.407,164,1.533,169,3.069,187,2.282,190,4.09,194,1.526,196,3.054,197,3.089,204,2.707,210,1.514,212,2.549,221,2.885,234,3.683,235,3.287,236,2.933,250,2.458,255,4.094,274,3.92,282,3.287,288,3.771,289,3.287,294,4.448,301,2.132,303,5.819,305,4.448,428,1.429,431,3.069,488,2.933,489,5.95,493,2.933,496,3.287,497,5.175,498,3.612,499,5.175,500,5.175,501,5.175,502,5.175,503,5.175,504,5.403,505,5.175,506,4.5,507,3.824,508,3.97,509,3.505,510,5.175,511,5.175,512,3.824,513,5.175,514,3.824,515,3.824,516,3.824,517,3.824,518,3.824,519,3.824,520,3.824,521,2.669]],["title/classes/LoginUserDto.html",[41,0.209,173,2.239]],["body/classes/LoginUserDto.html",[3,0.205,4,0.184,5,0.142,7,0.526,14,0.699,17,2.211,18,0.019,19,1.434,27,0.948,32,0.887,37,1.452,40,0.205,41,0.32,46,0.012,47,0.012,102,1.238,103,2.086,127,1.031,143,3.233,164,1.554,165,2.189,168,1.919,173,3.427,192,0.851,193,1.614,194,1.082,195,2.189,204,3.929,205,4.187,243,4.324,258,3.206,297,4.547,309,0.735,312,2.805,317,1.467,319,1.801,321,2.358,326,1.919,327,1.801,329,3.427,345,1.614,350,3.444,351,3.687,352,3.233,353,3.69,355,1.919,490,3.858,522,4.965,523,2.56,524,5.03,525,6.177,526,3.668,527,3.668,528,4.324,529,4.298,530,5.03,531,5.426,532,5.747,533,3.668,534,3.668,535,3.668,536,3.668,537,3.668,538,3.668,539,3.858,540,3.668,541,4.324,542,4.324,543,4.324,544,2.358,545,3.153]],["title/classes/Project.html",[41,0.209,314,0.871]],["body/classes/Project.html",[3,0.153,4,0.137,5,0.106,7,0.499,14,0.522,17,2.311,18,0.019,19,1.498,27,0.789,32,0.893,33,0.771,40,0.273,41,0.301,46,0.01,47,0.01,77,1.206,101,1.686,102,1.432,103,1.595,118,3.137,133,2.625,134,1.35,137,1.206,141,3.208,164,1.468,178,3.002,222,2.404,258,3.097,309,0.549,314,1.768,315,2.277,316,2.277,319,2.404,323,1.434,327,1.936,328,4.24,330,2.356,336,4.118,340,3.224,346,3.381,356,2.141,362,1.625,367,1.028,380,4.232,410,2.625,428,0.668,430,3.286,431,2.553,498,3.406,509,2.721,529,4.149,546,1.913,547,2.438,548,4.232,549,3.897,550,3.132,551,3.51,552,3.51,553,3.775,554,4.648,555,5.408,556,4.648,557,4.148,558,5.548,559,2.741,560,2.721,561,3.132,562,2.741,563,2.103,564,2.741,565,4.88,566,2.85,567,4.195,568,2.741,569,2.741,570,2.741,571,2.741,572,4.195,573,2.741,574,2.741,575,4.88,576,5.06,577,2.103,578,3.476,579,2.356,580,2.741,581,4.084,582,2.85,583,2.356,584,2.741,585,1.762,586,2.103,587,2.741,588,1.762,589,2.356,590,2.356,591,3.775,592,2.356,593,2.356,594,2.356,595,2.741,596,2.741,597,2.741,598,2.356,599,3.137,600,2.103,601,2.356,602,2.356]],["title/controllers/ProjectController.html",[0,1.651,603,2.619]],["body/controllers/ProjectController.html",[0,1.926,2,0.649,3,0.087,4,0.078,5,0.06,7,0.56,14,0.297,15,1.212,17,1.567,18,0.019,19,1.016,21,2.347,24,2.64,26,2.241,27,0.816,29,1.363,32,0.847,33,0.438,36,1.001,37,0.616,40,0.087,41,0.187,42,1.001,43,0.814,44,1.926,46,0.006,47,0.006,89,0.868,98,0.549,100,1.826,101,1.347,102,1.359,103,1.291,104,1.819,110,1.675,120,2.528,121,1.819,128,1.251,130,3.27,137,2.32,147,2.767,162,1.087,164,1.339,165,3.001,169,3.281,175,2.24,176,4.341,179,1.338,180,4.533,183,4.864,184,1.892,186,4.07,187,3.001,190,1.453,192,1.381,194,1.754,196,2.917,203,2.24,206,2.347,207,1.819,210,1.875,212,2.597,215,4.811,216,2.993,219,1.363,220,3.627,221,3.317,222,1.937,223,2.579,224,1.819,226,1.194,227,1.999,228,5.166,237,2.826,238,1.194,239,1.001,244,1.284,245,1.453,252,3.293,264,3.044,265,1.849,266,3.358,301,2.441,308,3.271,313,1.675,314,1.774,319,1.888,320,2.425,337,1.937,345,1.231,347,1.284,363,1.675,367,1.549,442,1.999,451,2.826,508,1.999,560,2.192,566,4.628,603,1.819,604,1.338,605,1.338,606,1.556,607,2.24,608,4.377,609,2.606,610,2.606,611,3.38,612,2.24,613,3.38,614,3.632,615,3.638,616,1.819,617,1.819,618,1.338,619,1.557,620,1.557,621,1.557,622,3.362,623,2.606,624,3.932,625,1.557,626,4.07,627,3.362,628,1.557,629,4.236,630,3.38,631,1.338,632,1.557,633,2.606,634,3.362,635,2.606,636,4.533,637,1.557,638,2.606,639,2.606,640,1.557,641,1.819,642,1.338,643,1.557,644,4.533,645,3.932,646,3.016,647,1.557,648,3.016,649,1.557,650,1.557,651,1.338,652,1.557,653,3.016,654,1.557,655,1.338,656,3.737,657,1.338,658,1.557,659,1.675,660,2.24,661,1.557,662,1.557,663,1.557,664,0.699,665,1.194,666,2.007,667,1.338,668,1.087,669,1.999,670,2.89,671,4.07,672,3.38,673,1.001,674,1.338,675,1.557,676,1.087,677,1.087,678,1.557,679,1.557,680,1.557,681,3.763,682,3.763,683,1.338,684,3.763,685,3.232,686,3.38,687,3.38,688,3.016,689,1.557,690,3.763,691,1.231,692,3.358,693,1.331,694,1.338,695,2.89,696,1.338,697,1.557,698,0.649,699,2.24,700,1.557,701,0.649,702,1.001,703,1.194,704,1.001,705,1.338,706,1.338,707,2.24,708,1.557,709,0.649,710,1.338,711,1.194,712,1.338,713,1.557]],["title/classes/ProjectDoesNotExist.html",[41,0.209,680,1.486]],["body/classes/ProjectDoesNotExist.html",[3,0.242,4,0.216,5,0.167,7,0.321,18,0.019,27,0.73,40,0.405,41,0.43,46,0.014,47,0.014,98,0.909,99,1.104,127,1.577,128,0.955,184,1.625,192,1.002,265,1.273,309,0.865,314,1.679,317,1.434,345,1.214,367,0.909,428,1.851,664,1.504,680,2.221,691,2.073,693,1.71,698,1.801,701,1.801,709,1.801,714,2.127,715,3.353,716,1.546,717,1.546,718,1.546,719,1.546,720,1.546,721,1.821,722,2.008,723,1.546,724,1.214,725,1.912,726,1.402,727,1.9]],["title/classes/ProjectError.html",[41,0.209,715,1.651]],["body/classes/ProjectError.html",[3,0.234,4,0.21,5,0.162,7,0.408,18,0.019,19,0.97,27,0.848,40,0.402,41,0.429,46,0.013,47,0.013,94,1.944,98,1.156,99,1.403,100,1.744,101,1.068,102,0.838,103,1.233,127,1.831,128,0.924,184,1.573,192,0.97,244,2.059,265,1.233,309,0.838,314,1.667,317,1.403,345,1.175,367,0.88,428,1.844,544,2.687,664,1.12,680,1.655,691,2.09,693,1.655,698,1.744,701,1.744,709,1.744,714,2.059,715,3.351,716,1.966,717,1.496,718,1.496,719,1.496,720,1.496,721,1.991,722,1.944,723,1.496,724,1.175,725,1.872,726,1.357,727,1.839,728,4.18]],["title/classes/ProjectIdValidationError.html",[41,0.209,693,1.486]],["body/classes/ProjectIdValidationError.html",[3,0.241,4,0.216,5,0.167,7,0.32,18,0.019,27,0.729,40,0.404,41,0.43,46,0.014,47,0.014,98,0.906,99,1.1,127,1.574,128,0.952,184,1.62,192,0.999,265,1.269,309,0.862,314,1.677,317,1.59,345,1.21,367,1.179,428,1.85,664,1.154,680,1.704,691,2.072,693,2.217,698,1.795,701,1.795,709,1.795,714,2.12,715,3.352,716,1.541,717,1.541,718,1.541,719,1.541,720,1.541,721,2.019,722,2.002,723,1.541,724,1.21,725,1.908,726,1.397,727,1.894]],["title/classes/ProjectInsufficientPermissionsError.html",[41,0.209,709,1.565]],["body/classes/ProjectInsufficientPermissionsError.html",[3,0.241,4,0.216,5,0.167,7,0.32,18,0.019,27,0.729,40,0.405,41,0.43,46,0.014,47,0.014,98,0.908,99,1.102,127,1.575,128,0.953,184,1.622,192,1.001,265,1.271,309,0.864,314,1.678,317,1.432,345,1.212,367,0.908,428,1.85,664,1.156,680,1.707,691,2.072,693,1.707,698,1.798,701,1.798,709,2.337,714,2.124,715,3.353,716,1.543,717,1.543,718,1.543,719,1.543,720,1.543,721,1.819,722,2.005,723,2.006,724,1.575,725,1.91,726,1.4,727,1.897]],["title/modules/ProjectModule.html",[48,1.486,62,2.412]],["body/modules/ProjectModule.html",[2,2.622,3,0.29,4,0.259,5,0.201,18,0.019,32,1.114,33,1.455,40,0.29,41,0.288,46,0.015,47,0.015,48,2.681,50,2.55,51,2.55,52,3.09,53,3.09,54,2.708,55,3.775,56,3.09,62,4.715,65,3.753,66,3.09,67,2.886,69,3.09,76,3.613,77,2.278,101,1.323,178,2.408,314,1.202,599,4.041,603,4.726,666,4.378,667,4.45,673,3.328,729,4.45,730,4.45,731,5.177,732,5.177,733,3.971,734,3.613]],["title/classes/ProjectNotModifiedError.html",[41,0.209,701,1.565]],["body/classes/ProjectNotModifiedError.html",[3,0.241,4,0.216,5,0.167,7,0.32,18,0.019,27,0.729,40,0.405,41,0.43,46,0.014,47,0.014,98,0.908,99,1.102,127,1.575,128,0.953,184,1.622,192,1.001,265,1.271,309,0.864,314,1.678,317,1.432,345,1.212,367,0.908,428,1.85,664,1.156,680,1.707,691,2.072,693,1.707,698,1.798,701,2.337,709,1.798,714,2.124,715,3.353,716,1.543,717,1.543,718,1.543,719,1.543,720,1.543,721,1.819,722,2.005,723,1.543,724,1.212,725,2.122,726,1.819,727,1.897]],["title/classes/ProjectRelationConflict.html",[41,0.209,698,1.565]],["body/classes/ProjectRelationConflict.html",[3,0.241,4,0.216,5,0.167,7,0.32,18,0.019,27,0.729,40,0.405,41,0.43,46,0.014,47,0.014,98,0.908,99,1.102,127,1.575,128,0.953,184,1.622,192,1.001,265,1.271,309,0.864,314,1.678,317,1.432,345,1.212,367,0.908,428,1.85,664,1.156,680,1.707,691,2.072,693,1.707,698,2.337,701,1.798,709,1.798,714,2.124,715,3.353,716,1.543,717,1.543,718,2.006,719,2.006,720,1.543,721,1.819,722,2.005,723,1.543,724,1.212,725,1.91,726,1.4,727,1.897]],["title/injectables/ProjectService.html",[82,1.343,666,2.239]],["body/injectables/ProjectService.html",[3,0.11,4,0.099,5,0.076,7,0.393,8,2.03,14,0.375,15,2.106,18,0.019,19,1.229,21,2.361,26,2.363,27,0.815,29,2.369,32,0.922,33,0.553,40,0.11,41,0.22,43,1.029,44,1.993,46,0.008,47,0.008,77,0.866,82,1.13,83,1.029,85,2.369,94,1.469,98,0.665,100,2.209,101,1.629,102,1.061,103,1.561,122,1.761,128,1.23,129,2.204,130,3.09,137,2.923,141,0.915,143,1.264,147,1.469,164,1.47,169,3.476,178,0.915,184,1.489,187,1.885,192,1.343,193,1.39,194,0.931,196,3.053,206,2.204,207,2.204,210,2.684,219,1.652,222,2.231,239,1.264,244,1.555,245,2.952,246,1.174,249,1.373,264,1.264,265,1.641,288,4.271,301,3.225,308,3.452,313,2.03,314,1.75,320,1.317,328,2.03,337,1.555,344,3.893,345,1.394,347,2.231,356,1.25,367,1.47,376,4.448,431,1.652,434,2.422,451,1.174,476,3.401,521,4.367,547,1.885,548,4.448,553,1.373,560,1.761,582,1.373,606,1.885,608,4.582,615,3.576,616,2.204,617,2.761,618,2.714,629,2.204,641,2.204,653,1.509,656,4.022,666,2.361,668,1.373,669,2.422,673,1.264,677,1.373,680,1.964,681,1.691,685,4.358,691,0.888,693,1.793,698,1.317,699,2.714,701,1.317,702,2.911,704,2.03,707,2.714,709,1.317,711,3.474,715,1.39,724,0.888,727,1.39,734,1.373,735,1.691,736,4.551,737,4.782,738,3.158,739,2.714,740,3.956,741,2.714,742,3.158,743,1.967,744,3.474,745,1.967,746,2.714,747,5.096,748,1.967,749,3.158,750,1.967,751,3.158,752,2.714,753,2.714,754,2.714,755,1.967,756,2.714,757,1.967,758,2.714,759,1.967,760,3.158,761,1.967,762,3.893,763,1.509,764,1.967,765,1.691,766,1.373,767,1.373,768,1.373,769,1.691,770,1.967,771,3.158,772,3.158,773,1.967,774,1.967,775,3.956,776,1.967,777,1.967,778,4.529,779,1.967,780,1.509,781,3.956,782,4.551,783,4.972,784,3.158,785,3.956,786,3.401,787,3.474,788,1.967,789,4.263,790,3.401,791,3.401,792,1.967,793,1.967,794,1.967,795,1.967,796,2.714,797,2.422,798,1.967,799,1.967,800,3.158,801,1.967,802,3.158,803,1.967,804,3.158,805,1.967,806,1.967,807,1.967,808,1.967,809,3.158,810,1.967,811,1.967,812,1.967,813,1.967,814,1.691,815,1.967,816,1.967,817,1.967,818,2.714,819,1.691,820,1.967]],["title/classes/ProjectSlugValidationError.html",[41,0.209,722,1.745]],["body/classes/ProjectSlugValidationError.html",[3,0.241,4,0.216,5,0.167,7,0.32,18,0.019,27,0.729,40,0.404,41,0.43,46,0.014,47,0.014,98,0.906,99,1.1,127,1.574,128,0.952,184,1.62,192,0.999,265,1.269,309,0.862,314,1.677,317,1.59,345,1.21,367,0.906,428,1.85,664,1.154,680,1.704,691,2.072,693,1.704,698,1.795,701,1.795,709,1.795,714,2.12,715,3.352,716,1.541,717,1.541,718,1.541,719,1.541,720,2.004,721,2.019,722,2.603,723,1.541,724,1.21,725,1.908,726,1.397,727,1.894]],["title/classes/ProjectUpdateDataValidationError.html",[41,0.209,727,1.651]],["body/classes/ProjectUpdateDataValidationError.html",[3,0.24,4,0.215,5,0.166,7,0.319,18,0.019,27,0.727,40,0.404,41,0.429,46,0.014,47,0.014,98,0.903,99,1.096,127,1.57,128,0.949,184,2.102,192,1.297,265,1.647,309,0.86,314,1.676,317,1.427,345,1.57,367,0.903,428,1.849,664,1.15,680,1.699,691,2.071,693,1.699,698,1.789,701,1.789,709,1.789,714,2.113,715,3.351,716,1.536,717,1.536,718,1.536,719,1.536,720,1.536,721,1.813,722,1.995,723,1.536,724,1.206,725,2.117,726,1.393,727,2.458]],["title/classes/RegisterUserDto.html",[41,0.209,199,2.412]],["body/classes/RegisterUserDto.html",[3,0.181,4,0.162,5,0.125,7,0.518,13,2.024,14,0.615,17,2.091,18,0.019,19,1.356,27,0.927,32,0.71,37,1.278,40,0.181,41,0.298,46,0.011,47,0.011,101,1.688,102,1.17,125,3.74,127,1.899,129,4.31,134,2.265,164,1.5,167,3.74,192,0.749,193,1.42,194,0.952,195,1.926,199,3.445,204,3.456,205,3.765,212,2.64,258,3.223,297,4.682,309,0.647,312,2.564,319,2.46,326,3.23,327,1.646,329,3.487,335,3.528,343,5.411,345,1.293,347,1.589,350,3.443,351,3.487,352,3.969,355,1.688,389,2.475,506,3.528,523,2.252,529,3.755,531,4.111,541,3.953,542,3.953,543,3.953,704,2.957,821,4.737,822,4.606,823,3.227,824,3.227,825,4.606,826,4.606,827,4.606,828,2.774,829,3.227,830,5.248,831,6.175,832,6.873,833,6.419,834,5.518,835,4.924,836,3.227,837,3.227,838,5.841,839,3.227,840,3.227,841,3.953,842,3.227,843,3.227,844,3.227,845,2.774,846,4.599,847,2.774,848,3.953,849,3.227,850,3.227,851,4.599,852,3.227,853,3.953]],["title/classes/Ticket.html",[41,0.209,362,1.006]],["body/classes/Ticket.html",[3,0.155,4,0.139,5,0.107,7,0.5,10,3.762,14,0.527,17,2.316,18,0.019,19,1.502,27,0.9,32,0.839,40,0.23,41,0.273,46,0.01,47,0.01,77,1.217,102,1.385,103,1.446,124,2.868,133,3.91,134,1.362,137,1.217,141,3.074,164,1.326,168,1.446,178,3.009,195,1.65,252,3.256,258,3.041,309,0.554,314,1.412,315,2.291,316,2.291,319,2.409,323,1.446,327,1.944,336,4.125,340,3.607,346,2.735,347,1.362,356,1.942,362,2.032,365,4.614,366,4.245,367,1.281,368,4.614,369,3.762,370,3.91,375,4.165,376,4.245,380,3.423,381,4.216,391,1.93,392,2.121,393,2.376,398,3.152,402,3.152,403,4.051,404,3.762,407,4.216,408,4.051,410,2.642,414,3.152,415,3.152,498,3.423,509,2.735,529,4.159,547,2.453,550,3.152,551,3.532,552,3.532,553,3.79,556,4.216,558,4.988,560,2.735,561,3.152,563,3.762,576,5.071,577,2.121,579,2.376,586,2.121,590,2.376,591,2.868,592,2.376,593,2.376,594,2.376,600,2.121,601,2.376,688,3.152,734,1.93,854,2.121,855,2.765,856,2.765,857,2.765,858,2.765,859,4.665,860,2.765,861,2.765,862,2.765,863,2.765,864,2.765,865,2.765,866,2.121,867,2.765,868,2.765,869,3.532,870,3.532,871,3.152,872,3.532,873,3.532,874,3.423,875,2.376]],["title/controllers/TicketController.html",[0,1.651,876,2.619]],["body/controllers/TicketController.html",[0,1.851,2,0.9,3,0.121,4,0.108,5,0.084,7,0.509,8,2.185,11,2.372,14,0.411,15,1.581,17,1.858,18,0.019,19,1.205,21,2.848,26,2.493,27,0.862,32,0.95,33,0.607,36,1.387,37,0.854,40,0.121,41,0.12,42,1.387,43,1.129,44,2.284,46,0.008,47,0.008,89,2.345,98,0.716,100,2.165,101,1.409,102,1.262,103,1.531,120,2.185,127,1.182,128,1.392,130,2.414,137,2.539,147,2.78,162,1.506,164,1.484,169,3.546,176,3.226,192,1.339,194,2.078,196,3.152,210,1.889,215,5.2,216,3.21,219,1.778,220,3.739,221,3.074,222,2.945,223,3.226,224,2.372,226,1.655,227,2.607,228,3.66,237,1.288,238,1.655,239,1.387,244,1.674,245,1.895,252,2.842,265,1.763,266,3.66,301,2.894,319,1.217,320,2.165,337,1.674,359,3.568,362,2.009,367,1.526,448,2.607,451,2.51,549,3.544,560,2.345,566,2.372,611,1.855,613,2.922,614,2.607,615,3.709,616,2.372,617,2.372,626,2.922,630,4.101,631,1.855,636,2.922,641,2.372,642,1.855,644,2.922,646,3.66,651,1.855,655,1.855,657,1.855,664,1.279,665,1.655,668,1.506,670,2.922,671,2.922,672,2.922,674,1.855,676,1.506,677,1.506,682,1.855,683,1.855,684,4.462,685,3.709,686,4.101,687,4.101,688,3.66,690,4.462,691,1.459,692,3.981,694,1.855,695,2.922,696,1.855,705,1.855,706,1.855,710,1.855,712,1.855,721,1.685,726,0.7,739,2.922,876,2.372,877,1.855,878,1.855,879,1.855,880,2.158,881,2.158,882,2.158,883,2.158,884,2.158,885,2.158,886,2.158,887,2.158,888,2.372,889,3.897,890,2.158,891,2.158,892,2.158,893,2.158,894,3.399,895,2.158,896,2.158,897,2.158,898,2.51,899,1.855,900,2.607,901,2.158,902,1.655,903,2.158,904,2.158,905,4.462,906,4.462,907,4.771,908,4.101,909,4.771,910,4.771,911,4.771,912,4.771,913,2.158,914,2.158,915,2.922,916,2.158,917,2.158,918,2.158,919,2.922,920,2.158,921,2.158]],["title/classes/TicketDoesNotExist.html",[41,0.209,922,1.745]],["body/classes/TicketDoesNotExist.html",[3,0.251,4,0.225,5,0.174,7,0.333,18,0.019,27,0.748,40,0.403,41,0.429,46,0.014,47,0.014,98,0.944,99,1.145,127,1.615,128,0.991,309,0.898,317,1.468,362,1.929,367,0.944,428,1.846,664,1.54,691,2.069,716,1.605,717,1.605,718,1.605,719,1.605,720,1.605,721,1.865,723,1.605,724,1.26,725,1.527,726,1.455,922,2.672,923,2.345,924,3.536,925,2.208,926,2.208,927,2.084,928,2.084,929,2.084]],["title/classes/TicketError.html",[41,0.209,924,1.745]],["body/classes/TicketError.html",[3,0.243,4,0.217,5,0.168,7,0.418,18,0.019,19,1.006,27,0.86,40,0.4,41,0.427,46,0.014,47,0.014,94,2.015,98,1.184,99,1.437,100,1.807,101,1.107,102,0.868,103,1.278,127,1.857,128,0.958,244,2.134,309,0.868,317,1.437,362,1.913,367,0.912,428,1.838,544,2.785,664,1.161,691,2.089,716,2.013,717,1.551,718,1.551,719,1.551,720,1.551,721,2.026,723,1.551,724,1.218,725,1.477,726,1.407,922,2.015,923,2.267,924,3.535,925,2.134,926,2.134,927,2.015,928,2.015,929,2.015,930,4.333]],["title/classes/TicketIdValidationError.html",[41,0.209,927,1.745]],["body/classes/TicketIdValidationError.html",[3,0.25,4,0.224,5,0.173,7,0.332,18,0.019,27,0.746,40,0.402,41,0.429,46,0.014,47,0.014,98,0.94,99,1.141,127,1.612,128,0.988,309,0.895,317,1.618,362,1.927,367,1.207,428,1.845,664,1.197,691,2.068,716,1.599,717,1.599,718,1.599,719,1.599,720,1.599,721,2.055,723,1.599,724,1.256,725,1.522,726,1.45,922,2.077,923,2.337,924,3.535,925,2.2,926,2.2,927,2.666,928,2.077,929,2.077]],["title/classes/TicketInsufficientPermissionsError.html",[41,0.209,928,1.745]],["body/classes/TicketInsufficientPermissionsError.html",[3,0.25,4,0.224,5,0.174,7,0.332,18,0.019,27,0.747,40,0.403,41,0.429,46,0.014,47,0.014,98,0.942,99,1.143,127,1.614,128,0.989,309,0.897,317,1.467,362,1.928,367,0.942,428,1.845,664,1.199,691,2.069,716,1.602,717,1.602,718,1.602,719,1.602,720,1.602,721,1.863,723,2.055,724,1.614,725,1.525,726,1.452,922,2.081,923,2.341,924,3.536,925,2.204,926,2.204,927,2.081,928,2.669,929,2.081]],["title/modules/TicketModule.html",[48,1.486,63,2.412]],["body/modules/TicketModule.html",[2,2.585,3,0.283,4,0.253,5,0.196,18,0.019,32,1.127,33,1.421,40,0.283,41,0.282,46,0.015,47,0.015,48,2.653,50,2.491,51,2.491,52,3.018,53,3.018,54,2.645,55,3.736,56,3.018,63,4.689,65,3.699,66,3.018,67,2.819,69,3.018,76,3.529,77,2.225,101,1.584,178,2.882,314,1.174,362,1.355,598,4.346,599,3.984,673,3.25,733,4.754,734,3.529,874,4.326,876,4.677,898,4.354,899,4.346,902,3.879,931,4.346,932,4.346,933,5.056,934,5.056]],["title/classes/TicketNotModifiedError.html",[41,0.209,929,1.745]],["body/classes/TicketNotModifiedError.html",[3,0.25,4,0.224,5,0.174,7,0.332,18,0.019,27,0.747,40,0.403,41,0.429,46,0.014,47,0.014,98,0.942,99,1.143,127,1.614,128,0.989,309,0.897,317,1.467,362,1.928,367,0.942,428,1.845,664,1.199,691,2.069,716,1.602,717,1.602,718,1.602,719,1.602,720,1.602,721,1.863,723,1.602,724,1.258,725,1.956,726,1.863,922,2.081,923,2.341,924,3.536,925,2.204,926,2.204,927,2.081,928,2.081,929,2.669]],["title/classes/TicketRelationConflict.html",[41,0.209,925,1.848]],["body/classes/TicketRelationConflict.html",[3,0.25,4,0.224,5,0.174,7,0.332,18,0.019,27,0.747,40,0.403,41,0.429,46,0.014,47,0.014,98,0.942,99,1.143,127,1.614,128,0.989,309,0.897,317,1.467,362,1.928,367,0.942,428,1.845,664,1.199,691,2.069,716,1.602,717,1.602,718,2.055,719,2.055,720,1.602,721,1.863,723,1.602,724,1.258,725,1.525,726,1.452,922,2.081,923,2.341,924,3.536,925,2.827,926,2.204,927,2.081,928,2.081,929,2.081]],["title/injectables/TicketService.html",[82,1.343,898,2.239]],["body/injectables/TicketService.html",[3,0.115,4,0.103,5,0.08,7,0.401,14,0.392,15,2.161,18,0.019,19,1.254,21,2.433,26,2.399,27,0.825,29,1.712,32,0.996,33,0.578,40,0.115,41,0.259,43,1.712,44,2.044,46,0.008,47,0.008,77,0.905,82,1.172,83,1.076,85,1.712,94,1.522,98,0.689,100,2.253,101,1.38,102,1.082,103,1.593,104,2.284,110,1.322,120,2.104,128,1.252,129,2.284,130,3.322,137,2.789,141,1.522,143,1.322,147,0.957,164,1.397,169,3.51,184,1.748,187,2.433,192,1.078,194,1.37,196,3.085,210,2.657,219,1.712,222,1.612,239,1.322,244,1.612,245,1.825,246,1.954,264,1.322,265,1.67,288,4.313,301,3.377,313,2.986,314,1.497,319,1.172,320,1.938,328,2.104,337,1.612,345,1.592,347,2.008,356,1.296,359,3.509,362,2.023,366,2.284,367,1.532,376,2.284,451,1.228,508,2.511,521,4.423,549,4.146,553,2.845,560,1.825,606,1.954,607,2.813,608,2.284,615,3.894,616,2.284,617,2.845,641,2.284,646,3.564,653,1.578,664,0.877,668,1.436,673,1.322,677,1.436,680,1.296,685,4.495,691,0.578,693,1.614,702,2.104,704,2.104,711,2.511,724,0.578,737,1.768,744,4.509,746,3.503,747,5.147,752,3.503,754,2.813,756,2.813,762,2.813,763,1.578,765,1.768,766,1.436,767,1.436,768,1.436,769,1.768,780,1.578,782,3.993,783,4.359,786,3.993,787,3.564,789,4.642,790,1.768,791,1.768,796,1.768,797,3.564,814,1.768,818,2.813,819,1.768,848,2.813,879,2.813,889,3.706,898,1.954,900,2.511,902,1.578,915,2.813,919,2.813,922,2.358,924,1.522,927,1.895,928,1.522,929,1.522,935,1.768,936,2.813,937,2.057,938,2.057,939,3.273,940,2.057,941,3.273,942,2.057,943,6.208,944,3.273,945,2.057,946,2.813,947,2.057,948,3.273,949,2.057,950,2.057,951,2.057,952,1.578,953,2.057,954,2.057,955,2.057,956,2.057,957,2.057,958,3.273,959,2.057,960,2.057,961,2.057,962,4.646,963,2.057,964,2.057,965,2.057,966,2.057,967,2.057,968,3.273,969,3.273,970,2.057,971,2.057,972,2.057,973,2.057,974,3.273,975,1.768,976,2.057,977,2.057,978,2.057,979,2.057,980,2.057,981,2.057,982,2.057,983,2.057]],["title/classes/TicketSlugValidationError.html",[41,0.209,926,1.848]],["body/classes/TicketSlugValidationError.html",[3,0.25,4,0.224,5,0.173,7,0.332,18,0.019,27,0.746,40,0.402,41,0.429,46,0.014,47,0.014,98,0.94,99,1.141,127,1.612,128,0.988,309,0.895,317,1.618,362,1.927,367,0.94,428,1.845,664,1.197,691,2.068,716,1.599,717,1.599,718,1.599,719,1.599,720,2.052,721,2.055,723,1.599,724,1.256,725,1.522,726,1.45,922,2.077,923,2.337,924,3.535,925,2.2,926,2.824,927,2.077,928,2.077,929,2.077]],["title/classes/UpdateProjectDto.html",[41,0.209,656,2.412]],["body/classes/UpdateProjectDto.html",[3,0.155,4,0.139,5,0.108,7,0.538,14,0.529,17,2.081,18,0.019,19,1.35,27,0.877,32,0.898,37,1.099,40,0.155,41,0.351,46,0.01,47,0.01,101,1.803,102,1.386,103,2.206,141,1.917,143,2.65,144,3.636,164,1.364,192,1.263,193,1.814,194,1.216,210,2.497,219,2.157,222,3.317,258,3.188,265,1.216,308,2.935,309,0.556,311,2.13,312,2.298,314,1.757,315,2.298,316,2.298,317,1.053,318,2.877,319,2.319,320,1.158,323,2.157,325,1.657,326,3.619,327,2.181,328,4.393,329,2.935,336,4.02,337,3,338,2.833,339,3.798,340,2.298,345,1.893,346,3.034,347,2.031,350,3.034,353,3.161,354,2.877,355,1.452,356,1.099,357,4.997,358,3.544,362,1.105,367,0.868,380,4.252,396,3.798,410,2.65,420,3.772,428,1.326,431,2.847,498,2.877,548,4.058,549,3.737,557,3.162,572,3.544,606,2.461,656,3.161,664,1.105,669,2.13,704,2.65,725,1.405,736,3.544,984,5.236,985,4.122,986,4.122,987,4.122,988,4.917,989,2.776,990,2.776,991,4.678,992,2.776,993,2.776,994,2.776,995,4.122,996,4.122,997,2.386,998,2.776,999,2.386,1000,2.13,1001,2.776,1002,2.776]],["title/classes/UpdateTicketDto.html",[41,0.209,889,2.239]],["body/classes/UpdateTicketDto.html",[3,0.144,4,0.129,5,0.1,7,0.517,14,0.489,17,2.118,18,0.019,19,1.373,27,0.92,32,0.914,37,1.017,40,0.144,41,0.352,46,0.009,47,0.009,102,1.393,103,2.213,110,3.364,122,2.168,124,3.275,141,1.194,168,3.39,192,1.373,193,1.711,194,1.147,252,3.027,258,3.236,265,1.543,309,0.515,312,2.168,315,2.168,316,2.168,317,0.994,319,1.392,320,1.071,321,2.5,322,2.714,323,2.738,325,1.533,326,3.559,327,1.392,336,2.801,337,2.578,338,1.808,339,2.714,340,2.616,345,1.954,346,2.168,347,2.578,350,3.426,351,3.356,353,3.95,354,2.714,355,1.344,356,1.017,359,2.801,361,1.97,362,1.994,365,4.289,366,4.289,368,4.289,369,4.015,370,4.246,375,3.6,383,4.538,384,4.034,385,4.034,388,4.499,391,3.275,392,3.6,398,4.538,402,3.6,403,3.275,408,3.275,412,3.653,414,4.538,415,3.6,417,3.6,420,2.983,421,4.034,422,3.342,423,3.342,428,1.275,606,4.15,614,2.983,659,2.5,664,1.042,766,1.793,830,3.653,859,4.015,869,4.034,870,4.034,871,3.6,872,4.034,873,4.034,889,2.801,900,1.97,997,2.208,999,2.208,1000,1.97,1003,5.282,1004,3.342,1005,3.342,1006,3.889,1007,2.568,1008,2.568,1009,5.234,1010,2.568,1011,2.568,1012,4.693,1013,2.568,1014,2.568,1015,2.568,1016,2.568,1017,3.889]],["title/classes/UpdateUserDto.html",[41,0.209,214,2.412]],["body/classes/UpdateUserDto.html",[3,0.269,4,0.241,5,0.187,7,0.51,13,2.118,14,0.917,17,1.723,18,0.019,19,1.117,27,0.853,32,0.928,37,1.906,40,0.269,41,0.365,46,0.015,47,0.015,101,1.868,102,0.964,134,2.961,164,1.446,192,1.117,193,2.118,194,1.419,210,2.798,212,2.961,214,4.214,258,3.021,265,1.773,309,0.964,312,3.352,319,2.152,326,2.518,327,2.152,329,2.873,335,3.692,345,1.69,350,3.352,351,3.588,352,3.864,355,2.518,506,4.611,523,3.36,529,3.094,606,2.873,629,4.196,827,5.634,828,4.137,845,4.137,853,5.167,1018,5.167,1019,5.167]],["title/classes/User.html",[41,0.209,164,0.79]],["body/classes/User.html",[3,0.195,4,0.175,5,0.135,7,0.259,14,0.664,17,2.356,18,0.019,19,1.528,27,0.922,29,2.541,32,0.75,40,0.313,41,0.194,46,0.012,47,0.012,77,1.534,89,2.708,101,1.726,102,1.402,111,4.175,118,3.122,125,4.807,133,3.122,134,2.392,137,1.534,141,3.426,164,1.613,166,2.899,178,3.061,204,3.533,205,3.765,252,2.392,297,4.341,309,0.699,315,2.708,316,2.708,319,2.164,320,1.454,327,2.164,338,2.811,340,1.944,356,1.923,362,1.302,363,4.231,396,2.433,410,3.122,430,1.824,509,1.944,531,3.725,547,2.899,554,4.804,561,4.637,563,3.725,566,3.39,567,5.196,576,5.18,577,2.674,578,2.241,585,3.122,586,2.674,588,2.241,648,2.674,724,1.365,822,4.175,859,3.725,1020,2.433,1021,4.219,1022,4.857,1023,6.753,1024,3.486,1025,3.486,1026,4.857,1027,4.857,1028,4.857,1029,4.857,1030,3.486,1031,3.486,1032,4.175,1033,3.486,1034,4.857,1035,4.175,1036,3.486,1037,4.175,1038,2.997,1039,2.997,1040,2.433,1041,2.997,1042,2.997,1043,2.674]],["title/modules/UserModule.html",[48,1.486,64,2.239]],["body/modules/UserModule.html",[2,2.117,3,0.284,4,0.254,5,0.197,18,0.019,32,1.08,33,1.427,40,0.284,41,0.283,46,0.015,47,0.015,48,2.658,50,2.5,51,2.5,52,3.03,53,3.03,54,2.656,55,3.743,56,4.007,64,4.413,65,3.708,66,3.03,67,2.83,69,3.03,76,3.543,77,2.234,101,1.587,164,1.069,178,2.889,234,3.995,236,3.894,591,4.336,733,4.765,1040,4.685,1044,4.363,1045,4.363,1046,4.363,1047,5.076,1048,5.076]],["title/injectables/UserService.html",[82,1.343,234,1.963]],["body/injectables/UserService.html",[3,0.112,4,0.101,5,0.078,7,0.447,13,2.017,14,0.383,15,1.494,18,0.019,19,1.353,26,2.612,27,0.907,32,0.9,33,0.565,40,0.112,41,0.179,44,2.469,46,0.008,47,0.008,77,0.884,82,1.15,83,1.051,86,2.464,94,0.934,98,0.676,99,0.821,100,2.432,101,1.724,102,1.168,103,1.719,104,2.242,118,2.065,128,1.363,130,2.331,137,2.864,147,2.486,164,1.605,166,1.917,167,3.2,168,2.398,169,3.666,170,2.464,171,2.761,173,3.35,178,1.494,184,0.756,187,3.826,192,1.511,193,2.352,194,1.576,195,2.736,196,3.429,197,3.938,198,2.761,199,3.747,204,3.619,205,3.574,206,3.2,207,3.2,209,2.761,210,2.441,211,2.761,214,3.962,219,2.398,222,1.582,232,3.078,234,2.936,244,1.582,245,1.791,246,1.199,248,2.761,249,1.403,255,2.242,256,3.941,265,0.947,288,3.864,297,4.53,301,3.51,317,0.821,322,2.242,356,1.815,363,2.065,367,1.126,401,2.761,430,1.051,433,1.403,504,2.761,509,2.237,521,3.499,522,1.541,560,1.791,578,3.747,585,2.065,591,1.403,685,2.947,744,4.305,747,3.517,753,2.761,763,1.541,780,4.1,787,3.078,821,1.541,1032,3.941,1049,1.727,1050,2.464,1051,3.212,1052,3.212,1053,3.212,1054,3.212,1055,3.212,1056,2.009,1057,2.009,1058,4.013,1059,4.013,1060,4.013,1061,3.212,1062,5.612,1063,2.009,1064,2.761,1065,4.584,1066,3.941,1067,3.941,1068,2.761,1069,3.212,1070,2.761,1071,3.212,1072,2.009,1073,5.345,1074,3.212,1075,2.009,1076,3.212,1077,2.009,1078,3.941,1079,2.009,1080,3.212,1081,2.464,1082,3.941,1083,3.212,1084,2.009,1085,3.212,1086,2.009,1087,3.212,1088,2.761,1089,2.009,1090,2.009,1091,3.212,1092,4.013,1093,2.009,1094,2.009,1095,2.009,1096,2.009,1097,2.009,1098,2.009,1099,2.009,1100,3.212,1101,4.584,1102,2.009,1103,2.009,1104,3.212,1105,4.013,1106,2.009,1107,2.009,1108,3.212,1109,2.009,1110,2.009,1111,2.009,1112,2.009,1113,2.009,1114,2.009]],["title/coverage.html",[1115,4.391]],["body/coverage.html",[0,2.779,1,2.392,5,0.133,6,2.945,18,0.019,31,2.045,34,2.045,41,0.423,46,0.012,47,0.012,54,1.793,82,2.406,84,2.945,102,1.11,160,2.392,161,2.945,164,0.721,173,2.045,199,2.203,210,1.357,214,2.203,216,2.575,229,2.045,234,1.793,237,2.045,274,2.045,286,2.945,308,2.045,310,2.945,311,3.681,314,0.795,359,2.045,360,2.945,361,3.681,362,0.918,425,2.897,427,2.945,430,1.793,435,2.945,437,2.945,438,2.392,439,2.945,484,2.945,485,2.945,496,2.945,522,2.628,523,3.865,539,2.628,546,3.865,582,2.392,599,2.203,603,2.392,604,2.945,656,2.203,666,2.045,676,2.392,680,1.357,693,1.357,698,1.429,701,1.429,709,1.429,714,3.378,715,1.508,722,1.594,727,1.508,735,2.945,767,2.392,768,2.392,821,2.628,854,3.681,874,2.392,876,2.392,877,2.945,889,2.045,898,2.045,922,1.594,923,3.516,924,1.594,925,1.688,926,1.688,927,1.594,928,1.594,929,1.594,935,2.945,952,2.628,984,2.945,1003,2.945,1018,2.945,1020,3.865,1040,2.392,1049,2.945,1078,2.945,1115,2.945,1116,3.426,1117,7.794,1118,6.969,1119,4.798,1120,4.798,1121,2.945,1122,5.777,1123,7.612,1124,4.798,1125,2.945,1126,5.538,1127,4.798,1128,4.798,1129,5.538,1130,5.538,1131,4.798,1132,4.798,1133,3.426,1134,2.945,1135,5.157,1136,2.945,1137,3.426,1138,3.426]],["title/dependencies.html",[51,2.221,1139,2.698]],["body/dependencies.html",[18,0.019,33,1.467,37,2.066,41,0.352,46,0.015,47,0.015,51,2.57,71,4.003,77,2.296,190,2.91,277,4.003,323,2.73,355,2.73,356,2.066,429,3.355,460,4.003,482,4.486,488,4.846,493,4.003,766,3.642,1000,4.003,1088,4.486,1140,6.317,1141,6.794,1142,5.218,1143,6.317,1144,5.218,1145,5.218,1146,5.218,1147,5.218,1148,5.218,1149,5.218,1150,5.218,1151,5.218,1152,5.218,1153,5.218,1154,5.218,1155,5.218,1156,5.218,1157,5.218,1158,5.218,1159,5.218,1160,5.218,1161,5.218,1162,5.218]],["title/miscellaneous/functions.html",[1163,1.874,1164,3.876]],["body/miscellaneous/functions.html",[7,0.488,9,3.887,14,0.66,18,0.018,22,2.656,26,2.766,27,0.785,30,2.656,31,2.067,46,0.012,47,0.012,54,2.913,88,2.977,91,2.656,98,0.729,100,2.74,101,1.678,102,1.116,103,1.988,110,2.226,115,4.863,118,3.58,125,2.417,127,1.359,130,1.61,141,2.59,144,3.324,145,4.272,147,1.61,164,0.729,167,2.417,168,1.812,192,1.122,194,1.937,196,2.248,197,2.067,204,1.812,205,1.931,222,3.123,250,2.226,252,1.706,265,1.425,309,0.694,314,0.804,317,1.235,319,1.24,321,2.226,322,2.417,325,2.067,326,1.812,338,3.054,339,2.417,343,2.656,345,1.359,346,2.695,347,2.743,362,1.296,367,0.729,370,2.226,379,2.977,404,2.656,412,2.417,441,2.977,448,3.708,487,2.977,528,2.977,539,3.708,544,2.226,545,2.977,557,4.623,585,2.226,659,3.874,660,5.181,676,3.374,691,1.964,692,2.656,702,3.58,721,1.569,767,3.374,768,3.374,797,2.656,830,2.417,835,2.656,847,2.977,888,3.374,889,3.598,905,4.155,906,4.787,946,2.977,952,3.708,975,2.977,1021,2.417,1064,4.155,1067,4.155,1070,2.977,1121,2.977,1122,5.45,1125,2.977,1134,2.977,1135,2.977,1136,4.155,1163,2.067,1164,2.977,1165,3.463,1166,6.027,1167,3.463,1168,3.463,1169,3.463,1170,3.463,1171,2.977,1172,3.463,1173,3.463,1174,2.977,1175,2.977,1176,3.463,1177,3.463,1178,3.463,1179,4.155,1180,3.463,1181,3.463,1182,4.834,1183,6.027,1184,6.027,1185,3.463,1186,3.463,1187,3.463,1188,2.977,1189,3.463,1190,3.463,1191,3.463,1192,3.463,1193,3.463,1194,3.463,1195,3.463,1196,3.463,1197,3.463,1198,2.977,1199,3.463,1200,2.977,1201,3.463,1202,2.977,1203,3.463,1204,3.463,1205,3.463,1206,3.463,1207,3.463,1208,3.463,1209,4.834,1210,4.834,1211,5.45,1212,5.569,1213,4.834,1214,3.463,1215,3.463,1216,3.463,1217,3.463,1218,3.463,1219,3.463,1220,3.463,1221,3.463,1222,3.463,1223,3.463,1224,3.463,1225,3.463,1226,3.463,1227,3.463,1228,3.463,1229,3.463,1230,5.569,1231,2.977,1232,3.463,1233,3.463,1234,3.463,1235,3.463,1236,3.463,1237,3.463,1238,3.463,1239,3.463]],["title/index.html",[14,0.598,152,2.191,1240,2.408]],["body/index.html",[5,0.234,9,2.111,11,2.111,13,1.331,18,0.018,23,2.32,24,1.686,25,4.618,26,2.487,27,0.571,29,1.582,31,1.805,46,0.011,47,0.011,51,1.49,55,1.686,89,2.448,91,3.964,99,0.773,105,2.111,109,5.705,116,4.442,124,2.111,126,2.6,132,3.774,134,2.162,149,2.6,150,4.349,152,3.064,153,2.6,155,3.774,156,2.111,164,1.088,165,1.805,170,2.32,190,1.686,191,2.32,192,1.019,205,1.686,210,1.738,219,1.582,220,1.686,224,3.957,252,1.49,265,1.295,274,1.805,314,1.649,318,2.111,320,2.511,337,2.162,338,2.921,345,0.85,362,1.866,363,3.645,367,1.322,368,2.111,373,2.6,382,2.6,390,3.774,408,3.064,412,3.064,416,3.774,417,2.32,425,1.582,440,3.774,442,2.32,449,2.6,467,2.6,490,2.32,509,2.448,544,1.944,547,1.805,549,4.165,588,2.822,589,2.6,605,3.774,608,3.957,615,3.645,629,3.064,659,1.944,664,0.811,665,3.367,702,2.822,703,3.367,724,0.85,741,2.6,825,2.6,866,2.32,871,2.32,878,3.774,888,3.607,908,3.774,1019,2.6,1035,2.6,1038,2.6,1039,3.774,1050,2.32,1081,2.32,1171,2.6,1174,2.6,1179,4.874,1200,4.874,1231,2.6,1240,2.32,1241,3.774,1242,3.025,1243,3.025,1244,3.025,1245,3.025,1246,3.025,1247,4.39,1248,3.025,1249,2.6,1250,5.168,1251,6.28,1252,6.479,1253,4.39,1254,3.025,1255,3.025,1256,4.39,1257,5.168,1258,3.025,1259,4.39,1260,4.39,1261,4.39,1262,4.39,1263,4.39,1264,5.67,1265,3.774,1266,3.025,1267,3.025,1268,3.025,1269,4.39,1270,4.39,1271,5.168,1272,3.025,1273,4.39,1274,4.39,1275,2.6,1276,3.025,1277,3.025,1278,3.025,1279,3.025,1280,3.025,1281,3.025,1282,3.025,1283,4.39,1284,4.39,1285,4.39,1286,2.32,1287,3.025,1288,3.025,1289,3.025,1290,3.025,1291,3.025,1292,3.025,1293,3.025,1294,5.168,1295,4.39,1296,3.025,1297,3.025,1298,3.025,1299,3.025,1300,3.025,1301,4.39,1302,3.025,1303,3.025,1304,3.025,1305,3.025,1306,5.398,1307,3.025,1308,3.025,1309,3.025,1310,3.025,1311,3.025,1312,3.025,1313,3.025,1314,3.025,1315,3.025,1316,3.964,1317,3.025,1318,3.025,1319,3.025,1320,5.168,1321,3.025,1322,3.025,1323,3.025,1324,3.025,1325,3.025,1326,3.025,1327,3.025,1328,3.025,1329,3.025,1330,4.39,1331,3.025,1332,3.025,1333,3.025,1334,3.025,1335,3.025,1336,3.025,1337,3.025,1338,3.025,1339,3.025,1340,3.025,1341,3.025,1342,4.39,1343,3.025,1344,3.025,1345,3.025,1346,4.39,1347,3.025,1348,3.025,1349,3.025,1350,3.025,1351,3.025,1352,3.025,1353,3.025,1354,3.025,1355,3.025,1356,3.025,1357,3.025,1358,3.025,1359,3.025,1360,3.025,1361,3.025,1362,3.025,1363,4.39,1364,3.025,1365,3.025,1366,2.6,1367,3.025,1368,3.025,1369,2.6,1370,3.025,1371,3.025,1372,2.6,1373,3.025,1374,3.607,1375,2.6,1376,2.6,1377,2.32,1378,2.32,1379,2.6]],["title/license.html",[152,2.191,1240,2.408,1374,2.191]],["body/license.html",[4,0.319,5,0.224,7,0.145,13,0.861,18,0.013,19,0.454,24,1.091,31,2.353,32,0.302,41,0.109,46,0.008,47,0.008,67,1.091,85,1.024,86,1.501,87,1.682,89,1.091,101,0.804,120,2.021,121,1.366,122,1.091,123,1.682,135,4.251,145,4.052,156,2.752,166,3.556,193,0.861,194,1.558,249,1.366,258,1.987,264,2.021,298,2.703,319,1.616,323,1.024,325,2.695,334,3.389,345,1.39,365,1.366,370,1.258,383,1.501,389,1.501,391,1.366,403,1.366,413,2.534,426,1.258,429,2.021,431,1.024,434,1.501,451,1.168,532,1.682,547,4.077,548,3.452,550,1.501,578,1.258,585,2.902,612,1.682,659,1.258,703,2.412,724,1.108,726,0.635,758,1.682,826,2.703,830,1.366,834,1.682,835,1.501,841,1.682,866,1.501,888,1.366,936,4.962,991,1.682,1004,1.682,1005,4.251,1043,5.627,1050,1.501,1066,3.881,1068,2.703,1081,4.69,1082,3.389,1175,1.682,1188,1.682,1198,1.682,1202,3.389,1211,2.703,1249,1.682,1265,3.389,1275,3.389,1286,1.501,1306,2.703,1316,1.501,1366,1.682,1369,3.389,1372,1.682,1374,5.12,1375,1.682,1376,5.121,1377,3.463,1378,3.024,1379,1.682,1380,1.957,1381,1.957,1382,1.957,1383,5.957,1384,6.466,1385,4.515,1386,4.946,1387,1.957,1388,6.636,1389,6.114,1390,1.957,1391,1.957,1392,6.114,1393,6.364,1394,6.114,1395,1.957,1396,4.946,1397,1.957,1398,1.957,1399,1.957,1400,4.515,1401,1.957,1402,1.957,1403,4.515,1404,3.144,1405,3.144,1406,1.957,1407,3.942,1408,3.144,1409,3.144,1410,1.957,1411,3.144,1412,1.957,1413,3.144,1414,1.957,1415,1.957,1416,1.957,1417,1.957,1418,1.957,1419,1.957,1420,1.957,1421,3.942,1422,1.957,1423,3.144,1424,6.466,1425,1.957,1426,5.282,1427,4.515,1428,3.144,1429,3.942,1430,1.957,1431,1.957,1432,1.957,1433,1.957,1434,1.957,1435,1.957,1436,1.957,1437,3.942,1438,1.957,1439,5.957,1440,3.144,1441,1.957,1442,3.144,1443,1.957,1444,6.83,1445,6.883,1446,1.957,1447,1.957,1448,1.957,1449,1.957,1450,1.957,1451,3.144,1452,1.957,1453,1.957,1454,1.957,1455,1.957,1456,4.515,1457,4.946,1458,1.957,1459,3.144,1460,4.515,1461,3.144,1462,4.946,1463,3.144,1464,1.957,1465,1.957,1466,3.942,1467,1.957,1468,1.957,1469,1.957,1470,1.957,1471,3.144,1472,1.957,1473,1.957,1474,3.942,1475,1.957,1476,1.957,1477,1.957,1478,1.957,1479,1.957,1480,4.515,1481,6.114,1482,1.957,1483,1.957,1484,3.144,1485,3.942,1486,3.144,1487,3.144,1488,3.144,1489,3.144,1490,3.144,1491,3.144,1492,3.942,1493,3.144,1494,3.144,1495,3.144,1496,3.144,1497,1.957,1498,3.144,1499,1.957,1500,1.957,1501,4.946,1502,5.552,1503,3.942,1504,3.144,1505,1.957,1506,1.957,1507,3.144,1508,3.144,1509,3.942,1510,3.144,1511,1.957,1512,1.957,1513,1.957,1514,3.942,1515,1.957,1516,1.957,1517,1.957,1518,3.144,1519,1.957,1520,1.957,1521,1.957,1522,1.957,1523,1.957,1524,1.957,1525,1.957,1526,3.144,1527,1.957,1528,1.957,1529,1.957,1530,1.957,1531,1.957,1532,1.957,1533,1.957,1534,1.957,1535,1.957,1536,1.957,1537,1.957,1538,5.773,1539,1.957,1540,1.957,1541,1.957,1542,1.957,1543,1.957,1544,4.515,1545,3.144,1546,4.515,1547,1.957,1548,1.957,1549,1.957,1550,1.957,1551,3.942,1552,1.957,1553,3.144,1554,3.144,1555,1.957,1556,1.957,1557,1.957,1558,3.144,1559,1.957,1560,1.957,1561,1.957,1562,1.957,1563,1.957,1564,1.957,1565,1.957,1566,4.515,1567,1.957,1568,1.957,1569,1.957,1570,1.957,1571,1.957,1572,1.957,1573,1.957,1574,1.957,1575,1.957,1576,1.957,1577,1.957,1578,3.144,1579,1.957,1580,3.144,1581,1.957,1582,1.957,1583,1.957,1584,1.957,1585,1.957,1586,1.957,1587,1.957,1588,1.957,1589,1.957,1590,4.515,1591,3.942,1592,3.942,1593,3.942,1594,3.144,1595,3.942,1596,3.144,1597,3.144,1598,3.144,1599,1.957,1600,1.957,1601,1.957,1602,1.957,1603,1.957,1604,1.957,1605,3.144,1606,1.957,1607,1.957,1608,1.957,1609,4.946,1610,1.957,1611,1.957,1612,1.957,1613,1.957,1614,1.957,1615,1.957,1616,1.957,1617,1.957,1618,1.957,1619,4.946,1620,1.957,1621,1.957,1622,1.957,1623,1.957,1624,1.957,1625,1.957,1626,1.957,1627,1.957,1628,1.957,1629,1.957,1630,1.957,1631,1.957,1632,1.957,1633,1.957,1634,3.942,1635,1.957,1636,1.957,1637,1.957,1638,3.144,1639,1.957,1640,1.957,1641,1.957,1642,1.957,1643,1.957,1644,1.957,1645,1.957,1646,1.957,1647,1.957,1648,1.957,1649,1.957,1650,1.957,1651,1.957,1652,1.957,1653,1.957,1654,3.144,1655,1.957,1656,1.957,1657,3.144,1658,3.144,1659,1.957,1660,1.957,1661,1.957,1662,1.957,1663,1.957,1664,1.957,1665,1.957,1666,1.957,1667,1.957,1668,1.957,1669,1.682,1670,1.682,1671,1.957,1672,1.957,1673,1.957,1674,1.957,1675,1.957,1676,1.957]],["title/modules.html",[50,2.516]],["body/modules.html",[18,0.016,46,0.016,47,0.016,49,3.96,50,2.794,60,3.647,61,3.647,62,3.647,63,3.647,64,3.386,1286,4.352,1316,5.673,1677,7.395,1678,7.395,1679,7.49,1680,5.673]],["title/overview.html",[1681,4.391]],["body/overview.html",[2,1.982,18,0.019,34,3.89,46,0.014,47,0.014,48,1.882,49,5.326,50,2.341,51,2.341,52,2.836,53,2.836,54,2.486,55,2.649,56,2.836,57,4.085,58,4.085,59,4.085,60,4.815,61,4.189,62,4.525,63,4.525,64,4.351,65,3.559,66,2.836,67,2.649,83,2.486,229,4.351,234,3.814,270,4.085,272,4.085,273,4.085,274,3.89,309,0.952,426,3.055,666,3.89,729,4.085,730,4.085,898,3.89,931,4.085,932,4.085,1044,4.085,1045,4.085,1046,4.085,1681,4.085,1682,4.752,1683,4.752,1684,4.752,1685,4.752,1686,4.752]],["title/properties.html",[327,1.614,1139,2.698]],["body/properties.html",[7,0.426,18,0.018,46,0.016,47,0.016,150,4.4,156,4.003,320,2.392,327,2.053,338,2.667,588,3.687,1241,4.93,1374,4.003,1377,4.4,1378,4.4,1669,4.93,1670,4.93,1687,5.736,1688,5.736,1689,5.736,1690,5.736,1691,5.736,1692,5.736,1693,5.736]],["title/miscellaneous/typealiases.html",[1163,1.874,1694,4.509]],["body/miscellaneous/typealiases.html",[14,1.076,18,0.016,41,0.314,46,0.016,47,0.016,102,1.452,134,2.782,164,1.394,314,1.311,338,2.627,356,2.237,396,3.943,430,3.465,546,3.943,578,4.257,582,4.904,583,4.855,648,4.333,1020,3.943,1021,3.943,1037,4.855,1042,4.855,1043,4.333,1163,3.372,1695,5.649,1696,4.855,1697,4.855]],["title/miscellaneous/variables.html",[105,3.147,1163,1.874]],["body/miscellaneous/variables.html",[14,1.019,18,0.018,41,0.357,46,0.016,47,0.016,105,3.732,133,4.414,134,3.382,164,1.35,178,3.437,314,1.241,320,2.23,338,2.487,356,2.882,362,1.433,509,3.828,546,3.732,588,3.437,599,4.414,600,4.917,602,4.596,854,4.102,874,4.792,875,4.596,1020,3.732,1021,3.732,1040,4.475,1041,4.596,1163,3.192,1696,4.596,1697,4.596,1698,5.347,1699,6.866]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"interfaces/ExpressRequestWithUser.html":{},"interfaces/ExpressRequestWithUser-1.html":{},"interfaces/ExpressRequestWithUser-2.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"modules/ProjectModule.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"injectables/ProjectService.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/Ticket.html":{},"controllers/TicketController.html":{},"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"modules/TicketModule.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"injectables/TicketService.html":{},"classes/TicketSlugValidationError.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":819,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TicketService.html":{}}}],["0.14.1",{"_index":1152,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":1160,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1151,"title":{},"body":{"dependencies.html":{}}}],["0.5.15",{"_index":1149,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1156,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":434,"title":{"interfaces/ExpressRequestWithUser-1.html":{}},"body":{"injectables/ProjectService.html":{},"license.html":{}}}],["1.0.0",{"_index":1687,"title":{},"body":{"properties.html":{}}}],["1.8.0",{"_index":1154,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1123,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1095,"title":{},"body":{"injectables/UserService.html":{}}}],["100",{"_index":1117,"title":{},"body":{"coverage.html":{}}}],["1024",{"_index":473,"title":{},"body":{"controllers/HealthController.html":{}}}],["11.0.0",{"_index":1143,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":1144,"title":{},"body":{"dependencies.html":{}}}],["11.0.11",{"_index":1141,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":1145,"title":{},"body":{"dependencies.html":{}}}],["11.0.6",{"_index":1147,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":392,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"classes/UpdateTicketDto.html":{}}}],["128",{"_index":478,"title":{},"body":{"controllers/HealthController.html":{}}}],["1h",{"_index":285,"title":{},"body":{"modules/AuthModule.html":{}}}],["2",{"_index":436,"title":{"interfaces/ExpressRequestWithUser-2.html":{}},"body":{}}],["2.0",{"_index":1378,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["2/2",{"_index":1118,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":636,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["2004",{"_index":1381,"title":{},"body":{"license.html":{}}}],["201",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProjectController.html":{}}}],["2024",{"_index":391,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"classes/UpdateTicketDto.html":{},"license.html":{}}}],["24",{"_index":1223,"title":{},"body":{"miscellaneous/functions.html":{}}}],["25",{"_index":1685,"title":{},"body":{"overview.html":{}}}],["3",{"_index":1686,"title":{},"body":{"overview.html":{}}}],["3/3",{"_index":1120,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":472,"title":{},"body":{"controllers/HealthController.html":{}}}],["3000",{"_index":112,"title":{},"body":{"injectables/AppService.html":{}}}],["304",{"_index":894,"title":{},"body":{"controllers/TicketController.html":{}}}],["31t23:59:59.000z",{"_index":1012,"title":{},"body":{"classes/UpdateTicketDto.html":{}}}],["31t23:59:59z",{"_index":393,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["4.0.0",{"_index":1140,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":1157,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1119,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProjectController.html":{}}}],["401",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProjectController.html":{}}}],["404",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProjectController.html":{}}}],["409",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProjectController.html":{}}}],["5",{"_index":1683,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":1150,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1124,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1416,"title":{},"body":{"license.html":{}}}],["500",{"_index":626,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["5000",{"_index":470,"title":{},"body":{"controllers/HealthController.html":{}}}],["507f1f77bcf86cd799439010",{"_index":424,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["507f1f77bcf86cd799439010'})@ismongoid()@isnotempty",{"_index":405,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["507f1f77bcf86cd799439012",{"_index":422,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/UpdateTicketDto.html":{}}}],["507f1f77bcf86cd799439013",{"_index":423,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/UpdateTicketDto.html":{}}}],["6",{"_index":1682,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":1126,"title":{},"body":{"coverage.html":{}}}],["6/7",{"_index":1128,"title":{},"body":{"coverage.html":{}}}],["60c72b2f5b1b2c6f5e8c3333",{"_index":597,"title":{},"body":{"classes/Project.html":{}}}],["60c72b2f5b1b2c6f5e8c4444",{"_index":596,"title":{},"body":{"classes/Project.html":{}}}],["60c72b2f5b1b2c6f5e8c5555",{"_index":595,"title":{},"body":{"classes/Project.html":{}}}],["60c72b2f5b1b2c6f5e8c6666",{"_index":594,"title":{},"body":{"classes/Project.html":{},"classes/Ticket.html":{}}}],["60c72b2f5b1b2c6f5e8c7777",{"_index":593,"title":{},"body":{"classes/Project.html":{},"classes/Ticket.html":{}}}],["60c72b2f5b1b2c6f5e8c8888",{"_index":592,"title":{},"body":{"classes/Project.html":{},"classes/Ticket.html":{}}}],["60c72b2f5b1b2c6f5e8c9999",{"_index":590,"title":{},"body":{"classes/Project.html":{},"classes/Ticket.html":{}}}],["63e4e8d6e92f5e0b6f9a2f33",{"_index":357,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/UpdateProjectDto.html":{}}}],["63e4e8d6e92f5e0b6f9a2f34",{"_index":358,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/UpdateProjectDto.html":{}}}],["63e4e8d6e92f5e0b6f9a2f35",{"_index":1001,"title":{},"body":{"classes/UpdateProjectDto.html":{}}}],["63e4e8d6e92f5e0b6f9a2f36",{"_index":1002,"title":{},"body":{"classes/UpdateProjectDto.html":{}}}],["64",{"_index":850,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["64)@matches(/(?=.*[a",{"_index":837,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["7",{"_index":1684,"title":{},"body":{"overview.html":{}}}],["7.8.2",{"_index":1162,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":1132,"title":{},"body":{"coverage.html":{}}}],["8.11.0",{"_index":1155,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":1133,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":1127,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":841,"title":{},"body":{"classes/RegisterUserDto.html":{},"license.html":{}}}],["9/9",{"_index":1129,"title":{},"body":{"coverage.html":{}}}],["_",{"_index":1100,"title":{},"body":{"injectables/UserService.html":{}}}],["__v",{"_index":786,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TicketService.html":{}}}],["_hasusernameoremail",{"_index":525,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["_id",{"_index":783,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TicketService.html":{}}}],["ability",{"_index":1292,"title":{},"body":{"index.html":{}}}],["above",{"_index":1570,"title":{},"body":{"license.html":{}}}],["abuse",{"_index":1311,"title":{},"body":{"index.html":{}}}],["acceptance",{"_index":1636,"title":{},"body":{"license.html":{}}}],["accepting",{"_index":1634,"title":{},"body":{"license.html":{}}}],["access",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"injectables/TicketService.html":{},"classes/User.html":{},"index.html":{}}}],["accessible",{"_index":646,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{}}}],["accessing",{"_index":1029,"title":{},"body":{"classes/User.html":{}}}],["accessors",{"_index":90,"title":{},"body":{"injectables/AppService.html":{}}}],["accesstoken",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["according",{"_index":793,"title":{},"body":{"injectables/ProjectService.html":{}}}],["account",{"_index":531,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/User.html":{}}}],["accounts",{"_index":1027,"title":{},"body":{"classes/User.html":{}}}],["act",{"_index":1642,"title":{},"body":{"license.html":{}}}],["acting",{"_index":1398,"title":{},"body":{"license.html":{}}}],["actions",{"_index":1347,"title":{},"body":{"index.html":{}}}],["active",{"_index":567,"title":{},"body":{"classes/Project.html":{},"classes/User.html":{}}}],["acts",{"_index":1617,"title":{},"body":{"license.html":{}}}],["add",{"_index":1306,"title":{},"body":{"index.html":{},"license.html":{}}}],["addendum",{"_index":1560,"title":{},"body":{"license.html":{}}}],["additional",{"_index":1005,"title":{},"body":{"classes/UpdateTicketDto.html":{},"license.html":{}}}],["additions",{"_index":1458,"title":{},"body":{"license.html":{}}}],["address",{"_index":822,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/User.html":{}}}],["admin",{"_index":1038,"title":{},"body":{"classes/User.html":{},"index.html":{}}}],["advised",{"_index":1632,"title":{},"body":{"license.html":{}}}],["against",{"_index":1068,"title":{},"body":{"injectables/UserService.html":{},"license.html":{}}}],["agree",{"_index":1645,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":1593,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":1575,"title":{},"body":{"license.html":{}}}],["alias",{"_index":1131,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":1695,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alleging",{"_index":1523,"title":{},"body":{"license.html":{}}}],["allow",{"_index":1352,"title":{},"body":{"index.html":{}}}],["allowed",{"_index":1238,"title":{},"body":{"miscellaneous/functions.html":{}}}],["allowing",{"_index":1058,"title":{},"body":{"injectables/UserService.html":{}}}],["alone",{"_index":1515,"title":{},"body":{"license.html":{}}}],["along",{"_index":550,"title":{},"body":{"classes/Project.html":{},"classes/Ticket.html":{},"license.html":{}}}],["alongside",{"_index":1559,"title":{},"body":{"license.html":{}}}],["already",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"injectables/UserService.html":{}}}],["and/or",{"_index":1639,"title":{},"body":{"license.html":{}}}],["annotations",{"_index":1449,"title":{},"body":{"license.html":{}}}],["apache",{"_index":1377,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["api",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"index.html":{}}}],["api.to",{"_index":151,"title":{},"body":{"injectables/AppService.html":{}}}],["api/v1",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["api/v1/login",{"_index":1293,"title":{},"body":{"index.html":{}}}],["api/v1/projects",{"_index":605,"title":{},"body":{"controllers/ProjectController.html":{},"index.html":{}}}],["api/v1/projects/:id",{"_index":1294,"title":{},"body":{"index.html":{}}}],["api/v1/register",{"_index":1290,"title":{},"body":{"index.html":{}}}],["api/v1/tickets",{"_index":878,"title":{},"body":{"controllers/TicketController.html":{},"index.html":{}}}],["api/v1/tickets/:id",{"_index":1295,"title":{},"body":{"index.html":{}}}],["api/v1/tickets:id",{"_index":1296,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["apibody",{"_index":670,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["apioperation",{"_index":671,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["apiparam",{"_index":672,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["apiproperty",{"_index":350,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{}}}],["apiproperty({description",{"_index":329,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateUserDto.html":{}}}],["apiresponse",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["apitags",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["apitags(\"authentication",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags(\"health",{"_index":461,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags(\"information",{"_index":38,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags(\"project",{"_index":678,"title":{},"body":{"controllers/ProjectController.html":{}}}],["apitags(\"ticket",{"_index":903,"title":{},"body":{"controllers/TicketController.html":{}}}],["app.controller",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appear",{"_index":1556,"title":{},"body":{"license.html":{}}}],["appendix",{"_index":1442,"title":{},"body":{"license.html":{}}}],["applicable",{"_index":1591,"title":{},"body":{"license.html":{}}}],["application",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["applies",{"_index":1175,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["apply",{"_index":1654,"title":{},"body":{"license.html":{}}}],["appmodule",{"_index":49,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":1198,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["appropriateness",{"_index":1604,"title":{},"body":{"license.html":{}}}],["appservice",{"_index":34,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["archives",{"_index":1668,"title":{},"body":{"license.html":{}}}],["arising",{"_index":1622,"title":{},"body":{"license.html":{}}}],["arr1",{"_index":1192,"title":{},"body":{"miscellaneous/functions.html":{}}}],["arr2",{"_index":1182,"title":{},"body":{"miscellaneous/functions.html":{}}}],["array",{"_index":346,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"classes/Project.html":{},"classes/Ticket.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"miscellaneous/functions.html":{}}}],["arrays",{"_index":1184,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asserted",{"_index":1651,"title":{},"body":{"license.html":{}}}],["assigned",{"_index":381,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["assignees",{"_index":366,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"injectables/TicketService.html":{},"classes/UpdateTicketDto.html":{}}}],["associated",{"_index":431,"title":{},"body":{"interfaces/ExpressRequestWithUser.html":{},"interfaces/ExpressRequestWithUser-1.html":{},"interfaces/ExpressRequestWithUser-2.html":{},"injectables/JwtStrategy.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"classes/UpdateProjectDto.html":{},"license.html":{}}}],["assume",{"_index":1606,"title":{},"body":{"license.html":{}}}],["async",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["attach",{"_index":1655,"title":{},"body":{"license.html":{}}}],["attached",{"_index":1441,"title":{},"body":{"license.html":{}}}],["attachments",{"_index":1331,"title":{},"body":{"index.html":{}}}],["attempting",{"_index":944,"title":{},"body":{"injectables/TicketService.html":{}}}],["attribution",{"_index":1544,"title":{},"body":{"license.html":{}}}],["audit",{"_index":1336,"title":{},"body":{"index.html":{}}}],["auth",{"_index":1317,"title":{},"body":{"index.html":{}}}],["auth.controller",{"_index":279,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["auth.guard.ts",{"_index":485,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/dto/update",{"_index":1089,"title":{},"body":{"injectables/UserService.html":{}}}],["auth/jwt",{"_index":674,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["auth0",{"_index":1318,"title":{},"body":{"index.html":{}}}],["authcontroller",{"_index":160,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":490,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"classes/LoginUserDto.html":{},"index.html":{}}}],["authenticated",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ExpressRequestWithUser.html":{},"interfaces/ExpressRequestWithUser-1.html":{},"interfaces/ExpressRequestWithUser-2.html":{},"injectables/JwtStrategy.html":{},"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["authenticates",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["authenticating",{"_index":497,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authentication",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginUserDto.html":{},"controllers/ProjectController.html":{},"index.html":{}}}],["authguard",{"_index":492,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard(\"jwt",{"_index":491,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":60,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1693,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":502,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authorized",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"injectables/TicketService.html":{},"license.html":{}}}],["authorized.'})@apiresponse({status",{"_index":624,"title":{},"body":{"controllers/ProjectController.html":{}}}],["authorized.'})@useguards(jwtauthguard",{"_index":649,"title":{},"body":{"controllers/ProjectController.html":{}}}],["authorship",{"_index":1437,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":229,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["automated",{"_index":1313,"title":{},"body":{"index.html":{}}}],["available",{"_index":1286,"title":{},"body":{"index.html":{},"license.html":{},"modules.html":{}}}],["avoid",{"_index":909,"title":{},"body":{"controllers/TicketController.html":{}}}],["await",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["b",{"_index":1535,"title":{},"body":{"license.html":{}}}],["backup",{"_index":1321,"title":{},"body":{"index.html":{}}}],["bad",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{}}}],["badrequestexception",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{}}}],["based",{"_index":121,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/ProjectController.html":{},"license.html":{}}}],["basic",{"_index":1688,"title":{},"body":{"properties.html":{}}}],["basis",{"_index":1594,"title":{},"body":{"license.html":{}}}],["bcrypt",{"_index":1088,"title":{},"body":{"injectables/UserService.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":1103,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.hash(password",{"_index":1094,"title":{},"body":{"injectables/UserService.html":{}}}],["before",{"_index":1217,"title":{},"body":{"miscellaneous/functions.html":{}}}],["behalf",{"_index":1462,"title":{},"body":{"license.html":{}}}],["behavior",{"_index":1236,"title":{},"body":{"miscellaneous/functions.html":{}}}],["being",{"_index":725,"title":{},"body":{"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"classes/TicketSlugValidationError.html":{},"classes/UpdateProjectDto.html":{}}}],["belongs",{"_index":404,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"miscellaneous/functions.html":{}}}],["below",{"_index":1443,"title":{},"body":{"license.html":{}}}],["beneficial",{"_index":1420,"title":{},"body":{"license.html":{}}}],["between",{"_index":1210,"title":{},"body":{"miscellaneous/functions.html":{}}}],["bind",{"_index":1455,"title":{},"body":{"license.html":{}}}],["body",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["boilerplate",{"_index":1656,"title":{},"body":{"license.html":{}}}],["boolean",{"_index":118,"title":{},"body":{"injectables/AppService.html":{},"classes/Project.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProjectModule.html":{},"modules/TicketModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bootstrapped",{"_index":1180,"title":{},"body":{"miscellaneous/functions.html":{}}}],["bootstraps",{"_index":1170,"title":{},"body":{"miscellaneous/functions.html":{}}}],["both",{"_index":1195,"title":{},"body":{"miscellaneous/functions.html":{}}}],["brackets",{"_index":1658,"title":{},"body":{"license.html":{}}}],["brief",{"_index":330,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/Project.html":{}}}],["browse",{"_index":1679,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1677,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":417,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/UpdateTicketDto.html":{},"index.html":{}}}],["build",{"_index":1284,"title":{},"body":{"index.html":{}}}],["built",{"_index":1243,"title":{},"body":{"index.html":{}}}],["button",{"_index":421,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/UpdateTicketDto.html":{}}}],["button.'})@isstring()@isnotempty",{"_index":386,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["c",{"_index":1541,"title":{},"body":{"license.html":{}}}],["caching",{"_index":1340,"title":{},"body":{"index.html":{}}}],["carry",{"_index":1536,"title":{},"body":{"license.html":{}}}],["catch",{"_index":690,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["cause",{"_index":1409,"title":{},"body":{"license.html":{}}}],["changed",{"_index":1540,"title":{},"body":{"license.html":{}}}],["changes",{"_index":702,"title":{},"body":{"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"injectables/TicketService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["character",{"_index":835,"title":{},"body":{"classes/RegisterUserDto.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["charge",{"_index":1492,"title":{},"body":{"license.html":{}}}],["check",{"_index":441,"title":{},"body":{"controllers/HealthController.html":{},"miscellaneous/functions.html":{}}}],["checking",{"_index":1087,"title":{},"body":{"injectables/UserService.html":{}}}],["checks",{"_index":115,"title":{},"body":{"injectables/AppService.html":{},"controllers/HealthController.html":{},"miscellaneous/functions.html":{}}}],["choose",{"_index":1249,"title":{},"body":{"index.html":{},"license.html":{}}}],["claim",{"_index":1520,"title":{},"body":{"license.html":{}}}],["claims",{"_index":1510,"title":{},"body":{"license.html":{}}}],["class",{"_index":41,"title":{"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"classes/LoginUserDto.html":{},"classes/Project.html":{},"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/Ticket.html":{},"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"classes/TicketSlugValidationError.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"modules/ProjectModule.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"injectables/ProjectService.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/Ticket.html":{},"controllers/TicketController.html":{},"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"modules/TicketModule.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"injectables/TicketService.html":{},"classes/TicketSlugValidationError.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"license.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["classes",{"_index":309,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"classes/LoginUserDto.html":{},"classes/Project.html":{},"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/Ticket.html":{},"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"classes/TicketSlugValidationError.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["clicking",{"_index":385,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/UpdateTicketDto.html":{}}}],["clone",{"_index":1260,"title":{},"body":{"index.html":{}}}],["close",{"_index":1246,"title":{},"body":{"index.html":{}}}],["closed",{"_index":415,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"classes/UpdateTicketDto.html":{}}}],["cluster_appmodule",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":270,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":272,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":271,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":273,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_projectmodule",{"_index":729,"title":{},"body":{"modules/ProjectModule.html":{},"overview.html":{}}}],["cluster_projectmodule_providers",{"_index":730,"title":{},"body":{"modules/ProjectModule.html":{},"overview.html":{}}}],["cluster_ticketmodule",{"_index":931,"title":{},"body":{"modules/TicketModule.html":{},"overview.html":{}}}],["cluster_ticketmodule_providers",{"_index":932,"title":{},"body":{"modules/TicketModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1044,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1045,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":1046,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":1202,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["collections",{"_index":1227,"title":{},"body":{"miscellaneous/functions.html":{}}}],["combination",{"_index":1516,"title":{},"body":{"license.html":{}}}],["combines",{"_index":583,"title":{},"body":{"classes/Project.html":{},"miscellaneous/typealiases.html":{}}}],["comment",{"_index":1662,"title":{},"body":{"license.html":{}}}],["commercial",{"_index":1629,"title":{},"body":{"license.html":{}}}],["common",{"_index":1402,"title":{},"body":{"license.html":{}}}],["communication",{"_index":1466,"title":{},"body":{"license.html":{}}}],["community",{"_index":1268,"title":{},"body":{"index.html":{}}}],["compare",{"_index":1067,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["comparepassword",{"_index":1051,"title":{},"body":{"injectables/UserService.html":{}}}],["comparepassword(password",{"_index":1061,"title":{},"body":{"injectables/UserService.html":{}}}],["compares",{"_index":1064,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["comparing",{"_index":1189,"title":{},"body":{"miscellaneous/functions.html":{}}}],["comparisons",{"_index":1216,"title":{},"body":{"miscellaneous/functions.html":{}}}],["compiled",{"_index":1434,"title":{},"body":{"license.html":{}}}],["completed",{"_index":397,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["completing",{"_index":388,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/UpdateTicketDto.html":{}}}],["compliance",{"_index":1671,"title":{},"body":{"license.html":{}}}],["complies",{"_index":1564,"title":{},"body":{"license.html":{}}}],["compose",{"_index":1283,"title":{},"body":{"index.html":{}}}],["compression",{"_index":1153,"title":{},"body":{"dependencies.html":{}}}],["computer",{"_index":1627,"title":{},"body":{"license.html":{}}}],["conditions",{"_index":1384,"title":{},"body":{"license.html":{}}}],["configmodule",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":96,"title":{},"body":{"injectables/AppService.html":{}}}],["configuration",{"_index":87,"title":{},"body":{"injectables/AppService.html":{},"license.html":{}}}],["conflictexception",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["conflictexception(\"user",{"_index":1093,"title":{},"body":{"injectables/UserService.html":{}}}],["conflicts",{"_index":719,"title":{},"body":{"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"classes/TicketSlugValidationError.html":{}}}],["connection",{"_index":1273,"title":{},"body":{"index.html":{}}}],["consequential",{"_index":1621,"title":{},"body":{"license.html":{}}}],["consistent",{"_index":1641,"title":{},"body":{"license.html":{}}}],["console.warn(`no",{"_index":140,"title":{},"body":{"injectables/AppService.html":{}}}],["conspicuously",{"_index":1477,"title":{},"body":{"license.html":{}}}],["const",{"_index":137,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"classes/Ticket.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["constant",{"_index":601,"title":{},"body":{"classes/Project.html":{},"classes/Ticket.html":{}}}],["constitutes",{"_index":1524,"title":{},"body":{"license.html":{}}}],["constraints",{"_index":324,"title":{},"body":{"classes/CreateProjectDto.html":{}}}],["constructor",{"_index":94,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"classes/ProjectError.html":{},"injectables/ProjectService.html":{},"classes/TicketError.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["constructor(@injectmodel(user.name",{"_index":1090,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(configservice",{"_index":95,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(message",{"_index":716,"title":{},"body":{"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"classes/TicketSlugValidationError.html":{}}}],["constructor(private",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["constructor(projectmodel",{"_index":743,"title":{},"body":{"injectables/ProjectService.html":{}}}],["constructor(ticketmodel",{"_index":937,"title":{},"body":{"injectables/TicketService.html":{}}}],["constructor(usermodel",{"_index":1056,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["construed",{"_index":1561,"title":{},"body":{"license.html":{}}}],["contain",{"_index":343,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/RegisterUserDto.html":{},"miscellaneous/functions.html":{}}}],["contained",{"_index":1549,"title":{},"body":{"license.html":{}}}],["containers",{"_index":1285,"title":{},"body":{"index.html":{}}}],["containing",{"_index":147,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["contains",{"_index":379,"title":{},"body":{"classes/CreateTicketDto.html":{},"miscellaneous/functions.html":{}}}],["content",{"_index":1588,"title":{},"body":{"license.html":{}}}],["contents",{"_index":1188,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["contract",{"_index":1411,"title":{},"body":{"license.html":{}}}],["contributing",{"_index":1368,"title":{},"body":{"index.html":{}}}],["contribution",{"_index":1457,"title":{},"body":{"license.html":{}}}],["contribution(s",{"_index":1514,"title":{},"body":{"license.html":{}}}],["contributions",{"_index":1369,"title":{},"body":{"index.html":{},"license.html":{}}}],["contributor",{"_index":1481,"title":{},"body":{"license.html":{}}}],["contributory",{"_index":1525,"title":{},"body":{"license.html":{}}}],["control",{"_index":1400,"title":{},"body":{"license.html":{}}}],["controlled",{"_index":1401,"title":{},"body":{"license.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/ProjectController.html":{},"controllers/TicketController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/ProjectController.html":{},"controllers/TicketController.html":{},"coverage.html":{}}}],["controller(\"/api/v1",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller(\"/api/v1/projects",{"_index":679,"title":{},"body":{"controllers/ProjectController.html":{}}}],["controller(\"/api/v1/tickets",{"_index":904,"title":{},"body":{"controllers/TicketController.html":{}}}],["controller(\"health",{"_index":462,"title":{},"body":{"controllers/HealthController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/ProjectController.html":{},"modules/ProjectModule.html":{},"controllers/TicketController.html":{},"modules/TicketModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["conversions",{"_index":1435,"title":{},"body":{"license.html":{}}}],["copies",{"_index":1531,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1275,"title":{},"body":{"index.html":{},"license.html":{}}}],["copyright",{"_index":1393,"title":{},"body":{"license.html":{}}}],["correct",{"_index":322,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["counterclaim",{"_index":1521,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":1115,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":320,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/User.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["create(createprojectdto",{"_index":618,"title":{},"body":{"controllers/ProjectController.html":{},"injectables/ProjectService.html":{}}}],["create(createticketdto",{"_index":879,"title":{},"body":{"controllers/TicketController.html":{},"injectables/TicketService.html":{}}}],["created",{"_index":560,"title":{},"body":{"classes/Project.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"classes/Ticket.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["createdby",{"_index":553,"title":{},"body":{"classes/Project.html":{},"injectables/ProjectService.html":{},"classes/Ticket.html":{},"injectables/TicketService.html":{}}}],["createdproject",{"_index":699,"title":{},"body":{"controllers/ProjectController.html":{},"injectables/ProjectService.html":{}}}],["createdticket",{"_index":915,"title":{},"body":{"controllers/TicketController.html":{},"injectables/TicketService.html":{}}}],["createprojectdto",{"_index":308,"title":{"classes/CreateProjectDto.html":{}},"body":{"classes/CreateProjectDto.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"classes/UpdateProjectDto.html":{},"coverage.html":{}}}],["createprojectdto})@apiresponse({status",{"_index":621,"title":{},"body":{"controllers/ProjectController.html":{}}}],["creates",{"_index":98,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"controllers/ProjectController.html":{},"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"injectables/ProjectService.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"controllers/TicketController.html":{},"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"injectables/TicketService.html":{},"classes/TicketSlugValidationError.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["createticketdto",{"_index":359,"title":{"classes/CreateTicketDto.html":{}},"body":{"classes/CreateTicketDto.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"classes/UpdateTicketDto.html":{},"coverage.html":{}}}],["createticketdto.projectid",{"_index":958,"title":{},"body":{"injectables/TicketService.html":{}}}],["creating",{"_index":313,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"injectables/TicketService.html":{}}}],["creation",{"_index":736,"title":{},"body":{"injectables/ProjectService.html":{},"classes/UpdateProjectDto.html":{}}}],["creator",{"_index":751,"title":{},"body":{"injectables/ProjectService.html":{}}}],["credentials",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/Ticket.html":{},"injectables/UserService.html":{}}}],["credentials.'})@apiresponse({status",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["criteria",{"_index":374,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["cross",{"_index":1519,"title":{},"body":{"license.html":{}}}],["crud",{"_index":739,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/TicketController.html":{}}}],["current",{"_index":407,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["custom",{"_index":544,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/ProjectError.html":{},"classes/TicketError.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["customary",{"_index":1584,"title":{},"body":{"license.html":{}}}],["customization",{"_index":1353,"title":{},"body":{"index.html":{}}}],["customize",{"_index":1235,"title":{},"body":{"miscellaneous/functions.html":{}}}],["d",{"_index":1547,"title":{},"body":{"license.html":{}}}],["damages",{"_index":1619,"title":{},"body":{"license.html":{}}}],["data",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"classes/LoginUserDto.html":{},"controllers/ProjectController.html":{},"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"injectables/ProjectService.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"classes/RegisterUserDto.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["database",{"_index":509,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/Project.html":{},"classes/Ticket.html":{},"classes/User.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["date",{"_index":370,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"classes/UpdateTicketDto.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["db",{"_index":794,"title":{},"body":{"injectables/ProjectService.html":{}}}],["declarations",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProjectModule.html":{},"modules/TicketModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorator",{"_index":545,"title":{},"body":{"classes/LoginUserDto.html":{},"miscellaneous/functions.html":{}}}],["decorators",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"controllers/HealthController.html":{},"classes/LoginUserDto.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"classes/RegisterUserDto.html":{},"classes/Ticket.html":{},"controllers/TicketController.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["decorators/hasusernameoremail.decorator",{"_index":540,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["deep",{"_index":1185,"title":{},"body":{"miscellaneous/functions.html":{}}}],["deepequalarrays",{"_index":1136,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["deepequalarrays(arr1",{"_index":1181,"title":{},"body":{"miscellaneous/functions.html":{}}}],["default",{"_index":133,"title":{},"body":{"injectables/AppService.html":{},"classes/Project.html":{},"classes/Ticket.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":111,"title":{},"body":{"injectables/AppService.html":{},"classes/User.html":{}}}],["defend",{"_index":1647,"title":{},"body":{"license.html":{}}}],["defined",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"classes/ProjectError.html":{},"injectables/ProjectService.html":{},"classes/RegisterUserDto.html":{},"classes/Ticket.html":{},"controllers/TicketController.html":{},"classes/TicketError.html":{},"injectables/TicketService.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"license.html":{}}}],["defines",{"_index":315,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"classes/Project.html":{},"classes/Ticket.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/User.html":{}}}],["definition",{"_index":1404,"title":{},"body":{"license.html":{}}}],["definitions",{"_index":1387,"title":{},"body":{"license.html":{}}}],["delete",{"_index":615,"title":{},"body":{"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"index.html":{}}}],["delete(\":id",{"_index":710,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["delete(':id')@apioperation({summary",{"_index":632,"title":{},"body":{"controllers/ProjectController.html":{}}}],["delete(':id')@useguards(jwtauthguard",{"_index":882,"title":{},"body":{"controllers/TicketController.html":{}}}],["delete(@param(\"id",{"_index":712,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["delete(id",{"_index":631,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["delete(projectid",{"_index":749,"title":{},"body":{"injectables/ProjectService.html":{}}}],["delete(ticketid",{"_index":941,"title":{},"body":{"injectables/TicketService.html":{}}}],["deleted",{"_index":711,"title":{},"body":{"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"injectables/TicketService.html":{}}}],["deleted.'})@apiresponse({status",{"_index":637,"title":{},"body":{"controllers/ProjectController.html":{}}}],["deletes",{"_index":641,"title":{},"body":{"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{}}}],["deleting",{"_index":607,"title":{},"body":{"controllers/ProjectController.html":{},"injectables/TicketService.html":{}}}],["deletion",{"_index":737,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TicketService.html":{}}}],["deliberate",{"_index":1614,"title":{},"body":{"license.html":{}}}],["dependencies",{"_index":51,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProjectModule.html":{},"modules/TicketModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deployment",{"_index":1356,"title":{},"body":{"index.html":{}}}],["derivative",{"_index":1444,"title":{},"body":{"license.html":{}}}],["derived",{"_index":1446,"title":{},"body":{"license.html":{}}}],["describing",{"_index":1585,"title":{},"body":{"license.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"interfaces/ExpressRequestWithUser.html":{},"interfaces/ExpressRequestWithUser-1.html":{},"interfaces/ExpressRequestWithUser-2.html":{},"controllers/HealthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"injectables/ProjectService.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/Ticket.html":{},"controllers/TicketController.html":{},"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"injectables/TicketService.html":{},"classes/TicketSlugValidationError.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"license.html":{},"properties.html":{}}}],["designated",{"_index":1479,"title":{},"body":{"license.html":{}}}],["desired",{"_index":1274,"title":{},"body":{"index.html":{}}}],["desk",{"_index":39,"title":{},"body":{"controllers/AppController.html":{}}}],["detailed",{"_index":382,"title":{},"body":{"classes/CreateTicketDto.html":{},"index.html":{}}}],["details",{"_index":629,"title":{},"body":{"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["details.'})@apibody({description",{"_index":620,"title":{},"body":{"controllers/ProjectController.html":{}}}],["detected",{"_index":762,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TicketService.html":{}}}],["determine",{"_index":1213,"title":{},"body":{"miscellaneous/functions.html":{}}}],["determines",{"_index":1034,"title":{},"body":{"classes/User.html":{}}}],["determining",{"_index":1603,"title":{},"body":{"license.html":{}}}],["dev",{"_index":1358,"title":{},"body":{"index.html":{}}}],["developer",{"_index":1367,"title":{},"body":{"index.html":{}}}],["developers",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["development",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"miscellaneous/functions.html":{}}}],["devinstructions",{"_index":93,"title":{},"body":{"injectables/AppService.html":{}}}],["differences",{"_index":1214,"title":{},"body":{"miscellaneous/functions.html":{}}}],["different",{"_index":1366,"title":{},"body":{"index.html":{},"license.html":{}}}],["direct",{"_index":1407,"title":{},"body":{"license.html":{}}}],["direction",{"_index":1410,"title":{},"body":{"license.html":{}}}],["directly",{"_index":530,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["disclaimer",{"_index":1589,"title":{},"body":{"license.html":{}}}],["discussing",{"_index":1475,"title":{},"body":{"license.html":{}}}],["disk",{"_index":450,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":457,"title":{},"body":{"controllers/HealthController.html":{}}}],["display",{"_index":826,"title":{},"body":{"classes/RegisterUserDto.html":{},"license.html":{}}}],["distribute",{"_index":1501,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":1551,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":1386,"title":{},"body":{"license.html":{}}}],["docker",{"_index":1252,"title":{},"body":{"index.html":{}}}],["document",{"_index":578,"title":{},"body":{"classes/Project.html":{},"classes/User.html":{},"injectables/UserService.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["documentation",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["documents",{"_index":1021,"title":{},"body":{"classes/User.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["doe",{"_index":853,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["doe'})@isstring()@isnotempty",{"_index":828,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["doesn't",{"_index":797,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TicketService.html":{},"miscellaneous/functions.html":{}}}],["domain",{"_index":906,"title":{},"body":{"controllers/TicketController.html":{},"miscellaneous/functions.html":{}}}],["don't",{"_index":1661,"title":{},"body":{"license.html":{}}}],["download",{"_index":1267,"title":{},"body":{"index.html":{}}}],["dto",{"_index":312,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{}}}],["dto/create",{"_index":668,"title":{},"body":{"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{}}}],["dto/login",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/register",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/update",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{}}}],["due",{"_index":369,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"classes/UpdateTicketDto.html":{}}}],["duedate",{"_index":375,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"classes/UpdateTicketDto.html":{}}}],["during",{"_index":704,"title":{},"body":{"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"classes/RegisterUserDto.html":{},"injectables/TicketService.html":{},"classes/UpdateProjectDto.html":{}}}],["e.g",{"_index":1200,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["each",{"_index":325,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["easier",{"_index":1666,"title":{},"body":{"license.html":{}}}],["editorial",{"_index":1447,"title":{},"body":{"license.html":{}}}],["effects",{"_index":912,"title":{},"body":{"controllers/TicketController.html":{}}}],["elaborations",{"_index":1450,"title":{},"body":{"license.html":{}}}],["electronic",{"_index":1463,"title":{},"body":{"license.html":{}}}],["element",{"_index":1190,"title":{},"body":{"miscellaneous/functions.html":{}}}],["email",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["empty",{"_index":335,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["enable",{"_index":1330,"title":{},"body":{"index.html":{}}}],["enabling",{"_index":1244,"title":{},"body":{"index.html":{}}}],["enclosed",{"_index":1657,"title":{},"body":{"license.html":{}}}],["end",{"_index":1653,"title":{},"body":{"license.html":{}}}],["endpoint",{"_index":1298,"title":{},"body":{"index.html":{}}}],["endpoints",{"_index":442,"title":{},"body":{"controllers/HealthController.html":{},"controllers/ProjectController.html":{},"index.html":{}}}],["enjoy",{"_index":157,"title":{},"body":{"injectables/AppService.html":{}}}],["ensure",{"_index":321,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateTicketDto.html":{},"miscellaneous/functions.html":{}}}],["ensuring",{"_index":740,"title":{},"body":{"injectables/ProjectService.html":{}}}],["entities",{"_index":1399,"title":{},"body":{"license.html":{}}}],["entity",{"_index":1394,"title":{},"body":{"license.html":{}}}],["enum",{"_index":859,"title":{},"body":{"classes/Ticket.html":{},"classes/UpdateTicketDto.html":{},"classes/User.html":{}}}],["env",{"_index":1271,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":1270,"title":{},"body":{"index.html":{}}}],["environment",{"_index":88,"title":{},"body":{"injectables/AppService.html":{},"miscellaneous/functions.html":{}}}],["environments",{"_index":1357,"title":{},"body":{"index.html":{}}}],["equal",{"_index":1196,"title":{},"body":{"miscellaneous/functions.html":{}}}],["equality",{"_index":1186,"title":{},"body":{"miscellaneous/functions.html":{}}}],["error",{"_index":691,"title":{},"body":{"controllers/ProjectController.html":{},"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"injectables/ProjectService.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"controllers/TicketController.html":{},"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"injectables/TicketService.html":{},"classes/TicketSlugValidationError.html":{},"miscellaneous/functions.html":{}}}],["errors",{"_index":721,"title":{},"body":{"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"controllers/TicketController.html":{},"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"classes/TicketSlugValidationError.html":{},"miscellaneous/functions.html":{}}}],["etc",{"_index":416,"title":{},"body":{"classes/CreateTicketDto.html":{},"index.html":{}}}],["even",{"_index":1631,"title":{},"body":{"license.html":{}}}],["event",{"_index":1610,"title":{},"body":{"license.html":{}}}],["example",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"classes/LoginUserDto.html":{},"classes/Project.html":{},"classes/RegisterUserDto.html":{},"classes/Ticket.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"license.html":{}}}],["example:example",{"_index":1278,"title":{},"body":{"index.html":{}}}],["examples",{"_index":1335,"title":{},"body":{"index.html":{}}}],["except",{"_index":1503,"title":{},"body":{"license.html":{}}}],["exceptions",{"_index":1199,"title":{},"body":{"miscellaneous/functions.html":{}}}],["excluding",{"_index":1082,"title":{},"body":{"injectables/UserService.html":{},"license.html":{}}}],["exclusive",{"_index":1491,"title":{},"body":{"license.html":{}}}],["exec",{"_index":787,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["executed",{"_index":1576,"title":{},"body":{"license.html":{}}}],["exercise",{"_index":1608,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":1422,"title":{},"body":{"license.html":{}}}],["exist",{"_index":789,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TicketService.html":{}}}],["existing",{"_index":664,"title":{},"body":{"controllers/ProjectController.html":{},"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"controllers/TicketController.html":{},"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"injectables/TicketService.html":{},"classes/TicketSlugValidationError.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"index.html":{}}}],["existingproject",{"_index":771,"title":{},"body":{"injectables/ProjectService.html":{}}}],["existingproject.name",{"_index":774,"title":{},"body":{"injectables/ProjectService.html":{}}}],["existinguser",{"_index":1091,"title":{},"body":{"injectables/UserService.html":{}}}],["exists",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"injectables/UserService.html":{}}}],["exists.'})@apiresponse({status",{"_index":625,"title":{},"body":{"controllers/ProjectController.html":{}}}],["experience",{"_index":159,"title":{},"body":{"injectables/AppService.html":{}}}],["expiresin",{"_index":284,"title":{},"body":{"modules/AuthModule.html":{}}}],["explicitly",{"_index":1567,"title":{},"body":{"license.html":{}}}],["export",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"interfaces/ExpressRequestWithUser.html":{},"interfaces/ExpressRequestWithUser-1.html":{},"interfaces/ExpressRequestWithUser-2.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"modules/ProjectModule.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"injectables/ProjectService.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/Ticket.html":{},"controllers/TicketController.html":{},"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"modules/TicketModule.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"injectables/TicketService.html":{},"classes/TicketSlugValidationError.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProjectModule.html":{},"modules/TicketModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":429,"title":{},"body":{"interfaces/ExpressRequestWithUser.html":{},"interfaces/ExpressRequestWithUser-1.html":{},"interfaces/ExpressRequestWithUser-2.html":{},"dependencies.html":{},"license.html":{}}}],["expressrequestwithuser",{"_index":216,"title":{"interfaces/ExpressRequestWithUser.html":{},"interfaces/ExpressRequestWithUser-1.html":{},"interfaces/ExpressRequestWithUser-2.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/ExpressRequestWithUser.html":{},"interfaces/ExpressRequestWithUser-1.html":{},"interfaces/ExpressRequestWithUser-2.html":{},"controllers/ProjectController.html":{},"controllers/TicketController.html":{},"coverage.html":{}}}],["extends",{"_index":428,"title":{},"body":{"interfaces/ExpressRequestWithUser.html":{},"interfaces/ExpressRequestWithUser-1.html":{},"interfaces/ExpressRequestWithUser-2.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Project.html":{},"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"classes/TicketSlugValidationError.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{}}}],["extractjwt",{"_index":514,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":517,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extracts",{"_index":501,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["failed",{"_index":695,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["failed.'})@useguards(jwtauthguard",{"_index":627,"title":{},"body":{"controllers/ProjectController.html":{}}}],["fails",{"_index":681,"title":{},"body":{"controllers/ProjectController.html":{},"injectables/ProjectService.html":{}}}],["failure",{"_index":612,"title":{},"body":{"controllers/ProjectController.html":{},"license.html":{}}}],["false",{"_index":144,"title":{},"body":{"injectables/AppService.html":{},"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateProjectDto.html":{},"miscellaneous/functions.html":{}}}],["false})@isarray()@isoptional()@ismongoid({each",{"_index":377,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["false})@isoptional",{"_index":394,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["false})@isoptional()@isarray",{"_index":341,"title":{},"body":{"classes/CreateProjectDto.html":{}}}],["false})@isstring()@isoptional",{"_index":399,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["feature",{"_index":1363,"title":{},"body":{"index.html":{}}}],["fee",{"_index":1635,"title":{},"body":{"license.html":{}}}],["fetch",{"_index":645,"title":{},"body":{"controllers/ProjectController.html":{}}}],["field",{"_index":326,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/functions.html":{}}}],["fields",{"_index":659,"title":{},"body":{"controllers/ProjectController.html":{},"classes/UpdateTicketDto.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["fifty",{"_index":1414,"title":{},"body":{"license.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"interfaces/ExpressRequestWithUser.html":{},"interfaces/ExpressRequestWithUser-1.html":{},"interfaces/ExpressRequestWithUser-2.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"modules/ProjectModule.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"injectables/ProjectService.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/Ticket.html":{},"controllers/TicketController.html":{},"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"modules/TicketModule.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"injectables/TicketService.html":{},"classes/TicketSlugValidationError.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{},"license.html":{}}}],["filed",{"_index":1529,"title":{},"body":{"license.html":{}}}],["files",{"_index":1429,"title":{},"body":{"license.html":{}}}],["filter",{"_index":1328,"title":{},"body":{"index.html":{}}}],["final",{"_index":988,"title":{},"body":{"classes/UpdateProjectDto.html":{}}}],["finalport",{"_index":139,"title":{},"body":{"injectables/AppService.html":{}}}],["find",{"_index":780,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["findall",{"_index":616,"title":{},"body":{"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{}}}],["findall(@request",{"_index":683,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["findall(req",{"_index":642,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["findall(userid",{"_index":754,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TicketService.html":{}}}],["findbyid",{"_index":1052,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid(userid",{"_index":1071,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyidandupdate",{"_index":814,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TicketService.html":{}}}],["findbyusername",{"_index":1053,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyusername(username",{"_index":1074,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyusernameoremail",{"_index":1054,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyusernameoremail(identifier",{"_index":1076,"title":{},"body":{"injectables/UserService.html":{}}}],["findone",{"_index":617,"title":{},"body":{"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{}}}],["findone(@param(\"id",{"_index":696,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["findone(id",{"_index":651,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["findone(projectid",{"_index":756,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TicketService.html":{}}}],["finds",{"_index":1073,"title":{},"body":{"injectables/UserService.html":{}}}],["first",{"_index":1193,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fitness",{"_index":1600,"title":{},"body":{"license.html":{}}}],["fix",{"_index":865,"title":{},"body":{"classes/Ticket.html":{}}}],["flag",{"_index":565,"title":{},"body":{"classes/Project.html":{}}}],["following",{"_index":1265,"title":{},"body":{"index.html":{},"license.html":{}}}],["forbiddenexception",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{}}}],["form",{"_index":1424,"title":{},"body":{"license.html":{}}}],["format",{"_index":389,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/RegisterUserDto.html":{},"license.html":{}}}],["forwardref",{"_index":581,"title":{},"body":{"classes/Project.html":{}}}],["found",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["found.'})@apiresponse({status",{"_index":639,"title":{},"body":{"controllers/ProjectController.html":{}}}],["found.'})@useguards(jwtauthguard",{"_index":662,"title":{},"body":{"controllers/ProjectController.html":{}}}],["free",{"_index":1494,"title":{},"body":{"license.html":{}}}],["frontend",{"_index":1315,"title":{},"body":{"index.html":{}}}],["function",{"_index":1122,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["functionality",{"_index":1329,"title":{},"body":{"index.html":{}}}],["functions",{"_index":1164,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["future",{"_index":1300,"title":{},"body":{"index.html":{}}}],["generated",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{},"license.html":{}}}],["generates",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["generating",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["generation",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["generic",{"_index":1204,"title":{},"body":{"miscellaneous/functions.html":{}}}],["get(\":id",{"_index":694,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["get(':id')@apioperation({summary",{"_index":652,"title":{},"body":{"controllers/ProjectController.html":{}}}],["get(':id')@useguards(jwtauthguard",{"_index":886,"title":{},"body":{"controllers/TicketController.html":{}}}],["get()@apioperation({summary",{"_index":643,"title":{},"body":{"controllers/ProjectController.html":{}}}],["get()@healthcheck",{"_index":443,"title":{},"body":{"controllers/HealthController.html":{}}}],["get()@useguards(jwtauthguard",{"_index":884,"title":{},"body":{"controllers/TicketController.html":{}}}],["getdevinstructions",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getisdev",{"_index":113,"title":{},"body":{"injectables/AppService.html":{}}}],["getport",{"_index":106,"title":{},"body":{"injectables/AppService.html":{}}}],["gets",{"_index":108,"title":{},"body":{"injectables/AppService.html":{}}}],["getting",{"_index":1240,"title":{"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["github",{"_index":1346,"title":{},"body":{"index.html":{}}}],["give",{"_index":1533,"title":{},"body":{"license.html":{}}}],["given",{"_index":946,"title":{},"body":{"injectables/TicketService.html":{},"miscellaneous/functions.html":{}}}],["gives",{"_index":1291,"title":{},"body":{"index.html":{}}}],["global",{"_index":1176,"title":{},"body":{"miscellaneous/functions.html":{}}}],["goodwill",{"_index":1625,"title":{},"body":{"license.html":{}}}],["governing",{"_index":1675,"title":{},"body":{"license.html":{}}}],["grant",{"_index":1485,"title":{},"body":{"license.html":{}}}],["granted",{"_index":1423,"title":{},"body":{"license.html":{}}}],["granting",{"_index":1395,"title":{},"body":{"license.html":{}}}],["grants",{"_index":1488,"title":{},"body":{"license.html":{}}}],["graph",{"_index":1680,"title":{},"body":{"modules.html":{}}}],["grigoropoulos",{"_index":1670,"title":{},"body":{"license.html":{},"properties.html":{}}}],["grossly",{"_index":1615,"title":{},"body":{"license.html":{}}}],["guard",{"_index":486,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["guides",{"_index":1334,"title":{},"body":{"index.html":{}}}],["handle",{"_index":1206,"title":{},"body":{"miscellaneous/functions.html":{}}}],["handledomainerrors",{"_index":676,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["handledomainerrors(error",{"_index":692,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{},"miscellaneous/functions.html":{}}}],["handles",{"_index":905,"title":{},"body":{"controllers/TicketController.html":{},"miscellaneous/functions.html":{}}}],["handling",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"controllers/TicketController.html":{}}}],["harmless",{"_index":1649,"title":{},"body":{"license.html":{}}}],["haschanges",{"_index":767,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TicketService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["haschanges(original",{"_index":1208,"title":{},"body":{"miscellaneous/functions.html":{}}}],["haschanges(project",{"_index":807,"title":{},"body":{"injectables/ProjectService.html":{}}}],["haschanges(ticket",{"_index":972,"title":{},"body":{"injectables/TicketService.html":{}}}],["hashed",{"_index":1032,"title":{},"body":{"classes/User.html":{},"injectables/UserService.html":{}}}],["hashedpassword",{"_index":1062,"title":{},"body":{"injectables/UserService.html":{}}}],["hasusernameoremail",{"_index":539,"title":{},"body":{"classes/LoginUserDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["hasusernameoremail(validationoptions",{"_index":1229,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hasusernameoremail({message",{"_index":526,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["header",{"_index":503,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["headless",{"_index":1241,"title":{},"body":{"index.html":{},"properties.html":{}}}],["health",{"_index":440,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["health.controller",{"_index":483,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":454,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckresult",{"_index":459,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":452,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":438,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthindicatorresult",{"_index":458,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthmodule",{"_index":61,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["heath",{"_index":1297,"title":{},"body":{"index.html":{}}}],["help",{"_index":1690,"title":{},"body":{"properties.html":{}}}],["here",{"_index":155,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["hereby",{"_index":1487,"title":{},"body":{"license.html":{}}}],["herein",{"_index":1572,"title":{},"body":{"license.html":{}}}],["hexadecimal",{"_index":1224,"title":{},"body":{"miscellaneous/functions.html":{}}}],["high",{"_index":398,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"classes/UpdateTicketDto.html":{}}}],["higher",{"_index":1256,"title":{},"body":{"index.html":{}}}],["hold",{"_index":1648,"title":{},"body":{"license.html":{}}}],["http",{"_index":448,"title":{},"body":{"controllers/HealthController.html":{},"controllers/TicketController.html":{},"miscellaneous/functions.html":{}}}],["http://localhost:3000",{"_index":1287,"title":{},"body":{"index.html":{}}}],["http://www.apache.org/licenses",{"_index":1382,"title":{},"body":{"license.html":{}}}],["http://www.apache.org/licenses/license",{"_index":1673,"title":{},"body":{"license.html":{}}}],["httpexception",{"_index":1201,"title":{},"body":{"miscellaneous/functions.html":{}}}],["httphealthindicator",{"_index":453,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpmodule",{"_index":481,"title":{},"body":{"modules/HealthModule.html":{}}}],["https://betterstack.com/better",{"_index":466,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpstatus",{"_index":897,"title":{},"body":{"controllers/TicketController.html":{}}}],["httpstatus.created",{"_index":918,"title":{},"body":{"controllers/TicketController.html":{}}}],["hub",{"_index":1350,"title":{},"body":{"index.html":{}}}],["hydrated",{"_index":1042,"title":{},"body":{"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["hydrateddocument",{"_index":1037,"title":{},"body":{"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["i18n",{"_index":1345,"title":{},"body":{"index.html":{}}}],["id",{"_index":367,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"injectables/ProjectService.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"classes/Ticket.html":{},"controllers/TicketController.html":{},"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"injectables/TicketService.html":{},"classes/TicketSlugValidationError.html":{},"classes/UpdateProjectDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["id'})@apiparam({name",{"_index":890,"title":{},"body":{"controllers/TicketController.html":{}}}],["id.'})@apiparam({name",{"_index":634,"title":{},"body":{"controllers/ProjectController.html":{}}}],["identical",{"_index":1187,"title":{},"body":{"miscellaneous/functions.html":{}}}],["identification",{"_index":1667,"title":{},"body":{"license.html":{}}}],["identifier",{"_index":1078,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["identifiers",{"_index":1226,"title":{},"body":{"miscellaneous/functions.html":{}}}],["identifying",{"_index":1660,"title":{},"body":{"license.html":{}}}],["ids",{"_index":380,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Project.html":{},"classes/Ticket.html":{},"classes/UpdateProjectDto.html":{}}}],["ignoreexpiration",{"_index":518,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ii",{"_index":1412,"title":{},"body":{"license.html":{}}}],["iii",{"_index":1419,"title":{},"body":{"license.html":{}}}],["image",{"_index":1349,"title":{},"body":{"index.html":{}}}],["implement",{"_index":1320,"title":{},"body":{"index.html":{}}}],["implied",{"_index":1597,"title":{},"body":{"license.html":{}}}],["import",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"interfaces/ExpressRequestWithUser.html":{},"interfaces/ExpressRequestWithUser-1.html":{},"interfaces/ExpressRequestWithUser-2.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"modules/ProjectModule.html":{},"injectables/ProjectService.html":{},"classes/RegisterUserDto.html":{},"classes/Ticket.html":{},"controllers/TicketController.html":{},"modules/TicketModule.html":{},"injectables/TicketService.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"license.html":{}}}],["imports",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HealthModule.html":{},"modules/ProjectModule.html":{},"modules/TicketModule.html":{},"modules/UserModule.html":{}}}],["improve",{"_index":1333,"title":{},"body":{"index.html":{}}}],["improvements",{"_index":1301,"title":{},"body":{"index.html":{}}}],["improving",{"_index":1476,"title":{},"body":{"license.html":{}}}],["inability",{"_index":1623,"title":{},"body":{"license.html":{}}}],["inactive",{"_index":1026,"title":{},"body":{"classes/User.html":{}}}],["incidental",{"_index":1620,"title":{},"body":{"license.html":{}}}],["include",{"_index":413,"title":{},"body":{"classes/CreateTicketDto.html":{},"interfaces/ExpressRequestWithUser.html":{},"interfaces/ExpressRequestWithUser-1.html":{},"interfaces/ExpressRequestWithUser-2.html":{},"license.html":{}}}],["included",{"_index":1440,"title":{},"body":{"license.html":{}}}],["includes",{"_index":122,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"injectables/ProjectService.html":{},"classes/UpdateTicketDto.html":{},"license.html":{}}}],["including",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"classes/User.html":{},"injectables/UserService.html":{},"license.html":{}}}],["inclusion",{"_index":1461,"title":{},"body":{"license.html":{}}}],["incorporated",{"_index":1484,"title":{},"body":{"license.html":{}}}],["incurred",{"_index":1650,"title":{},"body":{"license.html":{}}}],["indemnify",{"_index":1646,"title":{},"body":{"license.html":{}}}],["indemnity",{"_index":1637,"title":{},"body":{"license.html":{}}}],["index",{"_index":14,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"interfaces/ExpressRequestWithUser.html":{},"interfaces/ExpressRequestWithUser-1.html":{},"interfaces/ExpressRequestWithUser-2.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"classes/RegisterUserDto.html":{},"classes/Ticket.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicate",{"_index":584,"title":{},"body":{"classes/Project.html":{}}}],["indicated",{"_index":1438,"title":{},"body":{"license.html":{}}}],["indicates",{"_index":566,"title":{},"body":{"classes/Project.html":{},"controllers/ProjectController.html":{},"controllers/TicketController.html":{},"classes/User.html":{}}}],["indicating",{"_index":401,"title":{},"body":{"classes/CreateTicketDto.html":{},"injectables/UserService.html":{}}}],["indicator",{"_index":463,"title":{},"body":{"controllers/HealthController.html":{}}}],["indirect",{"_index":1408,"title":{},"body":{"license.html":{}}}],["individual",{"_index":1421,"title":{},"body":{"license.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"interfaces/ExpressRequestWithUser.html":{},"interfaces/ExpressRequestWithUser-1.html":{},"interfaces/ExpressRequestWithUser-2.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"modules/ProjectModule.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"injectables/ProjectService.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/Ticket.html":{},"controllers/TicketController.html":{},"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"modules/TicketModule.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"injectables/TicketService.html":{},"classes/TicketSlugValidationError.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["information",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"interfaces/ExpressRequestWithUser.html":{},"interfaces/ExpressRequestWithUser-1.html":{},"interfaces/ExpressRequestWithUser-2.html":{},"injectables/JwtStrategy.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"index.html":{},"license.html":{}}}],["informational",{"_index":1557,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":1513,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":1526,"title":{},"body":{"license.html":{}}}],["inherits",{"_index":986,"title":{},"body":{"classes/UpdateProjectDto.html":{}}}],["initializes",{"_index":1169,"title":{},"body":{"miscellaneous/functions.html":{}}}],["inject",{"_index":955,"title":{},"body":{"injectables/TicketService.html":{}}}],["injectable",{"_index":82,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ProjectService.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ProjectService.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":83,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ProjectService.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectmodel",{"_index":763,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["injectmodel(project.name",{"_index":769,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TicketService.html":{}}}],["injectmodel(ticket.name",{"_index":954,"title":{},"body":{"injectables/TicketService.html":{}}}],["input",{"_index":371,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["install",{"_index":1263,"title":{},"body":{"index.html":{}}}],["installed",{"_index":1259,"title":{},"body":{"index.html":{}}}],["instance",{"_index":99,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"classes/TicketSlugValidationError.html":{},"injectables/UserService.html":{},"index.html":{}}}],["institute",{"_index":1517,"title":{},"body":{"license.html":{}}}],["instructions",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"index.html":{}}}],["insufficient",{"_index":723,"title":{},"body":{"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"classes/TicketSlugValidationError.html":{}}}],["intentionally",{"_index":1459,"title":{},"body":{"license.html":{}}}],["interact",{"_index":600,"title":{},"body":{"classes/Project.html":{},"classes/Ticket.html":{},"miscellaneous/variables.html":{}}}],["interaction",{"_index":1059,"title":{},"body":{"injectables/UserService.html":{}}}],["interface",{"_index":425,"title":{"interfaces/ExpressRequestWithUser.html":{},"interfaces/ExpressRequestWithUser-1.html":{},"interfaces/ExpressRequestWithUser-2.html":{}},"body":{"interfaces/ExpressRequestWithUser.html":{},"interfaces/ExpressRequestWithUser-1.html":{},"interfaces/ExpressRequestWithUser-2.html":{},"coverage.html":{},"index.html":{}}}],["interfaces",{"_index":426,"title":{},"body":{"interfaces/ExpressRequestWithUser.html":{},"interfaces/ExpressRequestWithUser-1.html":{},"interfaces/ExpressRequestWithUser-2.html":{},"license.html":{},"overview.html":{}}}],["interfaces/project.interface",{"_index":675,"title":{},"body":{"controllers/ProjectController.html":{}}}],["interfaces/ticket.interface",{"_index":901,"title":{},"body":{"controllers/TicketController.html":{}}}],["interfaces/user.interface",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{}}}],["internal",{"_index":528,"title":{},"body":{"classes/LoginUserDto.html":{},"miscellaneous/functions.html":{}}}],["introduce",{"_index":1312,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ProjectController.html":{},"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"injectables/ProjectService.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["irrevocable",{"_index":1495,"title":{},"body":{"license.html":{}}}],["isactive",{"_index":554,"title":{},"body":{"classes/Project.html":{},"classes/User.html":{}}}],["isarray",{"_index":354,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{}}}],["isdate",{"_index":1017,"title":{},"body":{"classes/UpdateTicketDto.html":{}}}],["isdev",{"_index":92,"title":{},"body":{"injectables/AppService.html":{}}}],["isemail",{"_index":846,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["ismongodbidvalid",{"_index":768,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TicketService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["ismongodbidvalid(createticketdto.projectid",{"_index":956,"title":{},"body":{"injectables/TicketService.html":{}}}],["ismongodbidvalid(id",{"_index":1219,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ismongodbidvalid(projectid",{"_index":790,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TicketService.html":{}}}],["ismongodbidvalid(ticketid",{"_index":968,"title":{},"body":{"injectables/TicketService.html":{}}}],["ismongoid",{"_index":420,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{}}}],["isnotempty",{"_index":352,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional",{"_index":353,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{}}}],["isoptional()@isarray()@ismongoid({each",{"_index":997,"title":{},"body":{"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{}}}],["isoptional()@isdate()@type(undefined)@apiproperty({description",{"_index":1011,"title":{},"body":{"classes/UpdateTicketDto.html":{}}}],["isoptional()@ismongoid",{"_index":993,"title":{},"body":{"classes/UpdateProjectDto.html":{}}}],["isoptional()@isstring()@apiproperty({description",{"_index":1009,"title":{},"body":{"classes/UpdateTicketDto.html":{}}}],["isstring",{"_index":351,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{}}}],["issue",{"_index":866,"title":{},"body":{"classes/Ticket.html":{},"index.html":{},"license.html":{}}}],["january",{"_index":1380,"title":{},"body":{"license.html":{}}}],["jest",{"_index":1304,"title":{},"body":{"index.html":{}}}],["john",{"_index":827,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["john_doe",{"_index":541,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["john_doe'})@isstring()@isnotempty",{"_index":844,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["john_doe'})@isstring()@isoptional",{"_index":537,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["john_doe@example.com",{"_index":542,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["john_doe@example.com'})@isemail()@isnotempty",{"_index":823,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["john_doe@example.com'})@isstring()@isoptional",{"_index":533,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["json",{"_index":499,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwt",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/ProjectController.html":{},"dependencies.html":{},"index.html":{}}}],["jwt.strategy",{"_index":278,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt.token.here",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{}}}],["jwt_secret=\"42",{"_index":1282,"title":{},"body":{"index.html":{}}}],["jwtauthguard",{"_index":237,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/ProjectController.html":{},"controllers/TicketController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":516,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":276,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":280,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":274,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["key",{"_index":810,"title":{},"body":{"injectables/ProjectService.html":{}}}],["keywords",{"_index":1692,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":1596,"title":{},"body":{"license.html":{}}}],["known",{"_index":1203,"title":{},"body":{"miscellaneous/functions.html":{}}}],["labels",{"_index":1354,"title":{},"body":{"index.html":{}}}],["language",{"_index":1674,"title":{},"body":{"license.html":{}}}],["languages",{"_index":1343,"title":{},"body":{"index.html":{}}}],["last",{"_index":575,"title":{},"body":{"classes/Project.html":{}}}],["law",{"_index":1592,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":1522,"title":{},"body":{"license.html":{}}}],["legal",{"_index":1396,"title":{},"body":{"license.html":{}}}],["legend",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProjectModule.html":{},"modules/TicketModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":847,"title":{},"body":{"classes/RegisterUserDto.html":{},"miscellaneous/functions.html":{}}}],["length(8",{"_index":849,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["letter",{"_index":832,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["letter'})@matches(/(?=.*[0",{"_index":840,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["letter'})@matches(/(?=.*[a",{"_index":839,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["level",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["levels",{"_index":1035,"title":{},"body":{"classes/User.html":{},"index.html":{}}}],["liability",{"_index":1609,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1618,"title":{},"body":{"license.html":{}}}],["licensable",{"_index":1511,"title":{},"body":{"license.html":{}}}],["license",{"_index":1374,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":1375,"title":{},"body":{"index.html":{},"license.html":{}}}],["licenses",{"_index":1527,"title":{},"body":{"license.html":{}}}],["licensor",{"_index":1392,"title":{},"body":{"license.html":{}}}],["limitation",{"_index":1598,"title":{},"body":{"license.html":{}}}],["limitations",{"_index":1676,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1427,"title":{},"body":{"license.html":{}}}],["limiting",{"_index":1309,"title":{},"body":{"index.html":{}}}],["link",{"_index":123,"title":{},"body":{"injectables/AppService.html":{},"license.html":{}}}],["list",{"_index":337,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"index.html":{}}}],["lists",{"_index":1470,"title":{},"body":{"license.html":{}}}],["literal",{"_index":511,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["litigation",{"_index":1518,"title":{},"body":{"license.html":{}}}],["load",{"_index":384,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/UpdateTicketDto.html":{}}}],["local",{"_index":1262,"title":{},"body":{"index.html":{}}}],["localization/internationalization",{"_index":1344,"title":{},"body":{"index.html":{}}}],["log",{"_index":868,"title":{},"body":{"classes/Ticket.html":{}}}],["logged",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["logic",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginUserDto.html":{}}}],["login",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTicketDto.html":{},"classes/LoginUserDto.html":{},"classes/Ticket.html":{},"classes/UpdateTicketDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["login(@body",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(loginuserdto",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["loginuserdto",{"_index":173,"title":{"classes/LoginUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["loginuserdto.username",{"_index":1107,"title":{},"body":{"injectables/UserService.html":{}}}],["logs",{"_index":132,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["loss",{"_index":1624,"title":{},"body":{"license.html":{}}}],["losses",{"_index":1630,"title":{},"body":{"license.html":{}}}],["low",{"_index":402,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"classes/UpdateTicketDto.html":{}}}],["lowercase",{"_index":833,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["machine",{"_index":1251,"title":{},"body":{"index.html":{}}}],["made",{"_index":703,"title":{},"body":{"controllers/ProjectController.html":{},"index.html":{},"license.html":{}}}],["mailing",{"_index":1469,"title":{},"body":{"license.html":{}}}],["make",{"_index":1506,"title":{},"body":{"license.html":{}}}],["making",{"_index":1004,"title":{},"body":{"classes/UpdateTicketDto.html":{},"license.html":{}}}],["malfunction",{"_index":1628,"title":{},"body":{"license.html":{}}}],["manage",{"_index":588,"title":{},"body":{"classes/Project.html":{},"classes/User.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["managed",{"_index":1473,"title":{},"body":{"license.html":{}}}],["management",{"_index":89,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"controllers/ProjectController.html":{},"controllers/TicketController.html":{},"classes/User.html":{},"index.html":{},"license.html":{}}}],["manager",{"_index":1039,"title":{},"body":{"classes/User.html":{},"index.html":{}}}],["managing",{"_index":104,"title":{},"body":{"injectables/AppService.html":{},"controllers/ProjectController.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["maps",{"_index":1197,"title":{},"body":{"miscellaneous/functions.html":{}}}],["marked",{"_index":1478,"title":{},"body":{"license.html":{}}}],["marks",{"_index":1581,"title":{},"body":{"license.html":{}}}],["match",{"_index":1070,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["matches",{"_index":848,"title":{},"body":{"classes/RegisterUserDto.html":{},"injectables/TicketService.html":{}}}],["matches(/(?=.*[0",{"_index":852,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["matches(/(?=.*[a",{"_index":851,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["matching",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"interfaces/ExpressRequestWithUser.html":{},"interfaces/ExpressRequestWithUser-1.html":{},"interfaces/ExpressRequestWithUser-2.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"modules/ProjectModule.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"injectables/ProjectService.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/Ticket.html":{},"controllers/TicketController.html":{},"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"modules/TicketModule.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"injectables/TicketService.html":{},"classes/TicketSlugValidationError.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mean",{"_index":1389,"title":{},"body":{"license.html":{}}}],["meaning",{"_index":985,"title":{},"body":{"classes/UpdateProjectDto.html":{}}}],["means",{"_index":1405,"title":{},"body":{"license.html":{}}}],["mechanical",{"_index":1431,"title":{},"body":{"license.html":{}}}],["mechanism",{"_index":1323,"title":{},"body":{"index.html":{}}}],["media",{"_index":1436,"title":{},"body":{"license.html":{}}}],["medium",{"_index":403,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"classes/UpdateTicketDto.html":{},"license.html":{}}}],["meet",{"_index":1532,"title":{},"body":{"license.html":{}}}],["meets",{"_index":372,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["member",{"_index":344,"title":{},"body":{"classes/CreateProjectDto.html":{},"injectables/ProjectService.html":{}}}],["members",{"_index":328,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"injectables/TicketService.html":{},"classes/UpdateProjectDto.html":{}}}],["memory",{"_index":449,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["memoryhealthindicator",{"_index":456,"title":{},"body":{"controllers/HealthController.html":{}}}],["merchantability",{"_index":1599,"title":{},"body":{"license.html":{}}}],["merely",{"_index":1454,"title":{},"body":{"license.html":{}}}],["message",{"_index":127,"title":{},"body":{"injectables/AppService.html":{},"classes/LoginUserDto.html":{},"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"classes/RegisterUserDto.html":{},"controllers/TicketController.html":{},"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"classes/TicketSlugValidationError.html":{},"miscellaneous/functions.html":{}}}],["metadata",{"_index":1159,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/functions.html":{}}}],["methods",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["middlewares",{"_index":1177,"title":{},"body":{"miscellaneous/functions.html":{}}}],["miscellaneous",{"_index":1163,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":117,"title":{},"body":{"injectables/AppService.html":{}}}],["model",{"_index":744,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["models",{"_index":552,"title":{},"body":{"classes/Project.html":{},"classes/Ticket.html":{}}}],["modifications",{"_index":1426,"title":{},"body":{"license.html":{}}}],["modified",{"_index":726,"title":{},"body":{"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"controllers/TicketController.html":{},"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"classes/TicketSlugValidationError.html":{},"license.html":{}}}],["modified'})@apiresponse({status",{"_index":895,"title":{},"body":{"controllers/TicketController.html":{}}}],["modify",{"_index":1558,"title":{},"body":{"license.html":{}}}],["modifying",{"_index":1562,"title":{},"body":{"license.html":{}}}],["module",{"_index":48,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HealthModule.html":{},"modules/ProjectModule.html":{},"modules/TicketModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HealthModule.html":{},"modules/ProjectModule.html":{},"modules/TicketModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":50,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HealthModule.html":{},"modules/ProjectModule.html":{},"modules/TicketModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb",{"_index":338,"title":{},"body":{"classes/CreateProjectDto.html":{},"controllers/HealthController.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/User.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mongodb_uri",{"_index":1277,"title":{},"body":{"index.html":{}}}],["mongodb_uri=\"mongodb://mongodb/test",{"_index":1279,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":356,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"classes/Ticket.html":{},"injectables/TicketService.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mongoose's",{"_index":1220,"title":{},"body":{"miscellaneous/functions.html":{}}}],["mongoose.types.objectid",{"_index":747,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["mongoose.types.objectid(userid",{"_index":776,"title":{},"body":{"injectables/ProjectService.html":{}}}],["mongoosehealthindicator",{"_index":455,"title":{},"body":{"controllers/HealthController.html":{}}}],["mongoosemodule",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"modules/ProjectModule.html":{},"modules/TicketModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":733,"title":{},"body":{"modules/ProjectModule.html":{},"modules/TicketModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forroot(process.env.mongodb_uri",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["monitor",{"_index":1299,"title":{},"body":{"index.html":{}}}],["more",{"_index":1050,"title":{},"body":{"injectables/UserService.html":{},"index.html":{},"license.html":{}}}],["multiple",{"_index":1342,"title":{},"body":{"index.html":{}}}],["name",{"_index":101,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProjectDto.html":{},"injectables/JwtStrategy.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"classes/ProjectError.html":{},"modules/ProjectModule.html":{},"injectables/ProjectService.html":{},"classes/RegisterUserDto.html":{},"controllers/TicketController.html":{},"classes/TicketError.html":{},"modules/TicketModule.html":{},"injectables/TicketService.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["names",{"_index":1580,"title":{},"body":{"license.html":{}}}],["natively",{"_index":1250,"title":{},"body":{"index.html":{}}}],["necessarily",{"_index":1512,"title":{},"body":{"license.html":{}}}],["necessary",{"_index":373,"title":{},"body":{"classes/CreateTicketDto.html":{},"index.html":{}}}],["need",{"_index":1253,"title":{},"body":{"index.html":{}}}],["negligence",{"_index":1613,"title":{},"body":{"license.html":{}}}],["negligent",{"_index":1616,"title":{},"body":{"license.html":{}}}],["nest",{"_index":1172,"title":{},"body":{"miscellaneous/functions.html":{}}}],["nestjs",{"_index":1171,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["nestjs(express",{"_index":1691,"title":{},"body":{"properties.html":{}}}],["nestjs/axios",{"_index":482,"title":{},"body":{"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"modules/ProjectModule.html":{},"injectables/ProjectService.html":{},"controllers/TicketController.html":{},"modules/TicketModule.html":{},"injectables/TicketService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1142,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":277,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1000,"title":{},"body":{"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"classes/Project.html":{},"modules/ProjectModule.html":{},"injectables/ProjectService.html":{},"classes/Ticket.html":{},"modules/TicketModule.html":{},"injectables/TicketService.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":493,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1146,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"controllers/HealthController.html":{},"classes/LoginUserDto.html":{},"controllers/ProjectController.html":{},"classes/RegisterUserDto.html":{},"controllers/TicketController.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":460,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["never",{"_index":1207,"title":{},"body":{"miscellaneous/functions.html":{}}}],["new",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"injectables/JwtStrategy.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{}}}],["newly",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["newproject",{"_index":777,"title":{},"body":{"injectables/ProjectService.html":{}}}],["newproject.save",{"_index":779,"title":{},"body":{"injectables/ProjectService.html":{}}}],["newticket",{"_index":961,"title":{},"body":{"injectables/TicketService.html":{}}}],["newticket.save",{"_index":963,"title":{},"body":{"injectables/TicketService.html":{}}}],["newuser",{"_index":1096,"title":{},"body":{"injectables/UserService.html":{}}}],["newuser.save",{"_index":1099,"title":{},"body":{"injectables/UserService.html":{}}}],["nikolaos",{"_index":1669,"title":{},"body":{"license.html":{},"properties.html":{}}}],["node.js",{"_index":1254,"title":{},"body":{"index.html":{}}}],["node_env",{"_index":142,"title":{},"body":{"injectables/AppService.html":{}}}],["non",{"_index":334,"title":{},"body":{"classes/CreateProjectDto.html":{},"license.html":{}}}],["normally",{"_index":1555,"title":{},"body":{"license.html":{}}}],["notfoundexception",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["notfoundexception(\"user",{"_index":1105,"title":{},"body":{"injectables/UserService.html":{}}}],["nothing",{"_index":1571,"title":{},"body":{"license.html":{}}}],["notice",{"_index":1439,"title":{},"body":{"license.html":{}}}],["notices",{"_index":1538,"title":{},"body":{"license.html":{}}}],["notifications",{"_index":1360,"title":{},"body":{"index.html":{}}}],["notwithstanding",{"_index":1569,"title":{},"body":{"license.html":{}}}],["npm",{"_index":1257,"title":{},"body":{"index.html":{}}}],["null",{"_index":688,"title":{},"body":{"controllers/ProjectController.html":{},"classes/Ticket.html":{},"controllers/TicketController.html":{}}}],["nullify",{"_index":907,"title":{},"body":{"controllers/TicketController.html":{}}}],["number",{"_index":129,"title":{},"body":{"injectables/AppService.html":{},"injectables/ProjectService.html":{},"classes/RegisterUserDto.html":{},"injectables/TicketService.html":{}}}],["number'})@matches",{"_index":842,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["oauth2",{"_index":1319,"title":{},"body":{"index.html":{}}}],["object",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProjectDto.html":{},"interfaces/ExpressRequestWithUser.html":{},"interfaces/ExpressRequestWithUser-1.html":{},"interfaces/ExpressRequestWithUser-2.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"classes/RegisterUserDto.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["objectid",{"_index":557,"title":{},"body":{"classes/Project.html":{},"classes/UpdateProjectDto.html":{},"miscellaneous/functions.html":{}}}],["objectid.isvalid",{"_index":1221,"title":{},"body":{"miscellaneous/functions.html":{}}}],["objectids",{"_index":339,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"miscellaneous/functions.html":{}}}],["objectiduserid",{"_index":775,"title":{},"body":{"injectables/ProjectService.html":{}}}],["objects",{"_index":1212,"title":{},"body":{"miscellaneous/functions.html":{}}}],["obligations",{"_index":1638,"title":{},"body":{"license.html":{}}}],["obtain",{"_index":1672,"title":{},"body":{"license.html":{}}}],["occurs",{"_index":977,"title":{},"body":{"injectables/TicketService.html":{}}}],["offer",{"_index":1507,"title":{},"body":{"license.html":{}}}],["once",{"_index":1288,"title":{},"body":{"index.html":{}}}],["one",{"_index":830,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateTicketDto.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["open",{"_index":408,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"classes/UpdateTicketDto.html":{},"index.html":{}}}],["operating",{"_index":1266,"title":{},"body":{"index.html":{}}}],["operation",{"_index":614,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{},"classes/UpdateTicketDto.html":{}}}],["operations",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["optimize",{"_index":1337,"title":{},"body":{"index.html":{}}}],["optional",{"_index":103,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"classes/ProjectError.html":{},"injectables/ProjectService.html":{},"classes/Ticket.html":{},"controllers/TicketController.html":{},"classes/TicketError.html":{},"injectables/TicketService.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":1234,"title":{},"body":{"miscellaneous/functions.html":{}}}],["order",{"_index":1191,"title":{},"body":{"miscellaneous/functions.html":{}}}],["origin",{"_index":1586,"title":{},"body":{"license.html":{}}}],["original",{"_index":1211,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["otherwise",{"_index":145,"title":{},"body":{"injectables/AppService.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["out",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProjectModule.html":{},"modules/TicketModule.html":{},"modules/UserModule.html":{},"license.html":{},"overview.html":{}}}],["outstanding",{"_index":1417,"title":{},"body":{"license.html":{}}}],["overview",{"_index":1681,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":548,"title":{},"body":{"classes/Project.html":{},"injectables/ProjectService.html":{},"classes/UpdateProjectDto.html":{},"license.html":{}}}],["ownership",{"_index":1413,"title":{},"body":{"license.html":{}}}],["owns",{"_index":572,"title":{},"body":{"classes/Project.html":{},"classes/UpdateProjectDto.html":{}}}],["package",{"_index":1139,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":383,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/UpdateTicketDto.html":{},"license.html":{}}}],["page'})@isstring()@isnotempty",{"_index":418,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["param",{"_index":128,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"controllers/ProjectController.html":{},"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"injectables/ProjectService.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"controllers/TicketController.html":{},"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"injectables/TicketService.html":{},"classes/TicketSlugValidationError.html":{},"injectables/UserService.html":{}}}],["parameters",{"_index":100,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProjectController.html":{},"classes/ProjectError.html":{},"injectables/ProjectService.html":{},"controllers/TicketController.html":{},"classes/TicketError.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["parchment",{"_index":149,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["part",{"_index":1546,"title":{},"body":{"license.html":{}}}],["partial",{"_index":660,"title":{},"body":{"controllers/ProjectController.html":{},"miscellaneous/functions.html":{}}}],["partialtype",{"_index":999,"title":{},"body":{"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{}}}],["partialtype(createprojectdto",{"_index":987,"title":{},"body":{"classes/UpdateProjectDto.html":{}}}],["partialtype(createticketdto",{"_index":1006,"title":{},"body":{"classes/UpdateTicketDto.html":{}}}],["particular",{"_index":1601,"title":{},"body":{"license.html":{}}}],["party",{"_index":1554,"title":{},"body":{"license.html":{}}}],["passport",{"_index":488,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":513,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":505,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["passwordmatches",{"_index":1108,"title":{},"body":{"injectables/UserService.html":{}}}],["passwords",{"_index":1069,"title":{},"body":{"injectables/UserService.html":{}}}],["patch",{"_index":665,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{},"index.html":{}}}],["patch(\":id",{"_index":705,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["patch(':id')@apioperation({summary",{"_index":657,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["patent",{"_index":1502,"title":{},"body":{"license.html":{}}}],["path",{"_index":476,"title":{},"body":{"controllers/HealthController.html":{},"injectables/ProjectService.html":{}}}],["payload",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["pending",{"_index":869,"title":{},"body":{"classes/Ticket.html":{},"classes/UpdateTicketDto.html":{}}}],["percent",{"_index":1415,"title":{},"body":{"license.html":{}}}],["perform",{"_index":1499,"title":{},"body":{"license.html":{}}}],["performance",{"_index":1338,"title":{},"body":{"index.html":{}}}],["performs",{"_index":445,"title":{},"body":{"controllers/HealthController.html":{}}}],["permission",{"_index":758,"title":{},"body":{"injectables/ProjectService.html":{},"license.html":{}}}],["permissions",{"_index":724,"title":{},"body":{"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"injectables/ProjectService.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"injectables/TicketService.html":{},"classes/TicketSlugValidationError.html":{},"classes/User.html":{},"index.html":{},"license.html":{}}}],["perpetual",{"_index":1489,"title":{},"body":{"license.html":{}}}],["pertain",{"_index":1545,"title":{},"body":{"license.html":{}}}],["places",{"_index":1550,"title":{},"body":{"license.html":{}}}],["plain",{"_index":1065,"title":{},"body":{"injectables/UserService.html":{}}}],["plaintoclass",{"_index":765,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TicketService.html":{}}}],["plaintoclass(project",{"_index":770,"title":{},"body":{"injectables/ProjectService.html":{}}}],["plaintoclass(ticket",{"_index":960,"title":{},"body":{"injectables/TicketService.html":{}}}],["please",{"_index":153,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["populate",{"_index":781,"title":{},"body":{"injectables/ProjectService.html":{}}}],["populate(\"members",{"_index":785,"title":{},"body":{"injectables/ProjectService.html":{}}}],["populate(\"tickets",{"_index":784,"title":{},"body":{"injectables/ProjectService.html":{}}}],["port",{"_index":91,"title":{},"body":{"injectables/AppService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["port=\"3000",{"_index":1280,"title":{},"body":{"index.html":{}}}],["possibility",{"_index":1633,"title":{},"body":{"license.html":{}}}],["possible",{"_index":411,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["possibly",{"_index":1218,"title":{},"body":{"miscellaneous/functions.html":{}}}],["post",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProjectController.html":{},"controllers/TicketController.html":{},"index.html":{}}}],["post(\"login",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"register",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('')@apioperation({summary",{"_index":619,"title":{},"body":{"controllers/ProjectController.html":{}}}],["post('login')@apiresponse({status",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register')@apiresponse({status",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@useguards(jwtauthguard",{"_index":880,"title":{},"body":{"controllers/TicketController.html":{}}}],["potential",{"_index":1302,"title":{},"body":{"index.html":{}}}],["power",{"_index":1406,"title":{},"body":{"license.html":{}}}],["preferences",{"_index":1359,"title":{},"body":{"index.html":{}}}],["preferred",{"_index":1425,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["prepare",{"_index":1497,"title":{},"body":{"license.html":{}}}],["prevent",{"_index":1310,"title":{},"body":{"index.html":{}}}],["printed",{"_index":1665,"title":{},"body":{"license.html":{}}}],["prioritize",{"_index":1248,"title":{},"body":{"index.html":{}}}],["priority",{"_index":368,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"classes/UpdateTicketDto.html":{},"index.html":{}}}],["private",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/ProjectService.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["process",{"_index":1307,"title":{},"body":{"index.html":{}}}],["process.env.jwt_secret",{"_index":282,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["product",{"_index":1582,"title":{},"body":{"license.html":{}}}],["production",{"_index":124,"title":{},"body":{"injectables/AppService.html":{},"classes/Ticket.html":{},"classes/UpdateTicketDto.html":{},"index.html":{}}}],["profile",{"_index":1019,"title":{},"body":{"classes/UpdateUserDto.html":{},"index.html":{}}}],["progress",{"_index":414,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"classes/UpdateTicketDto.html":{}}}],["project",{"_index":314,"title":{"classes/Project.html":{}},"body":{"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"modules/ProjectModule.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"injectables/ProjectService.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"classes/Ticket.html":{},"modules/TicketModule.html":{},"injectables/TicketService.html":{},"classes/UpdateProjectDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["project'})@isstring()@isnotempty",{"_index":348,"title":{},"body":{"classes/CreateProjectDto.html":{}}}],["project.'})@isstring()@isnotempty",{"_index":332,"title":{},"body":{"classes/CreateProjectDto.html":{}}}],["project.controller",{"_index":732,"title":{},"body":{"modules/ProjectModule.html":{}}}],["project.createdby",{"_index":803,"title":{},"body":{"injectables/ProjectService.html":{}}}],["project.createdby._id.equals(userid",{"_index":815,"title":{},"body":{"injectables/ProjectService.html":{}}}],["project.dto",{"_index":669,"title":{},"body":{"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"classes/UpdateProjectDto.html":{}}}],["project.dto.ts",{"_index":311,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/UpdateProjectDto.html":{},"coverage.html":{}}}],["project.dto.ts:29",{"_index":349,"title":{},"body":{"classes/CreateProjectDto.html":{}}}],["project.dto.ts:31",{"_index":992,"title":{},"body":{"classes/UpdateProjectDto.html":{}}}],["project.dto.ts:46",{"_index":333,"title":{},"body":{"classes/CreateProjectDto.html":{}}}],["project.dto.ts:47",{"_index":989,"title":{},"body":{"classes/UpdateProjectDto.html":{}}}],["project.dto.ts:63",{"_index":994,"title":{},"body":{"classes/UpdateProjectDto.html":{}}}],["project.dto.ts:65",{"_index":342,"title":{},"body":{"classes/CreateProjectDto.html":{}}}],["project.dto.ts:81",{"_index":990,"title":{},"body":{"classes/UpdateProjectDto.html":{}}}],["project.dto.ts:96",{"_index":998,"title":{},"body":{"classes/UpdateProjectDto.html":{}}}],["project.errors",{"_index":764,"title":{},"body":{"injectables/ProjectService.html":{}}}],["project.name",{"_index":734,"title":{},"body":{"modules/ProjectModule.html":{},"injectables/ProjectService.html":{},"classes/Ticket.html":{},"modules/TicketModule.html":{}}}],["project.owner",{"_index":801,"title":{},"body":{"injectables/ProjectService.html":{}}}],["project.save",{"_index":965,"title":{},"body":{"injectables/TicketService.html":{}}}],["project.schema",{"_index":864,"title":{},"body":{"classes/Ticket.html":{}}}],["project.service",{"_index":667,"title":{},"body":{"controllers/ProjectController.html":{},"modules/ProjectModule.html":{}}}],["project.tickets.push(createdticket._id",{"_index":964,"title":{},"body":{"injectables/TicketService.html":{}}}],["project/project.errors",{"_index":950,"title":{},"body":{"injectables/TicketService.html":{}}}],["project/project.module",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["project/tickets",{"_index":1689,"title":{},"body":{"properties.html":{}}}],["projectcontroller",{"_index":603,"title":{"controllers/ProjectController.html":{}},"body":{"controllers/ProjectController.html":{},"modules/ProjectModule.html":{},"coverage.html":{}}}],["projectdocument",{"_index":582,"title":{},"body":{"classes/Project.html":{},"injectables/ProjectService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["projectdoesnotexist",{"_index":680,"title":{"classes/ProjectDoesNotExist.html":{}},"body":{"controllers/ProjectController.html":{},"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"injectables/ProjectService.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"injectables/TicketService.html":{},"coverage.html":{}}}],["projectdoesnotexist(\"project",{"_index":792,"title":{},"body":{"injectables/ProjectService.html":{}}}],["projectdoesnotexist(`project",{"_index":796,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TicketService.html":{}}}],["projectdoesnotexist(`ticket",{"_index":979,"title":{},"body":{"injectables/TicketService.html":{}}}],["projecterror",{"_index":715,"title":{"classes/ProjectError.html":{}},"body":{"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"injectables/ProjectService.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"coverage.html":{}}}],["projecterror(`didn't",{"_index":820,"title":{},"body":{"injectables/ProjectService.html":{}}}],["projectid",{"_index":376,"title":{},"body":{"classes/CreateTicketDto.html":{},"injectables/ProjectService.html":{},"classes/Ticket.html":{},"injectables/TicketService.html":{}}}],["projectidvalidationerror",{"_index":693,"title":{"classes/ProjectIdValidationError.html":{}},"body":{"controllers/ProjectController.html":{},"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"injectables/ProjectService.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"injectables/TicketService.html":{},"coverage.html":{}}}],["projectidvalidationerror(\"provided",{"_index":791,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TicketService.html":{}}}],["projectidvalidationerror(`invalid",{"_index":957,"title":{},"body":{"injectables/TicketService.html":{}}}],["projectinsufficientpermissionserror",{"_index":709,"title":{"classes/ProjectInsufficientPermissionsError.html":{}},"body":{"controllers/ProjectController.html":{},"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"injectables/ProjectService.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"coverage.html":{}}}],["projectinsufficientpermissionserror(`you",{"_index":816,"title":{},"body":{"injectables/ProjectService.html":{}}}],["projectmodel",{"_index":746,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TicketService.html":{}}}],["projectmodule",{"_index":62,"title":{"modules/ProjectModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProjectModule.html":{},"modules.html":{},"overview.html":{}}}],["projectnotmodifiederror",{"_index":701,"title":{"classes/ProjectNotModifiedError.html":{}},"body":{"controllers/ProjectController.html":{},"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"injectables/ProjectService.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"coverage.html":{}}}],["projectnotmodifiederror(\"no",{"_index":808,"title":{},"body":{"injectables/ProjectService.html":{}}}],["projectrelationconflict",{"_index":698,"title":{"classes/ProjectRelationConflict.html":{}},"body":{"controllers/ProjectController.html":{},"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"injectables/ProjectService.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"coverage.html":{}}}],["projectrelationconflict(`project",{"_index":773,"title":{},"body":{"injectables/ProjectService.html":{}}}],["projects",{"_index":608,"title":{},"body":{"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"injectables/TicketService.html":{},"index.html":{}}}],["projects.length",{"_index":788,"title":{},"body":{"injectables/ProjectService.html":{}}}],["projects/tickets",{"_index":1289,"title":{},"body":{"index.html":{}}}],["projectschema",{"_index":599,"title":{},"body":{"classes/Project.html":{},"modules/ProjectModule.html":{},"modules/TicketModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["projectservice",{"_index":666,"title":{"injectables/ProjectService.html":{}},"body":{"controllers/ProjectController.html":{},"modules/ProjectModule.html":{},"injectables/ProjectService.html":{},"coverage.html":{},"overview.html":{}}}],["projectslugvalidationerror",{"_index":722,"title":{"classes/ProjectSlugValidationError.html":{}},"body":{"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"coverage.html":{}}}],["projectupdatedatavalidationerror",{"_index":727,"title":{"classes/ProjectUpdateDataValidationError.html":{}},"body":{"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"injectables/ProjectService.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"coverage.html":{}}}],["projectupdatedatavalidationerror(\"invalid",{"_index":806,"title":{},"body":{"injectables/ProjectService.html":{}}}],["project})@apiresponse({status",{"_index":622,"title":{},"body":{"controllers/ProjectController.html":{}}}],["prominent",{"_index":1537,"title":{},"body":{"license.html":{}}}],["promise",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["prop",{"_index":576,"title":{},"body":{"classes/Project.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["prop(['undefined",{"_index":568,"title":{},"body":{"classes/Project.html":{}}}],["prop({default",{"_index":563,"title":{},"body":{"classes/Project.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["prop({required",{"_index":561,"title":{},"body":{"classes/Project.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["prop({type",{"_index":556,"title":{},"body":{"classes/Project.html":{},"classes/Ticket.html":{}}}],["properties",{"_index":327,"title":{"properties.html":{}},"body":{"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"interfaces/ExpressRequestWithUser.html":{},"interfaces/ExpressRequestWithUser-1.html":{},"interfaces/ExpressRequestWithUser-2.html":{},"classes/LoginUserDto.html":{},"classes/Project.html":{},"classes/RegisterUserDto.html":{},"classes/Ticket.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"properties.html":{}}}],["property",{"_index":529,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/Project.html":{},"classes/RegisterUserDto.html":{},"classes/Ticket.html":{},"classes/UpdateUserDto.html":{}}}],["protected",{"_index":609,"title":{},"body":{"controllers/ProjectController.html":{}}}],["protecting",{"_index":494,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["provide",{"_index":532,"title":{},"body":{"classes/LoginUserDto.html":{},"license.html":{}}}],["provided",{"_index":345,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/LoginUserDto.html":{},"controllers/ProjectController.html":{},"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"injectables/ProjectService.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"classes/RegisterUserDto.html":{},"injectables/TicketService.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["provided.'})@apiresponse({status",{"_index":623,"title":{},"body":{"controllers/ProjectController.html":{}}}],["providers",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProjectModule.html":{},"modules/TicketModule.html":{},"modules/UserModule.html":{},"index.html":{},"overview.html":{}}}],["provides",{"_index":120,"title":{},"body":{"injectables/AppService.html":{},"controllers/ProjectController.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"license.html":{}}}],["providing",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["public",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProjectService.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["publicly",{"_index":1498,"title":{},"body":{"license.html":{}}}],["publish",{"_index":1348,"title":{},"body":{"index.html":{}}}],["pull",{"_index":1373,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":1474,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":1403,"title":{},"body":{"license.html":{}}}],["put",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["put(\"users/name",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{}}}],["qa",{"_index":870,"title":{},"body":{"classes/Ticket.html":{},"classes/UpdateTicketDto.html":{}}}],["queries",{"_index":1339,"title":{},"body":{"index.html":{}}}],["rate",{"_index":1308,"title":{},"body":{"index.html":{}}}],["readable",{"_index":1548,"title":{},"body":{"license.html":{}}}],["readonly",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{}}}],["real",{"_index":825,"title":{},"body":{"classes/RegisterUserDto.html":{},"index.html":{}}}],["reason",{"_index":1652,"title":{},"body":{"license.html":{}}}],["reasonable",{"_index":1583,"title":{},"body":{"license.html":{}}}],["received",{"_index":1482,"title":{},"body":{"license.html":{}}}],["recipients",{"_index":1534,"title":{},"body":{"license.html":{}}}],["recommend",{"_index":1664,"title":{},"body":{"license.html":{}}}],["recovery",{"_index":1324,"title":{},"body":{"index.html":{}}}],["redistributing",{"_index":1605,"title":{},"body":{"license.html":{}}}],["redistribution",{"_index":1530,"title":{},"body":{"license.html":{}}}],["ref",{"_index":558,"title":{},"body":{"classes/Project.html":{},"classes/Ticket.html":{}}}],["refer",{"_index":154,"title":{},"body":{"injectables/AppService.html":{}}}],["reflect",{"_index":1158,"title":{},"body":{"dependencies.html":{}}}],["regarding",{"_index":1577,"title":{},"body":{"license.html":{}}}],["register",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["register(@body",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(registeruserdto",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["registered",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["registers",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["registeruserdto",{"_index":199,"title":{"classes/RegisterUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RegisterUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["registration",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"classes/RegisterUserDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["registry",{"_index":1351,"title":{},"body":{"index.html":{}}}],["related",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ProjectController.html":{},"classes/ProjectError.html":{},"injectables/ProjectService.html":{},"controllers/TicketController.html":{},"classes/TicketError.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["relation",{"_index":718,"title":{},"body":{"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"classes/TicketSlugValidationError.html":{}}}],["relationships",{"_index":551,"title":{},"body":{"classes/Project.html":{},"classes/Ticket.html":{}}}],["remain",{"_index":1452,"title":{},"body":{"license.html":{}}}],["remove",{"_index":633,"title":{},"body":{"controllers/ProjectController.html":{}}}],["rename",{"_index":1269,"title":{},"body":{"index.html":{}}}],["replace",{"_index":1272,"title":{},"body":{"index.html":{}}}],["replaced",{"_index":1659,"title":{},"body":{"license.html":{}}}],["reporting",{"_index":1362,"title":{},"body":{"index.html":{}}}],["reports",{"_index":1371,"title":{},"body":{"index.html":{}}}],["repository",{"_index":1261,"title":{},"body":{"index.html":{}}}],["represent",{"_index":991,"title":{},"body":{"classes/UpdateProjectDto.html":{},"license.html":{}}}],["representation",{"_index":1222,"title":{},"body":{"miscellaneous/functions.html":{}}}],["representatives",{"_index":1468,"title":{},"body":{"license.html":{}}}],["represented",{"_index":432,"title":{},"body":{"interfaces/ExpressRequestWithUser.html":{},"interfaces/ExpressRequestWithUser-1.html":{},"interfaces/ExpressRequestWithUser-2.html":{}}}],["representing",{"_index":396,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/UpdateProjectDto.html":{},"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["represents",{"_index":410,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Project.html":{},"classes/Ticket.html":{},"classes/UpdateProjectDto.html":{},"classes/User.html":{}}}],["reproduce",{"_index":1496,"title":{},"body":{"license.html":{}}}],["reproducing",{"_index":1587,"title":{},"body":{"license.html":{}}}],["reproduction",{"_index":1385,"title":{},"body":{"license.html":{}}}],["req",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["req.user",{"_index":687,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["req.user._id",{"_index":686,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["request",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ExpressRequestWithUser.html":{},"interfaces/ExpressRequestWithUser-1.html":{},"interfaces/ExpressRequestWithUser-2.html":{},"controllers/ProjectController.html":{},"controllers/TicketController.html":{},"index.html":{}}}],["request.'})@apiresponse({status",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{}}}],["requested",{"_index":613,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["requesting",{"_index":752,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TicketService.html":{}}}],["requests",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/TicketController.html":{},"index.html":{}}}],["required",{"_index":319,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"classes/LoginUserDto.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"classes/RegisterUserDto.html":{},"classes/Ticket.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["requires",{"_index":524,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["reset",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProjectModule.html":{},"modules/TicketModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolution",{"_index":1365,"title":{},"body":{"index.html":{}}}],["resolves",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["respected",{"_index":742,"title":{},"body":{"injectables/ProjectService.html":{}}}],["response",{"_index":630,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["responses",{"_index":610,"title":{},"body":{"controllers/ProjectController.html":{}}}],["responsibility",{"_index":1644,"title":{},"body":{"license.html":{}}}],["responsible",{"_index":86,"title":{},"body":{"injectables/AppService.html":{},"injectables/UserService.html":{},"license.html":{}}}],["restore",{"_index":1322,"title":{},"body":{"index.html":{}}}],["restricted",{"_index":1028,"title":{},"body":{"classes/User.html":{}}}],["result",{"_index":451,"title":{},"body":{"controllers/HealthController.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"license.html":{}}}],["result.deletedcount",{"_index":818,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TicketService.html":{}}}],["resulting",{"_index":1430,"title":{},"body":{"license.html":{}}}],["results",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"interfaces/ExpressRequestWithUser.html":{},"interfaces/ExpressRequestWithUser-1.html":{},"interfaces/ExpressRequestWithUser-2.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"modules/ProjectModule.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"injectables/ProjectService.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/Ticket.html":{},"controllers/TicketController.html":{},"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"modules/TicketModule.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"injectables/TicketService.html":{},"classes/TicketSlugValidationError.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retain",{"_index":1542,"title":{},"body":{"license.html":{}}}],["retrieval",{"_index":738,"title":{},"body":{"injectables/ProjectService.html":{}}}],["retrieve",{"_index":644,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["retrieved",{"_index":648,"title":{},"body":{"controllers/ProjectController.html":{},"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["retrieves",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtStrategy.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{}}}],["retrieving",{"_index":508,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/ProjectController.html":{},"injectables/TicketService.html":{}}}],["return",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["revisions",{"_index":1448,"title":{},"body":{"license.html":{}}}],["rights",{"_index":1640,"title":{},"body":{"license.html":{}}}],["risks",{"_index":1607,"title":{},"body":{"license.html":{}}}],["role",{"_index":1023,"title":{},"body":{"classes/User.html":{}}}],["roles",{"_index":741,"title":{},"body":{"injectables/ProjectService.html":{},"index.html":{}}}],["routes",{"_index":495,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["royalty",{"_index":1493,"title":{},"body":{"license.html":{}}}],["rules",{"_index":318,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"classes/UpdateProjectDto.html":{},"index.html":{}}}],["run",{"_index":109,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["running",{"_index":116,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["runvalidators",{"_index":976,"title":{},"body":{"injectables/TicketService.html":{}}}],["rxjs",{"_index":1161,"title":{},"body":{"dependencies.html":{}}}],["same",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ProjectService.html":{},"injectables/UserService.html":{},"license.html":{}}}],["sample",{"_index":331,"title":{},"body":{"classes/CreateProjectDto.html":{}}}],["sanitized",{"_index":1239,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sanitizedupdate",{"_index":974,"title":{},"body":{"injectables/TicketService.html":{}}}],["sanitizes",{"_index":1237,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sanitizeupdateticketdto",{"_index":952,"title":{},"body":{"injectables/TicketService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["sanitizeupdateticketdto(updateticketdto",{"_index":975,"title":{},"body":{"injectables/TicketService.html":{},"miscellaneous/functions.html":{}}}],["saveduser",{"_index":1098,"title":{},"body":{"injectables/UserService.html":{}}}],["saveduser.toobject",{"_index":1102,"title":{},"body":{"injectables/UserService.html":{}}}],["scenarios",{"_index":1232,"title":{},"body":{"miscellaneous/functions.html":{}}}],["schema",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"classes/Project.html":{},"modules/ProjectModule.html":{},"injectables/ProjectService.html":{},"classes/Ticket.html":{},"modules/TicketModule.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["schemafactory",{"_index":577,"title":{},"body":{"classes/Project.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(project",{"_index":602,"title":{},"body":{"classes/Project.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(ticket",{"_index":875,"title":{},"body":{"classes/Ticket.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":1041,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schemas/project.schema",{"_index":673,"title":{},"body":{"controllers/ProjectController.html":{},"modules/ProjectModule.html":{},"injectables/ProjectService.html":{},"modules/TicketModule.html":{},"injectables/TicketService.html":{}}}],["schemas/ticket.schema",{"_index":902,"title":{},"body":{"controllers/TicketController.html":{},"modules/TicketModule.html":{},"injectables/TicketService.html":{}}}],["schemas/user.schema",{"_index":433,"title":{},"body":{"interfaces/ExpressRequestWithUser.html":{},"interfaces/ExpressRequestWithUser-1.html":{},"interfaces/ExpressRequestWithUser-2.html":{},"injectables/UserService.html":{}}}],["screenshots",{"_index":1332,"title":{},"body":{"index.html":{}}}],["seamless",{"_index":158,"title":{},"body":{"injectables/AppService.html":{}}}],["search",{"_index":1327,"title":{},"body":{"index.html":{}}}],["second",{"_index":1194,"title":{},"body":{"miscellaneous/functions.html":{}}}],["secret",{"_index":281,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":519,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["section",{"_index":1505,"title":{},"body":{"license.html":{}}}],["sections",{"_index":1390,"title":{},"body":{"license.html":{}}}],["see",{"_index":1379,"title":{},"body":{"index.html":{},"license.html":{}}}],["seed",{"_index":1281,"title":{},"body":{"index.html":{}}}],["select",{"_index":782,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TicketService.html":{}}}],["sell",{"_index":1508,"title":{},"body":{"license.html":{}}}],["sent",{"_index":1467,"title":{},"body":{"license.html":{}}}],["separable",{"_index":1453,"title":{},"body":{"license.html":{}}}],["separate",{"_index":1574,"title":{},"body":{"license.html":{}}}],["server",{"_index":1179,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["service",{"_index":85,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/ProjectService.html":{},"injectables/TicketService.html":{},"license.html":{}}}],["services",{"_index":447,"title":{},"body":{"controllers/HealthController.html":{}}}],["set",{"_index":143,"title":{},"body":{"injectables/AppService.html":{},"classes/LoginUserDto.html":{},"injectables/ProjectService.html":{},"injectables/TicketService.html":{},"classes/UpdateProjectDto.html":{}}}],["sets",{"_index":1173,"title":{},"body":{"miscellaneous/functions.html":{}}}],["shall",{"_index":1388,"title":{},"body":{"license.html":{}}}],["shares",{"_index":1418,"title":{},"body":{"license.html":{}}}],["side",{"_index":911,"title":{},"body":{"controllers/TicketController.html":{}}}],["signoptions",{"_index":283,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":1215,"title":{},"body":{"miscellaneous/functions.html":{}}}],["single",{"_index":653,"title":{},"body":{"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"injectables/TicketService.html":{}}}],["slug",{"_index":720,"title":{},"body":{"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"classes/TicketSlugValidationError.html":{}}}],["software",{"_index":1428,"title":{},"body":{"license.html":{}}}],["sole",{"_index":1643,"title":{},"body":{"license.html":{}}}],["solely",{"_index":1602,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"interfaces/ExpressRequestWithUser.html":{},"interfaces/ExpressRequestWithUser-1.html":{},"interfaces/ExpressRequestWithUser-2.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"modules/ProjectModule.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"injectables/ProjectService.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/Ticket.html":{},"controllers/TicketController.html":{},"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"modules/TicketModule.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"injectables/TicketService.html":{},"classes/TicketSlugValidationError.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"license.html":{}}}],["special",{"_index":834,"title":{},"body":{"classes/RegisterUserDto.html":{},"license.html":{}}}],["specific",{"_index":888,"title":{},"body":{"controllers/TicketController.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["specification",{"_index":136,"title":{},"body":{"injectables/AppService.html":{}}}],["specified",{"_index":110,"title":{},"body":{"injectables/AppService.html":{},"controllers/ProjectController.html":{},"injectables/TicketService.html":{},"classes/UpdateTicketDto.html":{},"miscellaneous/functions.html":{}}}],["specify",{"_index":1276,"title":{},"body":{"index.html":{}}}],["src/.../hasusernameoremail.decorator.ts",{"_index":1167,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../index.ts",{"_index":1166,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1165,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../project.schema.ts",{"_index":1696,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../ticket.schema.ts",{"_index":1698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../ticket.utils.ts",{"_index":1168,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../user.schema.ts",{"_index":1697,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:19",{"_index":20,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":84,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:24",{"_index":107,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:40",{"_index":114,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:52",{"_index":119,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:9",{"_index":97,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:105",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:56",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:90",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":275,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:13",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:33",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/hasusernameoremail.decorator.ts",{"_index":1121,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/auth/dto/login",{"_index":522,"title":{},"body":{"classes/LoginUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["src/auth/dto/register",{"_index":821,"title":{},"body":{"classes/RegisterUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["src/auth/dto/update",{"_index":1018,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/auth/interfaces/user.interface.ts",{"_index":427,"title":{},"body":{"interfaces/ExpressRequestWithUser.html":{},"coverage.html":{}}}],["src/auth/jwt",{"_index":484,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":496,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:15",{"_index":507,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:38",{"_index":512,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/health/health.controller.ts",{"_index":439,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:47",{"_index":444,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":479,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/main.ts",{"_index":1125,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/project/dto/create",{"_index":310,"title":{},"body":{"classes/CreateProjectDto.html":{},"coverage.html":{}}}],["src/project/dto/update",{"_index":984,"title":{},"body":{"classes/UpdateProjectDto.html":{},"coverage.html":{}}}],["src/project/interfaces/project.interface.ts",{"_index":435,"title":{},"body":{"interfaces/ExpressRequestWithUser-1.html":{},"coverage.html":{}}}],["src/project/project.controller.ts",{"_index":604,"title":{},"body":{"controllers/ProjectController.html":{},"coverage.html":{}}}],["src/project/project.controller.ts:143",{"_index":628,"title":{},"body":{"controllers/ProjectController.html":{}}}],["src/project/project.controller.ts:206",{"_index":663,"title":{},"body":{"controllers/ProjectController.html":{}}}],["src/project/project.controller.ts:254",{"_index":640,"title":{},"body":{"controllers/ProjectController.html":{}}}],["src/project/project.controller.ts:45",{"_index":650,"title":{},"body":{"controllers/ProjectController.html":{}}}],["src/project/project.controller.ts:95",{"_index":654,"title":{},"body":{"controllers/ProjectController.html":{}}}],["src/project/project.errors.ts",{"_index":714,"title":{},"body":{"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"coverage.html":{}}}],["src/project/project.errors.ts:5",{"_index":728,"title":{},"body":{"classes/ProjectError.html":{}}}],["src/project/project.module.ts",{"_index":731,"title":{},"body":{"modules/ProjectModule.html":{}}}],["src/project/project.service.ts",{"_index":735,"title":{},"body":{"injectables/ProjectService.html":{},"coverage.html":{}}}],["src/project/project.service.ts:131",{"_index":761,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/project/project.service.ts:186",{"_index":750,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/project/project.service.ts:30",{"_index":745,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/project/project.service.ts:44",{"_index":748,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/project/project.service.ts:73",{"_index":755,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/project/project.service.ts:98",{"_index":757,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/schemas/project.schema.ts",{"_index":546,"title":{},"body":{"classes/Project.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/project.schema.ts:103",{"_index":573,"title":{},"body":{"classes/Project.html":{}}}],["src/schemas/project.schema.ts:39",{"_index":570,"title":{},"body":{"classes/Project.html":{}}}],["src/schemas/project.schema.ts:48",{"_index":562,"title":{},"body":{"classes/Project.html":{}}}],["src/schemas/project.schema.ts:57",{"_index":571,"title":{},"body":{"classes/Project.html":{}}}],["src/schemas/project.schema.ts:66",{"_index":569,"title":{},"body":{"classes/Project.html":{}}}],["src/schemas/project.schema.ts:74",{"_index":564,"title":{},"body":{"classes/Project.html":{}}}],["src/schemas/project.schema.ts:83",{"_index":559,"title":{},"body":{"classes/Project.html":{}}}],["src/schemas/project.schema.ts:92",{"_index":574,"title":{},"body":{"classes/Project.html":{}}}],["src/schemas/ticket.schema.ts",{"_index":854,"title":{},"body":{"classes/Ticket.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/ticket.schema.ts:31",{"_index":863,"title":{},"body":{"classes/Ticket.html":{}}}],["src/schemas/ticket.schema.ts:40",{"_index":857,"title":{},"body":{"classes/Ticket.html":{}}}],["src/schemas/ticket.schema.ts:49",{"_index":856,"title":{},"body":{"classes/Ticket.html":{}}}],["src/schemas/ticket.schema.ts:58",{"_index":855,"title":{},"body":{"classes/Ticket.html":{}}}],["src/schemas/ticket.schema.ts:67",{"_index":861,"title":{},"body":{"classes/Ticket.html":{}}}],["src/schemas/ticket.schema.ts:79",{"_index":862,"title":{},"body":{"classes/Ticket.html":{}}}],["src/schemas/ticket.schema.ts:88",{"_index":860,"title":{},"body":{"classes/Ticket.html":{}}}],["src/schemas/ticket.schema.ts:98",{"_index":858,"title":{},"body":{"classes/Ticket.html":{}}}],["src/schemas/user.schema",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{}}}],["src/schemas/user.schema.ts",{"_index":1020,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/user.schema.ts:14",{"_index":1036,"title":{},"body":{"classes/User.html":{}}}],["src/schemas/user.schema.ts:18",{"_index":1031,"title":{},"body":{"classes/User.html":{}}}],["src/schemas/user.schema.ts:22",{"_index":1024,"title":{},"body":{"classes/User.html":{}}}],["src/schemas/user.schema.ts:26",{"_index":1030,"title":{},"body":{"classes/User.html":{}}}],["src/schemas/user.schema.ts:33",{"_index":1033,"title":{},"body":{"classes/User.html":{}}}],["src/schemas/user.schema.ts:40",{"_index":1025,"title":{},"body":{"classes/User.html":{}}}],["src/ticket/dto/create",{"_index":360,"title":{},"body":{"classes/CreateTicketDto.html":{},"coverage.html":{}}}],["src/ticket/dto/update",{"_index":1003,"title":{},"body":{"classes/UpdateTicketDto.html":{},"coverage.html":{}}}],["src/ticket/interfaces/ticket.interface.ts",{"_index":437,"title":{},"body":{"interfaces/ExpressRequestWithUser-2.html":{},"coverage.html":{}}}],["src/ticket/ticket.controller.ts",{"_index":877,"title":{},"body":{"controllers/TicketController.html":{},"coverage.html":{}}}],["src/ticket/ticket.controller.ts:122",{"_index":896,"title":{},"body":{"controllers/TicketController.html":{}}}],["src/ticket/ticket.controller.ts:141",{"_index":883,"title":{},"body":{"controllers/TicketController.html":{}}}],["src/ticket/ticket.controller.ts:30",{"_index":885,"title":{},"body":{"controllers/TicketController.html":{}}}],["src/ticket/ticket.controller.ts:50",{"_index":887,"title":{},"body":{"controllers/TicketController.html":{}}}],["src/ticket/ticket.controller.ts:71",{"_index":881,"title":{},"body":{"controllers/TicketController.html":{}}}],["src/ticket/ticket.errors.ts",{"_index":923,"title":{},"body":{"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"classes/TicketSlugValidationError.html":{},"coverage.html":{}}}],["src/ticket/ticket.errors.ts:5",{"_index":930,"title":{},"body":{"classes/TicketError.html":{}}}],["src/ticket/ticket.module.ts",{"_index":933,"title":{},"body":{"modules/TicketModule.html":{}}}],["src/ticket/ticket.service.ts",{"_index":935,"title":{},"body":{"injectables/TicketService.html":{},"coverage.html":{}}}],["src/ticket/ticket.service.ts:109",{"_index":949,"title":{},"body":{"injectables/TicketService.html":{}}}],["src/ticket/ticket.service.ts:146",{"_index":942,"title":{},"body":{"injectables/TicketService.html":{}}}],["src/ticket/ticket.service.ts:19",{"_index":938,"title":{},"body":{"injectables/TicketService.html":{}}}],["src/ticket/ticket.service.ts:34",{"_index":940,"title":{},"body":{"injectables/TicketService.html":{}}}],["src/ticket/ticket.service.ts:60",{"_index":945,"title":{},"body":{"injectables/TicketService.html":{}}}],["src/ticket/ticket.service.ts:82",{"_index":947,"title":{},"body":{"injectables/TicketService.html":{}}}],["src/ticket/utils/ticket.utils.ts",{"_index":1134,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/user/user.module.ts",{"_index":1047,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["src/user/user.service.ts",{"_index":1049,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:110",{"_index":1086,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:130",{"_index":1084,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:17",{"_index":1057,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:34",{"_index":1079,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:62",{"_index":1063,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:72",{"_index":1075,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:82",{"_index":1077,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:93",{"_index":1072,"title":{},"body":{"injectables/UserService.html":{}}}],["src/utils/index.ts",{"_index":1135,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["sse",{"_index":1326,"title":{},"body":{"index.html":{}}}],["staging",{"_index":871,"title":{},"body":{"classes/Ticket.html":{},"classes/UpdateTicketDto.html":{},"index.html":{}}}],["start",{"_index":1264,"title":{},"body":{"index.html":{}}}],["started",{"_index":152,"title":{"index.html":{},"license.html":{}},"body":{"injectables/AppService.html":{},"index.html":{}}}],["starts",{"_index":1178,"title":{},"body":{"miscellaneous/functions.html":{}}}],["state",{"_index":1568,"title":{},"body":{"license.html":{}}}],["stated",{"_index":1504,"title":{},"body":{"license.html":{}}}],["statement",{"_index":1563,"title":{},"body":{"license.html":{}}}],["statements",{"_index":1116,"title":{},"body":{"coverage.html":{}}}],["stating",{"_index":1539,"title":{},"body":{"license.html":{}}}],["status",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTicketDto.html":{},"controllers/ProjectController.html":{},"classes/Ticket.html":{},"controllers/TicketController.html":{},"classes/UpdateTicketDto.html":{},"classes/User.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["statuscode",{"_index":917,"title":{},"body":{"controllers/TicketController.html":{}}}],["statuses",{"_index":1355,"title":{},"body":{"index.html":{}}}],["stoppage",{"_index":1626,"title":{},"body":{"license.html":{}}}],["stored",{"_index":1022,"title":{},"body":{"classes/User.html":{}}}],["strategy",{"_index":489,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["string",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"injectables/ProjectService.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"classes/RegisterUserDto.html":{},"classes/Ticket.html":{},"controllers/TicketController.html":{},"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"injectables/TicketService.html":{},"classes/TicketSlugValidationError.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["strings",{"_index":1225,"title":{},"body":{"miscellaneous/functions.html":{}}}],["string})@apibody({description",{"_index":658,"title":{},"body":{"controllers/ProjectController.html":{}}}],["string})@apibody({type",{"_index":891,"title":{},"body":{"controllers/TicketController.html":{}}}],["string})@apiresponse({status",{"_index":635,"title":{},"body":{"controllers/ProjectController.html":{}}}],["strongp@ssw0rd",{"_index":543,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["strongp@ssw0rd!'})@isstring()@isnotempty",{"_index":535,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["strongp@ssw0rd!'})@isstring()@isnotempty()@length(8",{"_index":836,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["structure",{"_index":316,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"classes/Project.html":{},"classes/Ticket.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/User.html":{}}}],["sub",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["subject",{"_index":1486,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":1500,"title":{},"body":{"license.html":{}}}],["submission",{"_index":1565,"title":{},"body":{"license.html":{}}}],["submit",{"_index":1372,"title":{},"body":{"index.html":{},"license.html":{}}}],["submitted",{"_index":1460,"title":{},"body":{"license.html":{}}}],["subsequently",{"_index":1483,"title":{},"body":{"license.html":{}}}],["success",{"_index":611,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["successful",{"_index":753,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/UserService.html":{}}}],["successfully",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["such",{"_index":547,"title":{},"body":{"classes/Project.html":{},"injectables/ProjectService.html":{},"classes/Ticket.html":{},"classes/User.html":{},"index.html":{},"license.html":{}}}],["suggestions",{"_index":1370,"title":{},"body":{"index.html":{}}}],["summary",{"_index":682,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["super",{"_index":515,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super(message",{"_index":717,"title":{},"body":{"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"classes/TicketSlugValidationError.html":{}}}],["supersede",{"_index":1573,"title":{},"body":{"license.html":{}}}],["support",{"_index":1316,"title":{},"body":{"index.html":{},"license.html":{},"modules.html":{}}}],["svg",{"_index":1678,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"miscellaneous/functions.html":{}}}],["swc/helpers",{"_index":1148,"title":{},"body":{"dependencies.html":{}}}],["syntax",{"_index":1663,"title":{},"body":{"license.html":{}}}],["system",{"_index":363,"title":{},"body":{"classes/CreateTicketDto.html":{},"controllers/ProjectController.html":{},"classes/User.html":{},"injectables/UserService.html":{},"index.html":{}}}],["systems",{"_index":1471,"title":{},"body":{"license.html":{}}}],["t",{"_index":1209,"title":{},"body":{"miscellaneous/functions.html":{}}}],["table",{"_index":1138,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1137,"title":{},"body":{"coverage.html":{}}}],["tasks",{"_index":589,"title":{},"body":{"classes/Project.html":{},"index.html":{}}}],["teams",{"_index":1245,"title":{},"body":{"index.html":{}}}],["terminate",{"_index":1528,"title":{},"body":{"license.html":{}}}],["terminusmodule",{"_index":480,"title":{},"body":{"modules/HealthModule.html":{}}}],["terms",{"_index":1383,"title":{},"body":{"license.html":{}}}],["tests",{"_index":1305,"title":{},"body":{"index.html":{}}}],["text",{"_index":1066,"title":{},"body":{"injectables/UserService.html":{},"license.html":{}}}],["themes",{"_index":1361,"title":{},"body":{"index.html":{}}}],["theory",{"_index":1611,"title":{},"body":{"license.html":{}}}],["thereof",{"_index":1456,"title":{},"body":{"license.html":{}}}],["third",{"_index":1553,"title":{},"body":{"license.html":{}}}],["this.appservice.devinstructions",{"_index":45,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(loginuserdto",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.comparepassword(loginuserdto.password",{"_index":1109,"title":{},"body":{"injectables/UserService.html":{}}}],["this.configservice.get(\"node_env",{"_index":146,"title":{},"body":{"injectables/AppService.html":{}}}],["this.configservice.get(\"port",{"_index":138,"title":{},"body":{"injectables/AppService.html":{}}}],["this.disk.checkstorage(\"storage",{"_index":475,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.findbyusernameoremail(loginuserdto.email",{"_index":1106,"title":{},"body":{"injectables/UserService.html":{}}}],["this.health.check",{"_index":464,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"uptime",{"_index":465,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.isdev",{"_index":148,"title":{},"body":{"injectables/AppService.html":{}}}],["this.jwtservice.sign(payload",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.memory.checkheap(\"memory_heap",{"_index":474,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss(\"memory_rss",{"_index":471,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.mongodb.pingcheck(\"mongodb",{"_index":468,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.projectmodel",{"_index":778,"title":{},"body":{"injectables/ProjectService.html":{}}}],["this.projectmodel(updateprojectdto",{"_index":799,"title":{},"body":{"injectables/ProjectService.html":{}}}],["this.projectmodel.deleteone",{"_index":817,"title":{},"body":{"injectables/ProjectService.html":{}}}],["this.projectmodel.findbyid(createticketdto.projectid).exec",{"_index":959,"title":{},"body":{"injectables/TicketService.html":{}}}],["this.projectmodel.findbyid(projectid).exec",{"_index":795,"title":{},"body":{"injectables/ProjectService.html":{}}}],["this.projectmodel.findone",{"_index":772,"title":{},"body":{"injectables/ProjectService.html":{}}}],["this.projectservice.create(createprojectdto",{"_index":700,"title":{},"body":{"controllers/ProjectController.html":{}}}],["this.projectservice.delete(id",{"_index":713,"title":{},"body":{"controllers/ProjectController.html":{}}}],["this.projectservice.findall(userid",{"_index":689,"title":{},"body":{"controllers/ProjectController.html":{}}}],["this.projectservice.findone(id",{"_index":697,"title":{},"body":{"controllers/ProjectController.html":{}}}],["this.projectservice.update(id",{"_index":708,"title":{},"body":{"controllers/ProjectController.html":{}}}],["this.ticketmodel",{"_index":962,"title":{},"body":{"injectables/TicketService.html":{}}}],["this.ticketmodel.deleteone",{"_index":982,"title":{},"body":{"injectables/TicketService.html":{}}}],["this.ticketmodel.findbyid(ticketid).exec",{"_index":970,"title":{},"body":{"injectables/TicketService.html":{}}}],["this.ticketmodel.findone",{"_index":978,"title":{},"body":{"injectables/TicketService.html":{}}}],["this.ticketservice.create(createticketdto",{"_index":916,"title":{},"body":{"controllers/TicketController.html":{}}}],["this.ticketservice.delete(id",{"_index":921,"title":{},"body":{"controllers/TicketController.html":{}}}],["this.ticketservice.findall(userid",{"_index":913,"title":{},"body":{"controllers/TicketController.html":{}}}],["this.ticketservice.findone(id",{"_index":914,"title":{},"body":{"controllers/TicketController.html":{}}}],["this.ticketservice.update(id",{"_index":920,"title":{},"body":{"controllers/TicketController.html":{}}}],["this.usermodel",{"_index":1097,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyid(userid).exec",{"_index":1104,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findone",{"_index":1092,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.findbyusername(payload.username",{"_index":520,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.userservice.register(registeruserdto",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updateusername(req.user._id",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.validateuser(loginuserdto",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["those",{"_index":1509,"title":{},"body":{"license.html":{}}}],["threshold",{"_index":477,"title":{},"body":{"controllers/HealthController.html":{}}}],["through",{"_index":1391,"title":{},"body":{"license.html":{}}}],["throw",{"_index":521,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/ProjectService.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["thrown",{"_index":1205,"title":{},"body":{"miscellaneous/functions.html":{}}}],["throws",{"_index":130,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["ticket",{"_index":362,"title":{"classes/Ticket.html":{}},"body":{"classes/CreateTicketDto.html":{},"classes/Project.html":{},"classes/Ticket.html":{},"controllers/TicketController.html":{},"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"modules/TicketModule.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"injectables/TicketService.html":{},"classes/TicketSlugValidationError.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["ticket's",{"_index":364,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket'})@apiresponse({status",{"_index":892,"title":{},"body":{"controllers/TicketController.html":{}}}],["ticket.controller",{"_index":934,"title":{},"body":{"modules/TicketModule.html":{}}}],["ticket.createdby._id.equals(userid",{"_index":980,"title":{},"body":{"injectables/TicketService.html":{}}}],["ticket.dto",{"_index":900,"title":{},"body":{"controllers/TicketController.html":{},"injectables/TicketService.html":{},"classes/UpdateTicketDto.html":{}}}],["ticket.dto.ts",{"_index":361,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/UpdateTicketDto.html":{},"coverage.html":{}}}],["ticket.dto.ts:101",{"_index":409,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:105",{"_index":1015,"title":{},"body":{"classes/UpdateTicketDto.html":{}}}],["ticket.dto.ts:120",{"_index":400,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:123",{"_index":1013,"title":{},"body":{"classes/UpdateTicketDto.html":{}}}],["ticket.dto.ts:139",{"_index":395,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:29",{"_index":419,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:33",{"_index":1016,"title":{},"body":{"classes/UpdateTicketDto.html":{}}}],["ticket.dto.ts:45",{"_index":387,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:50",{"_index":1010,"title":{},"body":{"classes/UpdateTicketDto.html":{}}}],["ticket.dto.ts:65",{"_index":378,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:68",{"_index":1008,"title":{},"body":{"classes/UpdateTicketDto.html":{}}}],["ticket.dto.ts:81",{"_index":406,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:86",{"_index":1014,"title":{},"body":{"classes/UpdateTicketDto.html":{}}}],["ticket.errors",{"_index":951,"title":{},"body":{"injectables/TicketService.html":{}}}],["ticket.name",{"_index":598,"title":{},"body":{"classes/Project.html":{},"modules/TicketModule.html":{}}}],["ticket.schema",{"_index":580,"title":{},"body":{"classes/Project.html":{}}}],["ticket.service",{"_index":899,"title":{},"body":{"controllers/TicketController.html":{},"modules/TicketModule.html":{}}}],["ticket/ticket.module",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["ticketcontroller",{"_index":876,"title":{"controllers/TicketController.html":{}},"body":{"controllers/TicketController.html":{},"modules/TicketModule.html":{},"coverage.html":{}}}],["ticketdoesnotexist",{"_index":922,"title":{"classes/TicketDoesNotExist.html":{}},"body":{"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"injectables/TicketService.html":{},"classes/TicketSlugValidationError.html":{},"coverage.html":{}}}],["ticketdoesnotexist(\"ticket",{"_index":967,"title":{},"body":{"injectables/TicketService.html":{}}}],["ticketdoesnotexist(`ticket",{"_index":971,"title":{},"body":{"injectables/TicketService.html":{}}}],["ticketerror",{"_index":924,"title":{"classes/TicketError.html":{}},"body":{"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"injectables/TicketService.html":{},"classes/TicketSlugValidationError.html":{},"coverage.html":{}}}],["ticketerror(`didn't",{"_index":983,"title":{},"body":{"injectables/TicketService.html":{}}}],["ticketid",{"_index":943,"title":{},"body":{"injectables/TicketService.html":{}}}],["ticketidvalidationerror",{"_index":927,"title":{"classes/TicketIdValidationError.html":{}},"body":{"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"injectables/TicketService.html":{},"classes/TicketSlugValidationError.html":{},"coverage.html":{}}}],["ticketidvalidationerror(\"provided",{"_index":969,"title":{},"body":{"injectables/TicketService.html":{}}}],["ticketinsufficientpermissionserror",{"_index":928,"title":{"classes/TicketInsufficientPermissionsError.html":{}},"body":{"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"injectables/TicketService.html":{},"classes/TicketSlugValidationError.html":{},"coverage.html":{}}}],["ticketinsufficientpermissionserror(`you",{"_index":981,"title":{},"body":{"injectables/TicketService.html":{}}}],["ticketmodel",{"_index":939,"title":{},"body":{"injectables/TicketService.html":{}}}],["ticketmodule",{"_index":63,"title":{"modules/TicketModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TicketModule.html":{},"modules.html":{},"overview.html":{}}}],["ticketnotmodifiederror",{"_index":929,"title":{"classes/TicketNotModifiedError.html":{}},"body":{"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"injectables/TicketService.html":{},"classes/TicketSlugValidationError.html":{},"coverage.html":{}}}],["ticketnotmodifiederror(\"no",{"_index":973,"title":{},"body":{"injectables/TicketService.html":{}}}],["ticketrelationconflict",{"_index":925,"title":{"classes/TicketRelationConflict.html":{}},"body":{"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"classes/TicketSlugValidationError.html":{},"coverage.html":{}}}],["tickets",{"_index":549,"title":{},"body":{"classes/Project.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"classes/UpdateProjectDto.html":{},"index.html":{}}}],["tickets.length",{"_index":966,"title":{},"body":{"injectables/TicketService.html":{}}}],["ticketschema",{"_index":874,"title":{},"body":{"classes/Ticket.html":{},"modules/TicketModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ticketservice",{"_index":898,"title":{"injectables/TicketService.html":{}},"body":{"controllers/TicketController.html":{},"modules/TicketModule.html":{},"injectables/TicketService.html":{},"coverage.html":{},"overview.html":{}}}],["ticketslugvalidationerror",{"_index":926,"title":{"classes/TicketSlugValidationError.html":{}},"body":{"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"classes/TicketSlugValidationError.html":{},"coverage.html":{}}}],["ticket})@apiresponse({status",{"_index":893,"title":{},"body":{"controllers/TicketController.html":{}}}],["time",{"_index":390,"title":{},"body":{"classes/CreateTicketDto.html":{},"index.html":{}}}],["timeout",{"_index":469,"title":{},"body":{"controllers/HealthController.html":{}}}],["timestamps",{"_index":586,"title":{},"body":{"classes/Project.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["title",{"_index":365,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"classes/UpdateTicketDto.html":{},"license.html":{}}}],["tms",{"_index":150,"title":{},"body":{"injectables/AppService.html":{},"index.html":{},"properties.html":{}}}],["token",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["tokens",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["tort",{"_index":1612,"title":{},"body":{"license.html":{}}}],["total",{"_index":1364,"title":{},"body":{"index.html":{}}}],["toy",{"_index":1242,"title":{},"body":{"index.html":{}}}],["track",{"_index":1247,"title":{},"body":{"index.html":{}}}],["tracking",{"_index":1472,"title":{},"body":{"license.html":{}}}],["trade",{"_index":1579,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":1543,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":1578,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProjectDto.html":{},"classes/LoginUserDto.html":{},"injectables/ProjectService.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"license.html":{}}}],["transformation",{"_index":1432,"title":{},"body":{"license.html":{}}}],["transformer",{"_index":766,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TicketService.html":{},"classes/UpdateTicketDto.html":{},"dependencies.html":{}}}],["translation",{"_index":1433,"title":{},"body":{"license.html":{}}}],["true",{"_index":141,"title":{},"body":{"injectables/AppService.html":{},"classes/CreateTicketDto.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"classes/Ticket.html":{},"injectables/TicketService.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/User.html":{},"miscellaneous/functions.html":{}}}],["true})@apiproperty({description",{"_index":1007,"title":{},"body":{"classes/UpdateTicketDto.html":{}}}],["try",{"_index":684,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["two",{"_index":1183,"title":{},"body":{"miscellaneous/functions.html":{}}}],["type",{"_index":102,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"interfaces/ExpressRequestWithUser.html":{},"interfaces/ExpressRequestWithUser-1.html":{},"interfaces/ExpressRequestWithUser-2.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"classes/ProjectError.html":{},"injectables/ProjectService.html":{},"classes/RegisterUserDto.html":{},"classes/Ticket.html":{},"controllers/TicketController.html":{},"classes/TicketError.html":{},"injectables/TicketService.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":1694,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":323,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"classes/Project.html":{},"classes/Ticket.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"dependencies.html":{},"license.html":{}}}],["types.objectid",{"_index":336,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"classes/Project.html":{},"classes/Ticket.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{}}}],["typically",{"_index":995,"title":{},"body":{"classes/UpdateProjectDto.html":{}}}],["uat",{"_index":872,"title":{},"body":{"classes/Ticket.html":{},"classes/UpdateTicketDto.html":{}}}],["unable",{"_index":867,"title":{},"body":{"classes/Ticket.html":{}}}],["unauthorizedexception",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["unauthorizedexception(\"invalid",{"_index":1111,"title":{},"body":{"injectables/UserService.html":{}}}],["undefined",{"_index":340,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"classes/Project.html":{},"classes/Ticket.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/User.html":{}}}],["undefined})@apiresponse({status",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProjectController.html":{}}}],["under",{"_index":1376,"title":{},"body":{"index.html":{},"license.html":{}}}],["unintended",{"_index":910,"title":{},"body":{"controllers/TicketController.html":{}}}],["union",{"_index":1397,"title":{},"body":{"license.html":{}}}],["unique",{"_index":125,"title":{},"body":{"injectables/AppService.html":{},"classes/RegisterUserDto.html":{},"classes/User.html":{},"miscellaneous/functions.html":{}}}],["unless",{"_index":1566,"title":{},"body":{"license.html":{}}}],["up",{"_index":1174,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["update",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProjectController.html":{},"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"injectables/ProjectService.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["update(@param(\"id",{"_index":706,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["update(id",{"_index":655,"title":{},"body":{"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["update(projectid",{"_index":760,"title":{},"body":{"injectables/ProjectService.html":{}}}],["update(ticketid",{"_index":948,"title":{},"body":{"injectables/TicketService.html":{}}}],["updated",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"classes/UpdateProjectDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["updatedby",{"_index":555,"title":{},"body":{"classes/Project.html":{}}}],["updatedproject",{"_index":707,"title":{},"body":{"controllers/ProjectController.html":{},"injectables/ProjectService.html":{}}}],["updatedticket",{"_index":919,"title":{},"body":{"controllers/TicketController.html":{},"injectables/TicketService.html":{}}}],["updateduser",{"_index":1112,"title":{},"body":{"injectables/UserService.html":{}}}],["updateduser.toobject",{"_index":1114,"title":{},"body":{"injectables/UserService.html":{}}}],["updatefields",{"_index":809,"title":{},"body":{"injectables/ProjectService.html":{}}}],["updatefields[key",{"_index":812,"title":{},"body":{"injectables/ProjectService.html":{}}}],["updateprojectdto",{"_index":656,"title":{"classes/UpdateProjectDto.html":{}},"body":{"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"classes/UpdateProjectDto.html":{},"coverage.html":{}}}],["updateprojectdto.hasownproperty(key",{"_index":811,"title":{},"body":{"injectables/ProjectService.html":{}}}],["updateprojectdto[key",{"_index":813,"title":{},"body":{"injectables/ProjectService.html":{}}}],["updateprojectdto})@apiresponse({status",{"_index":661,"title":{},"body":{"controllers/ProjectController.html":{}}}],["updates",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"classes/UpdateProjectDto.html":{},"injectables/UserService.html":{},"index.html":{}}}],["updateticketdto",{"_index":889,"title":{"classes/UpdateTicketDto.html":{}},"body":{"controllers/TicketController.html":{},"injectables/TicketService.html":{},"classes/UpdateTicketDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["updateuserdto",{"_index":214,"title":{"classes/UpdateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateusername",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["updateusername(@body",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateusername(updateuserdto",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateusername(userid",{"_index":1083,"title":{},"body":{"injectables/UserService.html":{}}}],["updating",{"_index":606,"title":{},"body":{"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"injectables/TicketService.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{}}}],["uploads",{"_index":1341,"title":{},"body":{"index.html":{}}}],["uppercase",{"_index":831,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["uptime",{"_index":467,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["usage",{"_index":908,"title":{},"body":{"controllers/TicketController.html":{},"index.html":{}}}],["use",{"_index":1081,"title":{},"body":{"injectables/UserService.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":134,"title":{},"body":{"injectables/AppService.html":{},"classes/Project.html":{},"classes/RegisterUserDto.html":{},"classes/Ticket.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["useful",{"_index":1231,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["useguards",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["useguards(jwtauthguard",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProjectController.html":{},"controllers/TicketController.html":{}}}],["useguards(jwtauthguard)@put('users/name",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":164,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTicketDto.html":{},"interfaces/ExpressRequestWithUser.html":{},"interfaces/ExpressRequestWithUser-1.html":{},"interfaces/ExpressRequestWithUser-2.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/Project.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"classes/RegisterUserDto.html":{},"classes/Ticket.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ExpressRequestWithUser.html":{},"interfaces/ExpressRequestWithUser-1.html":{},"interfaces/ExpressRequestWithUser-2.html":{},"injectables/JwtStrategy.html":{},"controllers/ProjectController.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.'})@apiresponse({status",{"_index":647,"title":{},"body":{"controllers/ProjectController.html":{}}}],["user._id",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.dto",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":523,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:22",{"_index":845,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:23",{"_index":538,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:37",{"_index":534,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:50",{"_index":843,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:51",{"_index":536,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:62",{"_index":527,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:64",{"_index":824,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:78",{"_index":829,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.name",{"_index":591,"title":{},"body":{"classes/Project.html":{},"classes/Ticket.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.password",{"_index":1110,"title":{},"body":{"injectables/UserService.html":{}}}],["user.save",{"_index":1113,"title":{},"body":{"injectables/UserService.html":{}}}],["user.schema",{"_index":579,"title":{},"body":{"classes/Project.html":{},"classes/Ticket.html":{}}}],["user.service",{"_index":1048,"title":{},"body":{"modules/UserModule.html":{}}}],["user.username",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["user/user.module",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/user.service",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdocument",{"_index":430,"title":{},"body":{"interfaces/ExpressRequestWithUser.html":{},"interfaces/ExpressRequestWithUser-1.html":{},"interfaces/ExpressRequestWithUser-2.html":{},"classes/Project.html":{},"classes/User.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["userid",{"_index":685,"title":{},"body":{"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["usermodel",{"_index":1060,"title":{},"body":{"injectables/UserService.html":{}}}],["usermodule",{"_index":64,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["users",{"_index":498,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/Project.html":{},"classes/Ticket.html":{},"classes/UpdateProjectDto.html":{}}}],["userschema",{"_index":1040,"title":{},"body":{"classes/User.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":234,"title":{"injectables/UserService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userwithoutpassword",{"_index":1101,"title":{},"body":{"injectables/UserService.html":{}}}],["user})@apiresponse({status",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["uses",{"_index":487,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/functions.html":{}}}],["using",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/ProjectController.html":{},"index.html":{},"license.html":{}}}],["usually",{"_index":996,"title":{},"body":{"classes/UpdateProjectDto.html":{}}}],["utils",{"_index":677,"title":{},"body":{"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{}}}],["utils/ticket.utils",{"_index":953,"title":{},"body":{"injectables/TicketService.html":{}}}],["v10.9.2",{"_index":1258,"title":{},"body":{"index.html":{}}}],["v22.14.0",{"_index":1255,"title":{},"body":{"index.html":{}}}],["valid",{"_index":347,"title":{},"body":{"classes/CreateProjectDto.html":{},"controllers/ProjectController.html":{},"injectables/ProjectService.html":{},"classes/RegisterUserDto.html":{},"classes/Ticket.html":{},"injectables/TicketService.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"miscellaneous/functions.html":{}}}],["valid.'})@apiresponse({status",{"_index":638,"title":{},"body":{"controllers/ProjectController.html":{}}}],["validate",{"_index":506,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["validate(payload",{"_index":510,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validated",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["validates",{"_index":504,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["validateuser",{"_index":1055,"title":{},"body":{"injectables/UserService.html":{}}}],["validateuser(loginuserdto",{"_index":1085,"title":{},"body":{"injectables/UserService.html":{}}}],["validating",{"_index":1080,"title":{},"body":{"injectables/UserService.html":{}}}],["validation",{"_index":317,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"classes/LoginUserDto.html":{},"classes/ProjectDoesNotExist.html":{},"classes/ProjectError.html":{},"classes/ProjectIdValidationError.html":{},"classes/ProjectInsufficientPermissionsError.html":{},"classes/ProjectNotModifiedError.html":{},"classes/ProjectRelationConflict.html":{},"classes/ProjectSlugValidationError.html":{},"classes/ProjectUpdateDataValidationError.html":{},"classes/TicketDoesNotExist.html":{},"classes/TicketError.html":{},"classes/TicketIdValidationError.html":{},"classes/TicketInsufficientPermissionsError.html":{},"classes/TicketNotModifiedError.html":{},"classes/TicketRelationConflict.html":{},"classes/TicketSlugValidationError.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["validationerror",{"_index":804,"title":{},"body":{"injectables/ProjectService.html":{}}}],["validationoptions",{"_index":1230,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validator",{"_index":355,"title":{},"body":{"classes/CreateProjectDto.html":{},"classes/CreateTicketDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateProjectDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["validity",{"_index":1228,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validupdate",{"_index":798,"title":{},"body":{"injectables/ProjectService.html":{}}}],["validupdate.createdby",{"_index":802,"title":{},"body":{"injectables/ProjectService.html":{}}}],["validupdate.owner",{"_index":800,"title":{},"body":{"injectables/ProjectService.html":{}}}],["validupdate.validatesync",{"_index":805,"title":{},"body":{"injectables/ProjectService.html":{}}}],["value",{"_index":1699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["values",{"_index":412,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/UpdateTicketDto.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["variable",{"_index":1130,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":105,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/AppService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":446,"title":{},"body":{"controllers/HealthController.html":{}}}],["verbal",{"_index":1464,"title":{},"body":{"license.html":{}}}],["verifying",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":156,"title":{},"body":{"injectables/AppService.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["view",{"_index":759,"title":{},"body":{"injectables/ProjectService.html":{}}}],["warning",{"_index":131,"title":{},"body":{"injectables/AppService.html":{}}}],["warranties",{"_index":1595,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1590,"title":{},"body":{"license.html":{}}}],["web",{"_index":500,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["websockets",{"_index":1325,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":126,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["wherever",{"_index":1552,"title":{},"body":{"license.html":{}}}],["whether",{"_index":585,"title":{},"body":{"classes/Project.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["whole",{"_index":1451,"title":{},"body":{"license.html":{}}}],["within",{"_index":936,"title":{},"body":{"injectables/TicketService.html":{},"license.html":{}}}],["without",{"_index":135,"title":{},"body":{"injectables/AppService.html":{},"license.html":{}}}],["wont",{"_index":873,"title":{},"body":{"classes/Ticket.html":{},"classes/UpdateTicketDto.html":{}}}],["work",{"_index":1043,"title":{},"body":{"classes/User.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["workflows",{"_index":1314,"title":{},"body":{"index.html":{}}}],["works",{"_index":1445,"title":{},"body":{"license.html":{}}}],["worldwide",{"_index":1490,"title":{},"body":{"license.html":{}}}],["write",{"_index":1303,"title":{},"body":{"index.html":{}}}],["writing",{"_index":1480,"title":{},"body":{"license.html":{}}}],["written",{"_index":1465,"title":{},"body":{"license.html":{}}}],["x",{"_index":587,"title":{},"body":{"classes/Project.html":{}}}],["yes",{"_index":1233,"title":{},"body":{"miscellaneous/functions.html":{}}}],["z",{"_index":838,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["zoom",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProjectModule.html":{},"modules/TicketModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                Controller for handling application-level requests and providing information.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getDevInstructions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getDevInstructions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDevInstructions()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:19\n                        \n                    \n\n\n            \n                \n                        Retrieves development instructions for using the API.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                Instructions for developers on how to access the Swagger documentation.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport { AppService } from \"./app.service\";\nimport { ApiTags } from \"@nestjs/swagger\";\n\n/**\n * Controller for handling application-level requests and providing information.\n */\n@ApiTags(\"Information Desk\")\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  /**\n   * Retrieves development instructions for using the API.\n   *\n   * @returns {string} Instructions for developers on how to access the Swagger documentation.\n   */\n  @Get()\n  getDevInstructions(): string {\n    return this.appService.devInstructions;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nProjectModule\n\nProjectModule\n\nAppModule -->\n\nProjectModule->AppModule\n\n\n\n\n\nTicketModule\n\nTicketModule\n\nAppModule -->\n\nTicketModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            ProjectModule\n                        \n                        \n                            TicketModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule } from \"@nestjs/config\";\n\nimport { TicketModule } from \"./ticket/ticket.module\";\nimport { ProjectModule } from \"./project/project.module\";\nimport { AppService } from \"./app.service\";\nimport { AppController } from \"./app.controller\";\nimport { AuthModule } from \"./auth/auth.module\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { UserModule } from \"./user/user.module\";\nimport { HealthModule } from \"./health/health.module\";\n\n@Module({\n  imports: [AuthModule, ConfigModule.forRoot(), MongooseModule.forRoot(process.env.MONGODB_URI), HealthModule, UserModule, TicketModule, ProjectModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for application configuration and environment management.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    port\n                                \n                                \n                                    isDev\n                                \n                                \n                                    devInstructions\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:9\n                            \n                        \n\n                \n                    \n                            Creates an instance of AppService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe configuration service for managing environment variables.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        port\n                    \n                \n\n                \n                    \n                        getport()\n                    \n                \n                            \n                                \n                                    Defined in src/app.service.ts:24\n                                \n                            \n                    \n                        \n                                Gets the port the application will run on.\nIf not specified in the environment variables, defaults to \"3000\".\n\n\n                                \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isDev\n                    \n                \n\n                \n                    \n                        getisDev()\n                    \n                \n                            \n                                \n                                    Defined in src/app.service.ts:40\n                                \n                            \n                    \n                        \n                                Checks if the application is running in development mode.\n\n\n                                \n                                \n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        devInstructions\n                    \n                \n\n                \n                    \n                        getdevInstructions()\n                    \n                \n                            \n                                \n                                    Defined in src/app.service.ts:52\n                                \n                            \n                    \n                        \n                                Provides instructions for using the API based on the environment.\nIn development, it includes a link to the Swagger documentation.\nIn production, it returns a unique welcome message.\nor a welcome message for production mode.\n\n\n                                \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\n/**\n * @class AppService\n * Service responsible for application configuration and environment management.\n */\n@Injectable()\nexport class AppService {\n  /**\n   * Creates an instance of AppService.\n   *\n   * @param {ConfigService} configService - The configuration service for managing environment variables.\n   */\n  constructor(private readonly configService: ConfigService) {}\n\n  /**\n   * Gets the port the application will run on.\n   * If not specified in the environment variables, defaults to \"3000\".\n   *\n   * @returns {string} The port number as a string.\n   * @throws {Warning} Logs a warning if the default port is used without specification in environment variables.\n   */\n  get port(): string {\n    const port = this.configService.get(\"PORT\");\n    const finalPort = port || \"3000\";\n\n    if (finalPort === \"3000\" && !port) {\n      console.warn(`No port specified in environment variables. Using default port ${finalPort}.`);\n    }\n\n    return finalPort;\n  }\n\n  /**\n   * Checks if the application is running in development mode.\n   *\n   * @returns {boolean} True if the NODE_ENV is set to \"development\", false otherwise.\n   */\n  get isDev(): boolean {\n    return this.configService.get(\"NODE_ENV\") === \"development\";\n  }\n\n  /**\n   * Provides instructions for using the API based on the environment.\n   * In development, it includes a link to the Swagger documentation.\n   * In production, it returns a unique welcome message.\n   *\n   * @returns {string} A string containing instructions for developers in development mode,\n   * or a welcome message for production mode.\n   */\n  get devInstructions(): string {\n    if (this.isDev) {\n      return `Welcome to Parchment TMS API.To get started, please refer to the Swagger Documentation here.`;\n    }\n    return `Welcome to the production version of Parchment TMS API. Enjoy the seamless experience!`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1/\n            \n\n\n            \n                Description\n            \n            \n                Controller for user authentication and management, including registration and login.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                register\n                            \n                            \n                                    \n                                    \n                                    Async\n                                updateUserName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginUserDto: LoginUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@ApiResponse({status: 201, description: 'User successfully logged in.', schema: undefined})@ApiResponse({status: 400, description: 'Bad Request.'})@ApiResponse({status: 401, description: 'Invalid credentials.'})@ApiResponse({status: 404, description: 'User not found.'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:90\n                        \n                    \n\n\n            \n                \n                        Authenticates a user and returns a JWT token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                loginUserDto\n                                            \n                                                            LoginUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData transfer object containing login credentials.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to an object containing the access token.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerUserDto: RegisterUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@ApiResponse({status: 201, description: 'User successfully registered.', type: User})@ApiResponse({status: 400, description: 'Bad Request.'})@ApiResponse({status: 409, description: 'User with this username or email already exists.'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:56\n                        \n                    \n\n\n            \n                \n                        Registers a new user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                registerUserDto\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData transfer object containing registration information.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A promise that resolves to the newly registered user's data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        updateUserName\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserName(updateUserDto: UpdateUserDto, req: ExpressRequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Put('users/name')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:105\n                        \n                    \n\n\n            \n                \n                        Updates the user's name.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData transfer object containing the new username information.\n\n\n                                            \n                                        \n                                        \n                                                req\n                                            \n                                                            ExpressRequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request object, which includes the authenticated user data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A promise that resolves to the updated user's data.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Put, Request, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { AuthService } from \"./auth.service\";\nimport { LoginUserDto } from \"./dto/login-user.dto\";\nimport { RegisterUserDto } from \"./dto/register-user.dto\";\nimport { UserService } from \"src/user/user.service\";\nimport { User } from \"src/schemas/user.schema\";\nimport { JwtAuthGuard } from \"./jwt-auth.guard\";\nimport { UpdateUserDto } from \"./dto/update-user.dto\";\nimport { ExpressRequestWithUser } from \"./interfaces/user.interface\";\n\n/**\n * Controller for user authentication and management, including registration and login.\n *\n * @class AuthController\n */\n@ApiBearerAuth()\n@ApiTags(\"Authentication\")\n@Controller(\"/api/v1/\")\nexport class AuthController {\n  /**\n   * Creates an instance of AuthController.\n   *\n   * @param {AuthService} authService - Service for handling authentication logic.\n   * @param {UserService} userService - Service for user-related operations.\n   */\n  constructor(\n    private authService: AuthService,\n    private readonly userService: UserService,\n  ) {}\n\n  /**\n   * Registers a new user.\n   *\n   * @param {RegisterUserDto} registerUserDto - Data transfer object containing registration information.\n   * @returns {Promise>} A promise that resolves to the newly registered user's data.\n   * @throws {BadRequestException} When the request data is invalid.\n   * @throws {ConflictException} When a user with the same username or email already exists.\n   * @method register\n   */\n  @Post(\"register\")\n  @ApiResponse({\n    status: 201,\n    description: \"User successfully registered.\",\n    type: User,\n  })\n  @ApiResponse({\n    status: 400,\n    description: \"Bad Request.\",\n  })\n  @ApiResponse({\n    status: 409,\n    description: \"User with this username or email already exists.\",\n  })\n  async register(@Body() registerUserDto: RegisterUserDto): Promise> {\n    return this.userService.register(registerUserDto);\n  }\n\n  /**\n   * Authenticates a user and returns a JWT token.\n   *\n   * @param {LoginUserDto} loginUserDto - Data transfer object containing login credentials.\n   * @returns {Promise} A promise that resolves to an object containing the access token.\n   * @throws {BadRequestException} When the request data is invalid.\n   * @throws {UnauthorizedException} When the credentials are invalid.\n   * @throws {NotFoundException} When the user is not found.\n   * @method login\n   */\n  @Post(\"login\")\n  @ApiResponse({\n    status: 201,\n    description: \"User successfully logged in.\",\n    schema: {\n      example: { accessToken: \"jwt.token.here\" },\n    },\n  })\n  @ApiResponse({\n    status: 400,\n    description: \"Bad Request.\",\n  })\n  @ApiResponse({\n    status: 401,\n    description: \"Invalid credentials.\",\n  })\n  @ApiResponse({\n    status: 404,\n    description: \"User not found.\",\n  })\n  async login(@Body() loginUserDto: LoginUserDto): Promise {\n    return this.authService.login(loginUserDto);\n  }\n\n  /**\n   * Updates the user's name.\n   *\n   * @param {UpdateUserDto} updateUserDto - Data transfer object containing the new username information.\n   * @param {ExpressRequestWithUser} req - The request object, which includes the authenticated user data.\n   * @returns {Promise>} A promise that resolves to the updated user's data.\n   * @throws {ForbiddenException} When the user is not authorized to update the name.\n   * @method updateUserName\n   */\n  @UseGuards(JwtAuthGuard)\n  @Put(\"users/name\")\n  async updateUserName(@Body() updateUserDto: UpdateUserDto, @Request() req: ExpressRequestWithUser): Promise> {\n    return this.userService.updateUserName(req.user._id, updateUserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { JwtModule } from \"@nestjs/jwt\";\n\nimport { JwtStrategy } from \"./jwt.strategy\";\nimport { UserModule } from \"@/user/user.module\";\nimport { AuthService } from \"./auth.service\";\nimport { AuthController } from \"./auth.controller\";\n\n@Module({\n  imports: [\n    UserModule,\n    JwtModule.register({\n      secret: process.env.JWT_SECRET,\n      signOptions: { expiresIn: \"1h\" },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling user authentication, including login and token generation.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:13\n                            \n                        \n\n                \n                    \n                            Creates an instance of AuthService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for user-related operations.\n\n\n                                                        \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for generating and verifying JWT tokens.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginUserDto: LoginUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Authenticates a user based on login credentials and generates a JWT access token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                loginUserDto\n                                            \n                                                            LoginUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData transfer object containing the user's login credentials (username and password).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to an object containing the generated JWT access token.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { JwtService } from \"@nestjs/jwt\";\n\nimport { UserService } from \"@/user/user.service\";\nimport { LoginUserDto } from \"./dto/login-user.dto\";\n\n/**\n * Service for handling user authentication, including login and token generation.\n *\n * @class AuthService\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Creates an instance of AuthService.\n   *\n   * @param {UserService} userService - Service for user-related operations.\n   * @param {JwtService} jwtService - Service for generating and verifying JWT tokens.\n   */\n  constructor(\n    private userService: UserService,\n    private jwtService: JwtService,\n  ) {}\n\n  /**\n   * Authenticates a user based on login credentials and generates a JWT access token.\n   *\n   * @param {LoginUserDto} loginUserDto - Data transfer object containing the user's login credentials (username and password).\n   * @returns {Promise} A promise that resolves to an object containing the generated JWT access token.\n   * @throws {UnauthorizedException} When the credentials are invalid or the user cannot be validated.\n   * @method login\n   */\n  public async login(loginUserDto: LoginUserDto): Promise {\n    const user = await this.userService.validateUser(loginUserDto);\n    const payload = { username: user.username, sub: user._id };\n    const accessToken = this.jwtService.sign(payload);\n    return { accessToken };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProjectDto.html":{"url":"classes/CreateProjectDto.html","title":"class - CreateProjectDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProjectDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/project/dto/create-project.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO (Data Transfer Object) for creating a new project.\nThis class defines the structure and validation rules for the data required to create a new project.\nIt includes validation decorators to ensure the correct data types and constraints for each field.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                members\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'A brief description of the project', example: 'This is a sample project.'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/project/dto/create-project.dto.ts:46\n                        \n                    \n\n            \n                \n                    A brief description of the project.\nThis field is required and must be a non-empty string.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'List of project members (MongoDB ObjectIds)', example: undefined, required: false})@IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/project/dto/create-project.dto.ts:65\n                        \n                    \n\n            \n                \n                    List of project members.\nThis field is optional and should contain MongoDB ObjectIds for each member of the project.\nIf provided, it must be an array of valid MongoDB ObjectIds.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The name of the project', example: 'New Project'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/project/dto/create-project.dto.ts:29\n                        \n                    \n\n            \n                \n                    The name of the project.\nThis field is required and must be a non-empty string.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsNotEmpty, IsOptional, IsArray } from \"class-validator\";\nimport { Types } from \"mongoose\";\n\n/**\n * DTO (Data Transfer Object) for creating a new project.\n *\n * This class defines the structure and validation rules for the data required to create a new project.\n * It includes validation decorators to ensure the correct data types and constraints for each field.\n *\n * @class CreateProjectDto\n */\nexport class CreateProjectDto {\n  /**\n   * The name of the project.\n   *\n   * This field is required and must be a non-empty string.\n   *\n   * @example 'New Project'\n   * @type {string}\n   * @required\n   */\n  @ApiProperty({\n    description: \"The name of the project\",\n    example: \"New Project\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  /**\n   * A brief description of the project.\n   *\n   * This field is required and must be a non-empty string.\n   *\n   * @example 'This is a sample project.'\n   * @type {string}\n   * @required\n   */\n  @ApiProperty({\n    description: \"A brief description of the project\",\n    example: \"This is a sample project.\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  /**\n   * List of project members.\n   *\n   * This field is optional and should contain MongoDB ObjectIds for each member of the project.\n   * If provided, it must be an array of valid MongoDB ObjectIds.\n   *\n   * @example ['63e4e8d6e92f5e0b6f9a2f33', '63e4e8d6e92f5e0b6f9a2f34']\n   * @optional\n   * @type {Types.ObjectId[]}\n   */\n  @ApiProperty({\n    description: \"List of project members (MongoDB ObjectIds)\",\n    example: [\"63e4e8d6e92f5e0b6f9a2f33\", \"63e4e8d6e92f5e0b6f9a2f34\"],\n    required: false,\n  })\n  @IsOptional()\n  @IsArray()\n  members?: Types.ObjectId[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTicketDto.html":{"url":"classes/CreateTicketDto.html","title":"class - CreateTicketDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTicketDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ticket/dto/create-ticket.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating a ticket.\nThis class defines the structure of the data required to create a new ticket in the system.\nIt includes properties like the ticket's title, description, assignees, project ID, status,\npriority, and due date. The validation rules ensure that the input data meets the necessary criteria.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                assignees\n                            \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                dueDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                priority\n                            \n                            \n                                    \n                                    \n                                    \n                                projectId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        assignees\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The list of assignees for the ticket', type: undefined, example: undefined, required: false})@IsArray()@IsOptional()@IsMongoId({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticket/dto/create-ticket.dto.ts:65\n                        \n                    \n\n            \n                \n                    The list of assignees for the ticket.\nThis is an optional field that contains an array of user IDs assigned to the ticket.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'A detailed description of the ticket', type: String, example: 'The login page does not load after clicking the login button.'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticket/dto/create-ticket.dto.ts:45\n                        \n                    \n\n            \n                \n                    A detailed description of the ticket.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        dueDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The due date for completing the ticket', type: String, format: 'date-time', example: '2024-12-31T23:59:59Z', required: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticket/dto/create-ticket.dto.ts:139\n                        \n                    \n\n            \n                \n                    The due date for completing the ticket.\nThis is an optional field representing the date and time by which the ticket should be completed.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        priority\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The priority of the ticket', type: String, example: 'high', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticket/dto/create-ticket.dto.ts:120\n                        \n                    \n\n            \n                \n                    The priority of the ticket.\nThis is an optional field indicating the priority level of the ticket, which can be 'low', 'medium', or 'high'.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        projectId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the project this ticket belongs to', type: String, example: '507f1f77bcf86cd799439010'})@IsMongoId()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticket/dto/create-ticket.dto.ts:81\n                        \n                    \n\n            \n                \n                    The ID of the project this ticket belongs to.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The current status of the ticket', type: String, example: 'open', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticket/dto/create-ticket.dto.ts:101\n                        \n                    \n\n            \n                \n                    The current status of the ticket.\nThis is an optional field that represents the current status of the ticket. Possible values\ninclude 'open', 'in-progress', 'closed', etc.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The title of the ticket', type: String, example: 'Bug in login page'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticket/dto/create-ticket.dto.ts:29\n                        \n                    \n\n            \n                \n                    The title of the ticket.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsOptional, IsArray, IsMongoId } from \"class-validator\";\nimport { Types } from \"mongoose\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n\n/**\n * DTO for creating a ticket.\n *\n * This class defines the structure of the data required to create a new ticket in the system.\n * It includes properties like the ticket's title, description, assignees, project ID, status,\n * priority, and due date. The validation rules ensure that the input data meets the necessary criteria.\n *\n * @class CreateTicketDto\n */\nexport class CreateTicketDto {\n  /**\n   * The title of the ticket.\n   *\n   * @example 'Bug in login page'\n   * @required\n   * @type {string}\n   */\n  @ApiProperty({\n    description: \"The title of the ticket\",\n    type: String,\n    example: \"Bug in login page\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  /**\n   * A detailed description of the ticket.\n   *\n   * @example 'The login page does not load after clicking the login button.'\n   * @required\n   * @type {string}\n   */\n  @ApiProperty({\n    description: \"A detailed description of the ticket\",\n    type: String,\n    example: \"The login page does not load after clicking the login button.\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  /**\n   * The list of assignees for the ticket.\n   *\n   * This is an optional field that contains an array of user IDs assigned to the ticket.\n   *\n   * @example ['507f1f77bcf86cd799439012', '507f1f77bcf86cd799439013']\n   * @optional\n   * @type {Types.ObjectId[]}\n   */\n  @ApiProperty({\n    description: \"The list of assignees for the ticket\",\n    type: [String],\n    example: [\"507f1f77bcf86cd799439012\", \"507f1f77bcf86cd799439013\"],\n    required: false,\n  })\n  @IsArray()\n  @IsOptional()\n  @IsMongoId({ each: true })\n  assignees?: Types.ObjectId[];\n\n  /**\n   * The ID of the project this ticket belongs to.\n   *\n   * @example '507f1f77bcf86cd799439010'\n   * @required\n   * @type {Types.ObjectId}\n   */\n  @ApiProperty({\n    description: \"The ID of the project this ticket belongs to\",\n    type: String,\n    example: \"507f1f77bcf86cd799439010\",\n  })\n  @IsMongoId()\n  @IsNotEmpty()\n  projectId: Types.ObjectId;\n\n  /**\n   * The current status of the ticket.\n   *\n   * This is an optional field that represents the current status of the ticket. Possible values\n   * include 'open', 'in-progress', 'closed', etc.\n   *\n   * @example 'open'\n   * @optional\n   * @type {string}\n   */\n  @ApiProperty({\n    description: \"The current status of the ticket\",\n    type: String,\n    example: \"open\",\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  status?: string;\n\n  /**\n   * The priority of the ticket.\n   *\n   * This is an optional field indicating the priority level of the ticket, which can be 'low', 'medium', or 'high'.\n   *\n   * @example 'high'\n   * @optional\n   * @type {string}\n   */\n  @ApiProperty({\n    description: \"The priority of the ticket\",\n    type: String,\n    example: \"high\",\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  priority?: string;\n\n  /**\n   * The due date for completing the ticket.\n   *\n   * This is an optional field representing the date and time by which the ticket should be completed.\n   *\n   * @example '2024-12-31T23:59:59Z'\n   * @optional\n   * @type {Date}\n   */\n  @ApiProperty({\n    description: \"The due date for completing the ticket\",\n    type: String,\n    format: \"date-time\",\n    example: \"2024-12-31T23:59:59Z\",\n    required: false,\n  })\n  @IsOptional()\n  dueDate?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExpressRequestWithUser.html":{"url":"interfaces/ExpressRequestWithUser.html","title":"interface - ExpressRequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ExpressRequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/user.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Extends the Express Request object to include the authenticated user's information.\n\n            \n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         UserDocument\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserDocument\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The user associated with the request, represented as a UserDocument.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { UserDocument } from \"@/schemas/user.schema\";\n\n/**\n * Extends the Express Request object to include the authenticated user's information.\n *\n * @interface ExpressRequestWithUser\n */\nexport interface ExpressRequestWithUser extends Request {\n  /**\n   * The user associated with the request, represented as a UserDocument.\n   *\n   * @type {UserDocument}\n   */\n  user: UserDocument;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExpressRequestWithUser-1.html":{"url":"interfaces/ExpressRequestWithUser-1.html","title":"interface - ExpressRequestWithUser-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ExpressRequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/project/interfaces/project.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Extends the Express Request object to include the authenticated user's information.\n\n            \n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         UserDocument\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserDocument\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The user associated with the request, represented as a UserDocument.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { UserDocument } from \"@/schemas/user.schema\";\n\n/**\n * Extends the Express Request object to include the authenticated user's information.\n *\n * @interface ExpressRequestWithUser\n */\nexport interface ExpressRequestWithUser extends Request {\n  /**\n   * The user associated with the request, represented as a UserDocument.\n   *\n   * @type {UserDocument}\n   */\n  user: UserDocument;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExpressRequestWithUser-2.html":{"url":"interfaces/ExpressRequestWithUser-2.html","title":"interface - ExpressRequestWithUser-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ExpressRequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ticket/interfaces/ticket.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Extends the Express Request object to include the authenticated user's information.\n\n            \n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         UserDocument\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserDocument\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The user associated with the request, represented as a UserDocument.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { UserDocument } from \"@/schemas/user.schema\";\n\n/**\n * Extends the Express Request object to include the authenticated user's information.\n *\n * @interface ExpressRequestWithUser\n */\nexport interface ExpressRequestWithUser extends Request {\n  /**\n   * The user associated with the request, represented as a UserDocument.\n   *\n   * @type {UserDocument}\n   */\n  user: UserDocument;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n            \n                Description\n            \n            \n                Controller for health check endpoints.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        check\n                        \n                    \n                \n            \n            \n                \n                        \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:47\n                        \n                    \n\n\n            \n                \n                        Performs health checks for various services including HTTP, MongoDB, memory, and disk.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to the health check result.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport { ApiTags } from \"@nestjs/swagger\";\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  HealthCheck,\n  MongooseHealthIndicator,\n  MemoryHealthIndicator,\n  DiskHealthIndicator,\n  HealthIndicatorResult,\n  HealthCheckResult,\n} from \"@nestjs/terminus\";\n\n/**\n * Controller for health check endpoints.\n *\n * @class HealthController\n */\n@ApiTags(\"hEaLtH\")\n@Controller(\"health\")\nexport class HealthController {\n  /**\n   * Creates an instance of HealthController.\n   *\n   * @param {HealthCheckService} health - Service for health checks.\n   * @param {HttpHealthIndicator} http - Indicator for HTTP health checks.\n   * @param {MongooseHealthIndicator} mongoDb - Indicator for MongoDB health checks.\n   * @param {MemoryHealthIndicator} memory - Indicator for memory health checks.\n   * @param {DiskHealthIndicator} disk - Indicator for disk health checks.\n   */\n  constructor(\n    private health: HealthCheckService,\n    private http: HttpHealthIndicator,\n    private mongoDb: MongooseHealthIndicator,\n    private memory: MemoryHealthIndicator,\n    private disk: DiskHealthIndicator,\n  ) {}\n\n  /**\n   * Performs health checks for various services including HTTP, MongoDB, memory, and disk.\n   *\n   * @returns {Promise} A promise that resolves to the health check result.\n   * @method check\n   */\n  @Get()\n  @HealthCheck()\n  check(): Promise {\n    return this.health.check([\n      (): Promise => this.http.pingCheck(\"uptime\", \"https://betterstack.com/better-uptime\"),\n      (): Promise => this.mongoDb.pingCheck(\"mongodb\", { timeout: 5000 }),\n      (): Promise => this.memory.checkRSS(\"memory_rss\", 300 * 1024 * 1024),\n      (): Promise => this.memory.checkHeap(\"memory_heap\", 300 * 1024 * 1024),\n      (): Promise =>\n        this.disk.checkStorage(\"storage\", {\n          path: \"/\",\n          threshold: 128 * 1024 * 1024 * 1024,\n        }),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { HttpModule } from \"@nestjs/axios\";\n\nimport { HealthController } from \"./health.controller\";\n\n@Module({\n  imports: [TerminusModule, HttpModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                This guard uses the Passport JWT strategy to authenticate requests.\n\n            \n\n            \n                Extends\n            \n            \n                        AuthGuard(\"JWT Strategy\")\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n/**\n * @class JwtAuthGuard\n * @extends AuthGuard\n * @description Guard for protecting routes using JWT authentication.\n * This guard uses the Passport JWT strategy to authenticate requests.\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard(\"JWT Strategy\") {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Strategy for authenticating users using JSON Web Tokens (JWT).\nThis strategy extracts the JWT from the authorization header and validates it.\n\n            \n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, \"JWT Strategy\")\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:15\n                            \n                        \n\n                \n                    \n                            Creates an instance of JwtStrategy.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for retrieving user information from the database.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:38\n                        \n                    \n\n\n            \n                \n                        Validates the JWT payload and retrieves the associated user from the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe JWT payload containing the user's information.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the authenticated user object.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { User } from \"src/schemas/user.schema\";\nimport { UserService } from \"src/user/user.service\";\nimport { Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { ExtractJwt, Strategy } from \"passport-jwt\";\n\n/**\n * Strategy for authenticating users using JSON Web Tokens (JWT).\n * This strategy extracts the JWT from the authorization header and validates it.\n *\n * @class JwtStrategy\n * @extends PassportStrategy\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, \"JWT Strategy\") {\n  /**\n   * Creates an instance of JwtStrategy.\n   *\n   * @constructor\n   * @param {UserService} userService - Service for retrieving user information from the database.\n   */\n  constructor(private readonly userService: UserService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n\n  /**\n   * Validates the JWT payload and retrieves the associated user from the database.\n   *\n   * @method validate\n   * @param {{ sub: string; username: string }} payload - The JWT payload containing the user's information.\n   * @returns {Promise} A promise that resolves to the authenticated user object.\n   * @throws {UnauthorizedException} When the user associated with the JWT is not found.\n   */\n  public async validate(payload: { sub: string; username: string }): Promise {\n    const user = await this.userService.findByUsername(payload.username);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This DTO requires either a username or an email and a password to authenticate a user.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                _hasUsernameOrEmail\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        _hasUsernameOrEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @hasUsernameOrEmail({message: 'Either username or email must be provided.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:62\n                        \n                    \n\n            \n                \n                    This is an internal property for validation logic and should not be set directly by the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email for the user account. Provide either username or email.', example: 'john_doe@example.com'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:37\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Password for the user account', example: 'StrongP@ssw0rd!'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:51\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Username for the user account. Provide either username or email.', example: 'john_doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:23\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNotEmpty, IsOptional, IsString } from \"class-validator\";\nimport { hasUsernameOrEmail } from \"../decorators/hasUsernameOrEmail.decorator\";\n\n/**\n * @class LoginUserDto\n * @description Data transfer object for user login credentials.\n * This DTO requires either a username or an email and a password to authenticate a user.\n */\nexport class LoginUserDto {\n  /**\n   * @property {string} [username]\n   * @description Username for the user account. Provide either username or email.\n   * @example \"john_doe\"\n   * @optional\n   */\n  @ApiProperty({\n    description: \"Username for the user account. Provide either username or email.\",\n    example: \"john_doe\",\n  })\n  @IsString()\n  @IsOptional()\n  username?: string;\n\n  /**\n   * @property {string} [email]\n   * @description Email for the user account. Provide either username or email.\n   * @example \"john_doe@example.com\"\n   * @optional\n   */\n  @ApiProperty({\n    description: \"Email for the user account. Provide either username or email.\",\n    example: \"john_doe@example.com\",\n  })\n  @IsString()\n  @IsOptional()\n  email?: string;\n\n  /**\n   * @property {string} password\n   * @description Password for the user account. This field is required for authentication.\n   * @example \"StrongP@ssw0rd!\"\n   * @required\n   */\n  @ApiProperty({\n    description: \"Password for the user account\",\n    example: \"StrongP@ssw0rd!\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n\n  /**\n   * @property {string} [_hasUsernameOrEmail]\n   * @description Custom validation decorator to ensure either username or email must be provided.\n   * This is an internal property for validation logic and should not be set directly by the user.\n   * @optional\n   */\n  @hasUsernameOrEmail({\n    message: \"Either username or email must be provided.\",\n  })\n  _hasUsernameOrEmail?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Project.html":{"url":"classes/Project.html","title":"class - Project","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Project\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/project.schema.ts\n        \n\n\n            \n                Description\n            \n            \n                Project Schema represents the structure of a project in the database.\nThis schema defines the project properties, such as name, description, owner, members, and tickets,\nalong with relationships to the User and Ticket models.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdBy\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                members\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                owner\n                            \n                            \n                                    \n                                tickets\n                            \n                            \n                                    \n                                updatedBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserDocument\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: 'ObjectId', ref: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/project.schema.ts:83\n                        \n                    \n\n            \n                \n                    The user who created the project.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/project.schema.ts:48\n                        \n                    \n\n            \n                \n                    A description of the project.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/project.schema.ts:74\n                        \n                    \n\n            \n                \n                    A flag that indicates if the project is active or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop(['undefined'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/project.schema.ts:66\n                        \n                    \n\n            \n                \n                    An array of IDs of users who are members of the project.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/project.schema.ts:39\n                        \n                    \n\n            \n                \n                    The name of the project.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/project.schema.ts:57\n                        \n                    \n\n            \n                \n                    The ID of the user who owns the project.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tickets\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/project.schema.ts:103\n                        \n                    \n\n            \n                \n                    An array of ticket IDs associated with the project.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserDocument\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: 'ObjectId', ref: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/project.schema.ts:92\n                        \n                    \n\n            \n                \n                    The user who last updated the project.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Document, Types } from \"mongoose\";\nimport { User, UserDocument } from \"./user.schema\";\nimport { Ticket } from \"./ticket.schema\";\nimport { forwardRef } from \"@nestjs/common\";\n\n/**\n * ProjectDocument type that combines the Project class with Mongoose Document.\n *\n * @extends Document\n */\nexport type ProjectDocument = Project & Document;\n\n/**\n * Project Schema represents the structure of a project in the database.\n *\n * This schema defines the project properties, such as `name`, `description`, `owner`, `members`, and `tickets`,\n * along with relationships to the `User` and `Ticket` models.\n *\n * @class Project\n * @property {string} name - The name of the project.\n * @property {string} description - A brief description of the project.\n * @property {Types.ObjectId} owner - The ID of the user who owns the project.\n * @property {Types.ObjectId[]} members - An array of IDs of users who are members of the project.\n * @property {boolean} isActive - A flag to indicate whether the project is active or not.\n * @property {UserDocument} createdBy - The user who created the project.\n * @property {UserDocument} [updatedBy] - The user who last updated the project (optional).\n * @property {Types.ObjectId[]} tickets - An array of ticket IDs associated with the project.\n */\n@Schema({ timestamps: true })\nexport class Project {\n  /**\n   * The name of the project.\n   *\n   * @example \"Project X\"\n   * @required\n   */\n  @Prop({ required: true })\n  name: string;\n\n  /**\n   * A description of the project.\n   *\n   * @example \"A project to manage user tasks\"\n   * @required\n   */\n  @Prop({ required: true })\n  description: string;\n\n  /**\n   * The ID of the user who owns the project.\n   *\n   * @example \"60c72b2f5b1b2c6f5e8c9999\"\n   * @required\n   */\n  @Prop({ type: Types.ObjectId, ref: User.name, required: true })\n  owner: Types.ObjectId;\n\n  /**\n   * An array of IDs of users who are members of the project.\n   *\n   * @example [\"60c72b2f5b1b2c6f5e8c8888\", \"60c72b2f5b1b2c6f5e8c7777\"]\n   * @optional\n   */\n  @Prop([{ type: Types.ObjectId, ref: User.name }])\n  members: Types.ObjectId[];\n\n  /**\n   * A flag that indicates if the project is active or not.\n   *\n   * @default true\n   */\n  @Prop({ default: true })\n  isActive: boolean;\n\n  /**\n   * The user who created the project.\n   *\n   * @example \"60c72b2f5b1b2c6f5e8c6666\"\n   * @required\n   */\n  @Prop({ type: \"ObjectId\", ref: User.name, required: true })\n  createdBy: UserDocument;\n\n  /**\n   * The user who last updated the project.\n   *\n   * @example \"60c72b2f5b1b2c6f5e8c5555\"\n   * @optional\n   */\n  @Prop({ type: \"ObjectId\", ref: User.name })\n  updatedBy: UserDocument;\n\n  /**\n   * An array of ticket IDs associated with the project.\n   *\n   * @example [\"60c72b2f5b1b2c6f5e8c4444\", \"60c72b2f5b1b2c6f5e8c3333\"]\n   * @optional\n   */\n  @Prop({\n    type: [{ type: Types.ObjectId, ref: forwardRef(() => Ticket.name) }],\n  })\n  tickets: Types.ObjectId[];\n}\n\n/**\n * ProjectSchema is the Mongoose schema for the `Project` class.\n *\n * This schema is used by Mongoose to interact with the database.\n *\n * @constant ProjectSchema\n */\nexport const ProjectSchema = SchemaFactory.createForClass(Project);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProjectController.html":{"url":"controllers/ProjectController.html","title":"controller - ProjectController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProjectController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/project/project.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1/projects\n            \n\n\n            \n                Description\n            \n            \n                Controller class for managing project-related operations.\nProvides endpoints for creating, updating, retrieving, and deleting projects.\nThe controller is protected by JWT authentication and provides responses based on the success or failure of the requested operation.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createProjectDto: CreateProjectDto, req: ExpressRequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('')@ApiOperation({summary: 'Create a new project', description: 'Create a new project with the specified details.'})@ApiBody({description: 'Data required to create a project', type: CreateProjectDto})@ApiResponse({status: 201, description: 'Indicates, the project was successfully created.', type: Project})@ApiResponse({status: 400, description: 'Invalid data provided.'})@ApiResponse({status: 401, description: 'Indicates that the user is not authorized.'})@ApiResponse({status: 409, description: 'Indicates, the project already exists.'})@ApiResponse({status: 500, description: 'Indicates, the request failed.'})@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/project/project.controller.ts:143\n                        \n                    \n\n\n            \n                \n                        Creates a new project.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createProjectDto\n                                            \n                                                            CreateProjectDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data required to create a project.\n\n\n                                            \n                                        \n                                        \n                                                req\n                                            \n                                                            ExpressRequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request object containing the authenticated user's details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe response object containing the result of the operation and the created project.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string, req: ExpressRequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete a project by ID', description: 'Remove a project from the system using its ID.'})@ApiParam({name: 'id', description: 'The ID of the project to delete.', type: String})@ApiResponse({status: 200, description: 'The project was successfully deleted.'})@ApiResponse({status: 400, description: 'Project id was not valid.'})@ApiResponse({status: 401, description: 'Indicates that the user is not authorized.'})@ApiResponse({status: 404, description: 'Project not found.'})@ApiResponse({status: 500, description: 'Indicates, the request failed.'})@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/project/project.controller.ts:254\n                        \n                    \n\n\n            \n                \n                        Deletes a project by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the project to delete.\n\n\n                                            \n                                        \n                                        \n                                                req\n                                            \n                                                            ExpressRequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request object containing the authenticated user's details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe response object containing the result of the operation.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(req: ExpressRequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Retrieve all projects', description: 'Fetch all projects accessible to the authenticated user.'})@ApiResponse({status: 200, description: 'List of projects retrieved successfully.', type: undefined})@ApiResponse({status: 401, description: 'Indicates that the user is not authorized.'})@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/project/project.controller.ts:45\n                        \n                    \n\n\n            \n                \n                        Retrieves all projects the authenticated user has access to.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ExpressRequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request object containing the authenticated user's details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nList of projects accessible by the user.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string, req: ExpressRequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Retrieve a single project by ID', description: 'Fetch details of a project using its ID.'})@ApiParam({name: 'id', description: 'The ID of the project to retrieve.', type: String})@ApiResponse({status: 200, description: 'Project retrieved successfully.', type: Project})@ApiResponse({status: 400, description: 'Project id was not valid.'})@ApiResponse({status: 401, description: 'Indicates that the user is not authorized.'})@ApiResponse({status: 404, description: 'Project not found.'})@ApiResponse({status: 500, description: 'Indicates, the request failed.'})@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/project/project.controller.ts:95\n                        \n                    \n\n\n            \n                \n                        Retrieves a single project by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the project to retrieve.\n\n\n                                            \n                                        \n                                        \n                                                req\n                                            \n                                                            ExpressRequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request object containing the authenticated user's details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe requested project.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateProjectDto: UpdateProjectDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update a project by ID', description: 'Update details of a project using its ID.'})@ApiParam({name: 'id', description: 'The ID of the project to update.', type: String})@ApiBody({description: 'Data required to update a project. Fields can be partial.', type: UpdateProjectDto})@ApiResponse({status: 200, description: 'The project was successfully updated.', type: Project})@ApiResponse({status: 400, description: 'Invalid data provided.'})@ApiResponse({status: 401, description: 'Indicates that the user is not authorized.'})@ApiResponse({status: 404, description: 'Project not found.'})@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/project/project.controller.ts:206\n                        \n                    \n\n\n            \n                \n                        Updates an existing project.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the project to update.\n\n\n                                            \n                                        \n                                        \n                                                updateProjectDto\n                                            \n                                                            UpdateProjectDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data required to update the project.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe updated project.\n\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete, UseGuards, Request } from \"@nestjs/common\";\nimport { ProjectService } from \"./project.service\";\nimport { CreateProjectDto } from \"./dto/create-project.dto\";\nimport { UpdateProjectDto } from \"./dto/update-project.dto\";\nimport { ApiBearerAuth, ApiBody, ApiOperation, ApiResponse, ApiParam, ApiTags } from \"@nestjs/swagger\";\nimport { Project } from \"@/schemas/project.schema\";\nimport { JwtAuthGuard } from \"@/auth/jwt-auth.guard\";\nimport { ExpressRequestWithUser } from \"./interfaces/project.interface\";\nimport { handleDomainErrors } from \"@/utils\";\n\n/**\n * Controller class for managing project-related operations.\n * Provides endpoints for creating, updating, retrieving, and deleting projects.\n * The controller is protected by JWT authentication and provides responses based on the success or failure of the requested operation.\n */\n@ApiBearerAuth()\n@ApiTags(\"Project Management\")\n@Controller(\"/api/v1/projects\")\nexport class ProjectController {\n  constructor(private readonly projectService: ProjectService) {}\n\n  /**\n   * Retrieves all projects the authenticated user has access to.\n   *\n   * @param {ExpressRequestWithUser} req - The request object containing the authenticated user's details.\n   * @returns {Promise} - List of projects accessible by the user.\n   * @throws {ProjectDoesNotExist} - Throws if no projects are found.\n   * @throws {JwtAuthGuard} - Throws if authentication fails.\n   */\n  @Get()\n  @ApiOperation({\n    summary: \"Retrieve all projects\",\n    description: \"Fetch all projects accessible to the authenticated user.\",\n  })\n  @ApiResponse({\n    status: 200,\n    description: \"List of projects retrieved successfully.\",\n    type: [Project],\n  })\n  @ApiResponse({\n    status: 401,\n    description: \"Indicates that the user is not authorized.\",\n  })\n  @UseGuards(JwtAuthGuard)\n  async findAll(@Request() req: ExpressRequestWithUser): Promise {\n    try {\n      const userId = req.user._id;\n      req.user = null;\n      const projects = await this.projectService.findAll(userId);\n      return projects;\n    } catch (error) {\n      handleDomainErrors(error);\n    }\n  }\n\n  /**\n   * Retrieves a single project by its ID.\n   *\n   * @param {string} id - The ID of the project to retrieve.\n   * @param {ExpressRequestWithUser} req - The request object containing the authenticated user's details.\n   * @returns {Promise} - The requested project.\n   * @throws {ProjectIdValidationError} - Throws if the provided project ID is invalid.\n   * @throws {ProjectDoesNotExist} - Throws if the project is not found.\n   * @throws {JwtAuthGuard} - Throws if authentication fails.\n   */\n  @Get(\":id\")\n  @ApiOperation({\n    summary: \"Retrieve a single project by ID\",\n    description: \"Fetch details of a project using its ID.\",\n  })\n  @ApiParam({\n    name: \"id\",\n    description: \"The ID of the project to retrieve.\",\n    type: String,\n  })\n  @ApiResponse({\n    status: 200,\n    description: \"Project retrieved successfully.\",\n    type: Project,\n  })\n  @ApiResponse({\n    status: 400,\n    description: \"Project id was not valid.\",\n  })\n  @ApiResponse({\n    status: 401,\n    description: \"Indicates that the user is not authorized.\",\n  })\n  @ApiResponse({\n    status: 404,\n    description: \"Project not found.\",\n  })\n  @ApiResponse({ status: 500, description: \"Indicates, the request failed.\" })\n  @UseGuards(JwtAuthGuard)\n  async findOne(@Param(\"id\") id: string, @Request() req: ExpressRequestWithUser): Promise {\n    try {\n      const userId = req.user._id;\n      req.user = null;\n      const project = await this.projectService.findOne(id, userId);\n      return project;\n    } catch (error) {\n      handleDomainErrors(error);\n    }\n  }\n\n  /**\n   * Creates a new project.\n   *\n   * @param {CreateProjectDto} createProjectDto - The data required to create a project.\n   * @param {ExpressRequestWithUser} req - The request object containing the authenticated user's details.\n   * @returns {Promise} - The response object containing the result of the operation and the created project.\n   * @throws {ProjectRelationConflict} - Throws if the project already exists.\n   * @throws {JwtAuthGuard} - Throws if authentication fails.\n   */\n  @Post(\"\")\n  @ApiOperation({\n    summary: \"Create a new project\",\n    description: \"Create a new project with the specified details.\",\n  })\n  @ApiBody({\n    description: \"Data required to create a project\",\n    type: CreateProjectDto,\n  })\n  @ApiResponse({\n    status: 201,\n    description: \"Indicates, the project was successfully created.\",\n    type: Project,\n  })\n  @ApiResponse({\n    status: 400,\n    description: \"Invalid data provided.\",\n  })\n  @ApiResponse({\n    status: 401,\n    description: \"Indicates that the user is not authorized.\",\n  })\n  @ApiResponse({\n    status: 409,\n    description: \"Indicates, the project already exists.\",\n  })\n  @ApiResponse({ status: 500, description: \"Indicates, the request failed.\" })\n  @UseGuards(JwtAuthGuard)\n  async create(\n    @Body() createProjectDto: CreateProjectDto,\n    @Request() req: ExpressRequestWithUser,\n  ): Promise {\n    try {\n      const userId = req.user._id;\n      req.user = null;\n      const createdProject = await this.projectService.create(createProjectDto, userId);\n      return {\n        result: \"success\",\n        project: createdProject,\n      };\n    } catch (error) {\n      handleDomainErrors(error);\n    }\n  }\n\n  /**\n   * Updates an existing project.\n   *\n   * @param {string} id - The ID of the project to update.\n   * @param {UpdateProjectDto} updateProjectDto - The data required to update the project.\n   * @returns {Promise} - The updated project.\n   * @throws {ProjectIdValidationError} - Throws if the provided project ID is invalid.\n   * @throws {ProjectDoesNotExist} - Throws if the project is not found.\n   * @throws {ProjectNotModifiedError} - Throws if no changes were made during the update.\n   * @throws {JwtAuthGuard} - Throws if authentication fails.\n   */\n  @Patch(\":id\")\n  @ApiOperation({\n    summary: \"Update a project by ID\",\n    description: \"Update details of a project using its ID.\",\n  })\n  @ApiParam({\n    name: \"id\",\n    description: \"The ID of the project to update.\",\n    type: String,\n  })\n  @ApiBody({\n    description: \"Data required to update a project. Fields can be partial.\",\n    type: UpdateProjectDto,\n  })\n  @ApiResponse({\n    status: 200,\n    description: \"The project was successfully updated.\",\n    type: Project,\n  })\n  @ApiResponse({\n    status: 400,\n    description: \"Invalid data provided.\",\n  })\n  @ApiResponse({\n    status: 401,\n    description: \"Indicates that the user is not authorized.\",\n  })\n  @ApiResponse({\n    status: 404,\n    description: \"Project not found.\",\n  })\n  @UseGuards(JwtAuthGuard)\n  async update(@Param(\"id\") id: string, @Body() updateProjectDto: UpdateProjectDto): Promise {\n    try {\n      const updatedProject = await this.projectService.update(id, updateProjectDto);\n      return updatedProject;\n    } catch (error) {\n      handleDomainErrors(error);\n    }\n  }\n\n  /**\n   * Deletes a project by its ID.\n   *\n   * @param {string} id - The ID of the project to delete.\n   * @param {ExpressRequestWithUser} req - The request object containing the authenticated user's details.\n   * @returns {Promise} - The response object containing the result of the operation.\n   * @throws {ProjectIdValidationError} - Throws if the provided project ID is invalid.\n   * @throws {ProjectDoesNotExist} - Throws if the project is not found.\n   * @throws {ProjectInsufficientPermissionsError} - Throws if the user is not authorized to delete the project.\n   * @throws {JwtAuthGuard} - Throws if authentication fails.\n   */\n  @Delete(\":id\")\n  @ApiOperation({\n    summary: \"Delete a project by ID\",\n    description: \"Remove a project from the system using its ID.\",\n  })\n  @ApiParam({\n    name: \"id\",\n    description: \"The ID of the project to delete.\",\n    type: String,\n  })\n  @ApiResponse({\n    status: 200,\n    description: \"The project was successfully deleted.\",\n  })\n  @ApiResponse({\n    status: 400,\n    description: \"Project id was not valid.\",\n  })\n  @ApiResponse({\n    status: 401,\n    description: \"Indicates that the user is not authorized.\",\n  })\n  @ApiResponse({\n    status: 404,\n    description: \"Project not found.\",\n  })\n  @ApiResponse({ status: 500, description: \"Indicates, the request failed.\" })\n  @UseGuards(JwtAuthGuard)\n  async delete(@Param(\"id\") id: string, @Request() req: ExpressRequestWithUser): Promise {\n    try {\n      const userId = req.user._id;\n      req.user = null;\n      await this.projectService.delete(id, userId);\n      return { result: \"success\" };\n    } catch (error) {\n      handleDomainErrors(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProjectDoesNotExist.html":{"url":"classes/ProjectDoesNotExist.html","title":"class - ProjectDoesNotExist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProjectDoesNotExist\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/project/project.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for project not existing.\n\n            \n\n            \n                Extends\n            \n            \n                            ProjectError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ProjectError extends Error {\n  /**\n   * Creates an instance of ProjectError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for project relation conflicts.\n * @class\n * @extends ProjectError\n */\nexport class ProjectRelationConflict extends ProjectError {}\n\n/**\n * Error class for project not existing.\n * @class\n * @extends ProjectError\n */\nexport class ProjectDoesNotExist extends ProjectError {}\n\n/**\n * Error class for project slug validation errors.\n * @class\n * @extends ProjectError\n */\nexport class ProjectSlugValidationError extends ProjectError {}\n\n/**\n * Error class for project ID validation errors.\n * @class\n * @extends ProjectError\n */\nexport class ProjectIdValidationError extends ProjectError {}\n\n/**\n * Error class for project insufficient permissions.\n * @class\n * @extends ProjectError\n */\nexport class ProjectInsufficientPermissionsError extends ProjectError {}\n\n/**\n * Error class for project not being modified.\n * @class\n * @extends ProjectError\n */\nexport class ProjectNotModifiedError extends ProjectError {}\n\n/**\n * Error class for project provided update data being invalid.\n * @class\n * @extends ProjectError\n */\nexport class ProjectUpdateDataValidationError extends ProjectError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProjectError.html":{"url":"classes/ProjectError.html","title":"class - ProjectError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProjectError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/project/project.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom error class for project-related errors.\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/project/project.errors.ts:5\n                            \n                        \n\n                \n                    \n                            Creates an instance of ProjectError.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe error message.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ProjectError extends Error {\n  /**\n   * Creates an instance of ProjectError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for project relation conflicts.\n * @class\n * @extends ProjectError\n */\nexport class ProjectRelationConflict extends ProjectError {}\n\n/**\n * Error class for project not existing.\n * @class\n * @extends ProjectError\n */\nexport class ProjectDoesNotExist extends ProjectError {}\n\n/**\n * Error class for project slug validation errors.\n * @class\n * @extends ProjectError\n */\nexport class ProjectSlugValidationError extends ProjectError {}\n\n/**\n * Error class for project ID validation errors.\n * @class\n * @extends ProjectError\n */\nexport class ProjectIdValidationError extends ProjectError {}\n\n/**\n * Error class for project insufficient permissions.\n * @class\n * @extends ProjectError\n */\nexport class ProjectInsufficientPermissionsError extends ProjectError {}\n\n/**\n * Error class for project not being modified.\n * @class\n * @extends ProjectError\n */\nexport class ProjectNotModifiedError extends ProjectError {}\n\n/**\n * Error class for project provided update data being invalid.\n * @class\n * @extends ProjectError\n */\nexport class ProjectUpdateDataValidationError extends ProjectError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProjectIdValidationError.html":{"url":"classes/ProjectIdValidationError.html","title":"class - ProjectIdValidationError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProjectIdValidationError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/project/project.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for project ID validation errors.\n\n            \n\n            \n                Extends\n            \n            \n                            ProjectError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ProjectError extends Error {\n  /**\n   * Creates an instance of ProjectError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for project relation conflicts.\n * @class\n * @extends ProjectError\n */\nexport class ProjectRelationConflict extends ProjectError {}\n\n/**\n * Error class for project not existing.\n * @class\n * @extends ProjectError\n */\nexport class ProjectDoesNotExist extends ProjectError {}\n\n/**\n * Error class for project slug validation errors.\n * @class\n * @extends ProjectError\n */\nexport class ProjectSlugValidationError extends ProjectError {}\n\n/**\n * Error class for project ID validation errors.\n * @class\n * @extends ProjectError\n */\nexport class ProjectIdValidationError extends ProjectError {}\n\n/**\n * Error class for project insufficient permissions.\n * @class\n * @extends ProjectError\n */\nexport class ProjectInsufficientPermissionsError extends ProjectError {}\n\n/**\n * Error class for project not being modified.\n * @class\n * @extends ProjectError\n */\nexport class ProjectNotModifiedError extends ProjectError {}\n\n/**\n * Error class for project provided update data being invalid.\n * @class\n * @extends ProjectError\n */\nexport class ProjectUpdateDataValidationError extends ProjectError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProjectInsufficientPermissionsError.html":{"url":"classes/ProjectInsufficientPermissionsError.html","title":"class - ProjectInsufficientPermissionsError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProjectInsufficientPermissionsError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/project/project.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for project insufficient permissions.\n\n            \n\n            \n                Extends\n            \n            \n                            ProjectError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ProjectError extends Error {\n  /**\n   * Creates an instance of ProjectError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for project relation conflicts.\n * @class\n * @extends ProjectError\n */\nexport class ProjectRelationConflict extends ProjectError {}\n\n/**\n * Error class for project not existing.\n * @class\n * @extends ProjectError\n */\nexport class ProjectDoesNotExist extends ProjectError {}\n\n/**\n * Error class for project slug validation errors.\n * @class\n * @extends ProjectError\n */\nexport class ProjectSlugValidationError extends ProjectError {}\n\n/**\n * Error class for project ID validation errors.\n * @class\n * @extends ProjectError\n */\nexport class ProjectIdValidationError extends ProjectError {}\n\n/**\n * Error class for project insufficient permissions.\n * @class\n * @extends ProjectError\n */\nexport class ProjectInsufficientPermissionsError extends ProjectError {}\n\n/**\n * Error class for project not being modified.\n * @class\n * @extends ProjectError\n */\nexport class ProjectNotModifiedError extends ProjectError {}\n\n/**\n * Error class for project provided update data being invalid.\n * @class\n * @extends ProjectError\n */\nexport class ProjectUpdateDataValidationError extends ProjectError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProjectModule.html":{"url":"modules/ProjectModule.html","title":"module - ProjectModule","body":"\n                   \n\n\n\n\n    Modules\n    ProjectModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProjectModule\n\n\n\ncluster_ProjectModule_providers\n\n\n\n\nProjectService\n\nProjectService\n\n\n\nProjectModule\n\nProjectModule\n\nProjectModule -->\n\nProjectService->ProjectModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/project/project.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProjectService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProjectController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ProjectService } from \"./project.service\";\nimport { ProjectController } from \"./project.controller\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { Project, ProjectSchema } from \"@/schemas/project.schema\";\n\n@Module({\n  imports: [MongooseModule.forFeature([{ name: Project.name, schema: ProjectSchema }])],\n  controllers: [ProjectController],\n  providers: [ProjectService],\n})\nexport class ProjectModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProjectNotModifiedError.html":{"url":"classes/ProjectNotModifiedError.html","title":"class - ProjectNotModifiedError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProjectNotModifiedError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/project/project.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for project not being modified.\n\n            \n\n            \n                Extends\n            \n            \n                            ProjectError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ProjectError extends Error {\n  /**\n   * Creates an instance of ProjectError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for project relation conflicts.\n * @class\n * @extends ProjectError\n */\nexport class ProjectRelationConflict extends ProjectError {}\n\n/**\n * Error class for project not existing.\n * @class\n * @extends ProjectError\n */\nexport class ProjectDoesNotExist extends ProjectError {}\n\n/**\n * Error class for project slug validation errors.\n * @class\n * @extends ProjectError\n */\nexport class ProjectSlugValidationError extends ProjectError {}\n\n/**\n * Error class for project ID validation errors.\n * @class\n * @extends ProjectError\n */\nexport class ProjectIdValidationError extends ProjectError {}\n\n/**\n * Error class for project insufficient permissions.\n * @class\n * @extends ProjectError\n */\nexport class ProjectInsufficientPermissionsError extends ProjectError {}\n\n/**\n * Error class for project not being modified.\n * @class\n * @extends ProjectError\n */\nexport class ProjectNotModifiedError extends ProjectError {}\n\n/**\n * Error class for project provided update data being invalid.\n * @class\n * @extends ProjectError\n */\nexport class ProjectUpdateDataValidationError extends ProjectError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProjectRelationConflict.html":{"url":"classes/ProjectRelationConflict.html","title":"class - ProjectRelationConflict","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProjectRelationConflict\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/project/project.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for project relation conflicts.\n\n            \n\n            \n                Extends\n            \n            \n                            ProjectError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ProjectError extends Error {\n  /**\n   * Creates an instance of ProjectError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for project relation conflicts.\n * @class\n * @extends ProjectError\n */\nexport class ProjectRelationConflict extends ProjectError {}\n\n/**\n * Error class for project not existing.\n * @class\n * @extends ProjectError\n */\nexport class ProjectDoesNotExist extends ProjectError {}\n\n/**\n * Error class for project slug validation errors.\n * @class\n * @extends ProjectError\n */\nexport class ProjectSlugValidationError extends ProjectError {}\n\n/**\n * Error class for project ID validation errors.\n * @class\n * @extends ProjectError\n */\nexport class ProjectIdValidationError extends ProjectError {}\n\n/**\n * Error class for project insufficient permissions.\n * @class\n * @extends ProjectError\n */\nexport class ProjectInsufficientPermissionsError extends ProjectError {}\n\n/**\n * Error class for project not being modified.\n * @class\n * @extends ProjectError\n */\nexport class ProjectNotModifiedError extends ProjectError {}\n\n/**\n * Error class for project provided update data being invalid.\n * @class\n * @extends ProjectError\n */\nexport class ProjectUpdateDataValidationError extends ProjectError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProjectService.html":{"url":"injectables/ProjectService.html","title":"injectable - ProjectService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProjectService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/project/project.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Project Service for handling operations related to projects, such as creation, updating,\ndeletion, and retrieval of projects for a user.\nThis service includes methods for CRUD operations on projects, ensuring that user roles\nand permissions are respected during operations like creation and deletion.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(projectModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/project/project.service.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        projectModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createProjectDto: CreateProjectDto, userId: mongoose.Types.ObjectId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/project/project.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Creates a new project.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createProjectDto\n                                            \n                                                            CreateProjectDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing project creation details.\n\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                        mongoose.Types.ObjectId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user creating the project.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe created project.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(projectId: string, userId: mongoose.Types.ObjectId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/project/project.service.ts:186\n                        \n                    \n\n\n            \n                \n                        Deletes a project.\nThe project can only be deleted by its creator (owner).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                projectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the project to delete.\n\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                        mongoose.Types.ObjectId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user requesting deletion.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe number of deleted projects (should be 1 if successful).\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: mongoose.Types.ObjectId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/project/project.service.ts:73\n                        \n                    \n\n\n            \n                \n                        Retrieves all projects associated with a user, either as the owner or a member.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                        mongoose.Types.ObjectId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nA list of projects the user is either an owner or member of.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(projectId: string, userId: mongoose.Types.ObjectId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/project/project.service.ts:98\n                        \n                    \n\n\n            \n                \n                        Retrieves a single project by its ID, ensuring the user has permission to view it.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                projectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the project.\n\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                        mongoose.Types.ObjectId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe project that the user has access to.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(projectId: string, updateProjectDto: UpdateProjectDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/project/project.service.ts:131\n                        \n                    \n\n\n            \n                \n                        Updates a project with the provided data.\nIf no changes are detected in the project, it throws an error.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                projectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the project to update.\n\n\n                                            \n                                        \n                                        \n                                                updateProjectDto\n                                            \n                                                            UpdateProjectDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe updated project data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe updated project.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport mongoose, { Model } from \"mongoose\";\n\nimport { CreateProjectDto } from \"./dto/create-project.dto\";\nimport { UpdateProjectDto } from \"./dto/update-project.dto\";\nimport { Project, ProjectDocument } from \"@/schemas/project.schema\";\nimport {\n  ProjectDoesNotExist,\n  ProjectError,\n  ProjectIdValidationError,\n  ProjectInsufficientPermissionsError,\n  ProjectNotModifiedError,\n  ProjectRelationConflict,\n  ProjectUpdateDataValidationError,\n} from \"./project.errors\";\nimport { plainToClass } from \"class-transformer\";\nimport { hasChanges, isMongoDbIdValid } from \"@/utils\";\n\n/**\n * Project Service for handling operations related to projects, such as creation, updating,\n * deletion, and retrieval of projects for a user.\n *\n * This service includes methods for CRUD operations on projects, ensuring that user roles\n * and permissions are respected during operations like creation and deletion.\n *\n * @class ProjectService\n */\n@Injectable()\nexport class ProjectService {\n  constructor(\n    @InjectModel(Project.name)\n    private readonly projectModel: Model,\n  ) {}\n\n  /**\n   * Creates a new project.\n   *\n   * @param {CreateProjectDto} createProjectDto - The data transfer object containing project creation details.\n   * @param {mongoose.Types.ObjectId} userId - The ID of the user creating the project.\n   * @returns {Promise} - The created project.\n   * @throws {ProjectRelationConflict} - Throws if a project with the same name already exists.\n   */\n  public async create(createProjectDto: CreateProjectDto, userId: mongoose.Types.ObjectId): Promise {\n    const project = plainToClass(Project, createProjectDto);\n\n    const existingProject = await this.projectModel.findOne({\n      name: project.name,\n    });\n    if (existingProject) {\n      throw new ProjectRelationConflict(`Project with name \\\"${existingProject.name}\\\" already exists.`);\n    }\n\n    const objectIdUserId = new mongoose.Types.ObjectId(userId);\n\n    const newProject = new this.projectModel({\n      ...project,\n      owner: objectIdUserId,\n      createdBy: objectIdUserId,\n    });\n\n    const createdProject = await newProject.save();\n    return createdProject;\n  }\n\n  /**\n   * Retrieves all projects associated with a user, either as the owner or a member.\n   *\n   * @param {mongoose.Types.ObjectId} userId - The ID of the user.\n   * @returns {Promise} - A list of projects the user is either an owner or member of.\n   * @throws {ProjectDoesNotExist} - If no projects are found for the user.\n   */\n  public async findAll(userId: mongoose.Types.ObjectId): Promise {\n    const projects = await this.projectModel\n      .find({\n        $or: [{ owner: userId }, { members: userId }],\n      })\n      .populate({ path: \"owner\", select: \"name _id\" })\n      .populate(\"tickets\")\n      .populate(\"members\")\n      .select(\"-__v\")\n      .exec();\n    if (projects.length } - The project that the user has access to.\n   * @throws {ProjectIdValidationError} - If the provided project ID is invalid.\n   * @throws {ProjectDoesNotExist} - If the project does not exist or the user does not have access.\n   */\n  public async findOne(projectId: string, userId: mongoose.Types.ObjectId): Promise {\n    if (!isMongoDbIdValid(projectId)) {\n      throw new ProjectIdValidationError(\"Provided id is not valid\");\n    }\n    const project = await this.projectModel\n      .findOne({\n        _id: projectId,\n        $or: [{ owner: userId }, { members: userId }],\n      })\n      .populate({ path: \"owner\", select: \"name -_id\" })\n      .populate(\"tickets\")\n      .populate(\"members\")\n      .select(\"-__v -_id\")\n      .exec();\n    if (!project) {\n      throw new ProjectDoesNotExist(\"Project not found or you do not have access\");\n    }\n    return project;\n  }\n\n  /**\n   * Updates a project with the provided data.\n   *\n   * If no changes are detected in the project, it throws an error.\n   *\n   * @param {string} projectId - The ID of the project to update.\n   * @param {UpdateProjectDto} updateProjectDto - The updated project data.\n   * @returns {Promise} - The updated project.\n   * @throws {ProjectIdValidationError} - If the provided project ID is invalid.\n   * @throws {ProjectDoesNotExist} - If the project does not exist.\n   * @throws {ProjectNotModifiedError} - If no changes were detected in the update.\n   * @throws {ProjectUpdateDataValidationError} - If update data were not valid according to db schema.\n   */\n  public async update(projectId: string, updateProjectDto: UpdateProjectDto): Promise {\n    if (!isMongoDbIdValid(projectId)) {\n      throw new ProjectIdValidationError(\"Provided id is not valid\");\n    }\n    const project = await this.projectModel.findById(projectId).exec();\n    if (!project) {\n      throw new ProjectDoesNotExist(`Project with id \\\"${projectId}\\\" doesn't exist.`);\n    }\n    const validUpdate = new this.projectModel(updateProjectDto);\n    if (!validUpdate.owner) {\n      validUpdate.owner = project.owner;\n    }\n    if (!validUpdate.createdBy) {\n      validUpdate.createdBy = project.createdBy;\n    }\n    const validationError = validUpdate.validateSync();\n    if (validationError) {\n      throw new ProjectUpdateDataValidationError(\"Invalid update data\");\n    }\n    if (!hasChanges(project, updateProjectDto)) {\n      throw new ProjectNotModifiedError(\"No changes detected\");\n    }\n    const updateFields = {};\n    for (const key in updateProjectDto) {\n      if (updateProjectDto.hasOwnProperty(key)) {\n        updateFields[key] = updateProjectDto[key];\n      }\n    }\n    const updatedProject = await this.projectModel\n      .findByIdAndUpdate(\n        projectId,\n        { $set: updateFields },\n        {\n          new: true,\n        },\n      )\n      .populate({ path: \"owner\", select: \"name -_id\" })\n      .populate(\"members\")\n      .exec();\n    return updatedProject;\n  }\n\n  /**\n   * Deletes a project.\n   *\n   * The project can only be deleted by its creator (owner).\n   *\n   * @param {string} projectId - The ID of the project to delete.\n   * @param {mongoose.Types.ObjectId} userId - The ID of the user requesting deletion.\n   * @returns {Promise} - The number of deleted projects (should be 1 if successful).\n   * @throws {ProjectIdValidationError} - If the provided project ID is invalid.\n   * @throws {ProjectDoesNotExist} - If the project does not exist.\n   * @throws {ProjectInsufficientPermissionsError} - If the user does not have permission to delete the project.\n   * @throws {ProjectError} - If the deletion fails.\n   */\n  public async delete(projectId: string, userId: mongoose.Types.ObjectId): Promise {\n    if (!isMongoDbIdValid(projectId)) {\n      throw new ProjectIdValidationError(\"Provided id is not valid\");\n    }\n    const project = await this.projectModel.findOne({ _id: projectId }).select(\"-__v -_id\");\n    if (!project) {\n      throw new ProjectDoesNotExist(`Project with id \\\"${projectId}\\\" doesn't exist.`);\n    }\n\n    if (!project.createdBy._id.equals(userId)) {\n      throw new ProjectInsufficientPermissionsError(`You are not authorized to delete this project.`);\n    }\n\n    const result = await this.projectModel.deleteOne({ _id: projectId }).exec();\n    if (result.deletedCount === 0) {\n      throw new ProjectError(`Didn't delete project with \\\"${projectId}\\\" .`);\n    }\n    return result.deletedCount;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProjectSlugValidationError.html":{"url":"classes/ProjectSlugValidationError.html","title":"class - ProjectSlugValidationError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProjectSlugValidationError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/project/project.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for project slug validation errors.\n\n            \n\n            \n                Extends\n            \n            \n                            ProjectError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ProjectError extends Error {\n  /**\n   * Creates an instance of ProjectError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for project relation conflicts.\n * @class\n * @extends ProjectError\n */\nexport class ProjectRelationConflict extends ProjectError {}\n\n/**\n * Error class for project not existing.\n * @class\n * @extends ProjectError\n */\nexport class ProjectDoesNotExist extends ProjectError {}\n\n/**\n * Error class for project slug validation errors.\n * @class\n * @extends ProjectError\n */\nexport class ProjectSlugValidationError extends ProjectError {}\n\n/**\n * Error class for project ID validation errors.\n * @class\n * @extends ProjectError\n */\nexport class ProjectIdValidationError extends ProjectError {}\n\n/**\n * Error class for project insufficient permissions.\n * @class\n * @extends ProjectError\n */\nexport class ProjectInsufficientPermissionsError extends ProjectError {}\n\n/**\n * Error class for project not being modified.\n * @class\n * @extends ProjectError\n */\nexport class ProjectNotModifiedError extends ProjectError {}\n\n/**\n * Error class for project provided update data being invalid.\n * @class\n * @extends ProjectError\n */\nexport class ProjectUpdateDataValidationError extends ProjectError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProjectUpdateDataValidationError.html":{"url":"classes/ProjectUpdateDataValidationError.html","title":"class - ProjectUpdateDataValidationError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProjectUpdateDataValidationError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/project/project.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for project provided update data being invalid.\n\n            \n\n            \n                Extends\n            \n            \n                            ProjectError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ProjectError extends Error {\n  /**\n   * Creates an instance of ProjectError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for project relation conflicts.\n * @class\n * @extends ProjectError\n */\nexport class ProjectRelationConflict extends ProjectError {}\n\n/**\n * Error class for project not existing.\n * @class\n * @extends ProjectError\n */\nexport class ProjectDoesNotExist extends ProjectError {}\n\n/**\n * Error class for project slug validation errors.\n * @class\n * @extends ProjectError\n */\nexport class ProjectSlugValidationError extends ProjectError {}\n\n/**\n * Error class for project ID validation errors.\n * @class\n * @extends ProjectError\n */\nexport class ProjectIdValidationError extends ProjectError {}\n\n/**\n * Error class for project insufficient permissions.\n * @class\n * @extends ProjectError\n */\nexport class ProjectInsufficientPermissionsError extends ProjectError {}\n\n/**\n * Error class for project not being modified.\n * @class\n * @extends ProjectError\n */\nexport class ProjectNotModifiedError extends ProjectError {}\n\n/**\n * Error class for project provided update data being invalid.\n * @class\n * @extends ProjectError\n */\nexport class ProjectUpdateDataValidationError extends ProjectError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterUserDto.html":{"url":"classes/RegisterUserDto.html","title":"class - RegisterUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This DTO is used to validate the information provided during user registration.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email address of the user', example: 'john_doe@example.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:64\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The user's real or display name', example: 'John Doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:78\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Password for the user account, must contain at least one uppercase letter, one lowercase letter, one number, and one special character', example: 'StrongP@ssw0rd!'})@IsString()@IsNotEmpty()@Length(8, 64)@Matches(/(?=.*[a-z])/, {message: 'Password must contain at least one lowercase letter'})@Matches(/(?=.*[A-Z])/, {message: 'Password must contain at least one uppercase letter'})@Matches(/(?=.*[0-9])/, {message: 'Password must contain at least one number'})@Matches(/(?=.*[!@#$%^&*])/, {message: 'Password must contain at least one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:50\n                        \n                    \n\n            \n                \n                    one lowercase letter, one number, and one special character. This field is required.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Unique username for the user', example: 'john_doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:22\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail, IsNotEmpty, IsString, Length, Matches } from \"class-validator\";\n\n/**\n * @class RegisterUserDto\n * @description Data transfer object for user registration credentials.\n * This DTO is used to validate the information provided during user registration.\n */\nexport class RegisterUserDto {\n  /**\n   * @property {string} username\n   * @description Unique username for the user. This field is required and cannot be empty.\n   * @example \"john_doe\"\n   * @required\n   */\n  @ApiProperty({\n    description: \"Unique username for the user\",\n    example: \"john_doe\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  /**\n   * @property {string} password\n   * @description Password for the user account. Must contain at least one uppercase letter,\n   * one lowercase letter, one number, and one special character. This field is required.\n   * @example \"StrongP@ssw0rd!\"\n   * @required\n   */\n  @ApiProperty({\n    description: \"Password for the user account, must contain at least one uppercase letter, one lowercase letter, one number, and one special character\",\n    example: \"StrongP@ssw0rd!\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Length(8, 64)\n  @Matches(/(?=.*[a-z])/, {\n    message: \"Password must contain at least one lowercase letter\",\n  })\n  @Matches(/(?=.*[A-Z])/, {\n    message: \"Password must contain at least one uppercase letter\",\n  })\n  @Matches(/(?=.*[0-9])/, {\n    message: \"Password must contain at least one number\",\n  })\n  @Matches(/(?=.*[!@#$%^&*])/, {\n    message: \"Password must contain at least one special character\",\n  })\n  password: string;\n\n  /**\n   * @property {string} email\n   * @description Email address of the user. This field is required and must be a valid email format.\n   * @example \"john_doe@example.com\"\n   * @required\n   */\n  @ApiProperty({\n    description: \"Email address of the user\",\n    example: \"john_doe@example.com\",\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  /**\n   * @property {string} name\n   * @description The user's real or display name. This field is required and cannot be empty.\n   * @example \"John Doe\"\n   * @required\n   */\n  @ApiProperty({\n    description: \"The user's real or display name\",\n    example: \"John Doe\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Ticket.html":{"url":"classes/Ticket.html","title":"class - Ticket","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Ticket\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/ticket.schema.ts\n        \n\n\n            \n                Description\n            \n            \n                Ticket Schema represents the structure of a ticket in the database.\nThis schema defines the ticket properties, such as title, description, assignees, projectId, status,\nand priority, along with relationships to the User and Project models.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                assignees\n                            \n                            \n                                    \n                                createdBy\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                dueDate\n                            \n                            \n                                    \n                                priority\n                            \n                            \n                                    \n                                projectId\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        assignees\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/ticket.schema.ts:58\n                        \n                    \n\n            \n                \n                    An array of IDs of users assigned to the ticket.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/ticket.schema.ts:49\n                        \n                    \n\n            \n                \n                    The ID of the user who created the ticket.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/ticket.schema.ts:40\n                        \n                    \n\n            \n                \n                    A description of the ticket.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        dueDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/ticket.schema.ts:98\n                        \n                    \n\n            \n                \n                    The due date for the ticket.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        priority\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: 'medium', enum: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/ticket.schema.ts:88\n                        \n                    \n\n            \n                \n                    The priority level of the ticket.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        projectId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/ticket.schema.ts:67\n                        \n                    \n\n            \n                \n                    The ID of the project this ticket belongs to.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: 'open', enum: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/ticket.schema.ts:79\n                        \n                    \n\n            \n                \n                    The current status of the ticket.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/ticket.schema.ts:31\n                        \n                    \n\n            \n                \n                    The title of the ticket.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Types } from \"mongoose\";\nimport { User } from \"./user.schema\";\nimport { Project } from \"./project.schema\";\n\n/**\n * Ticket Schema represents the structure of a ticket in the database.\n *\n * This schema defines the ticket properties, such as `title`, `description`, `assignees`, `projectId`, `status`,\n * and `priority`, along with relationships to the `User` and `Project` models.\n *\n * @class Ticket\n * @property {string} title - The title of the ticket.\n * @property {string} description - A description of the ticket.\n * @property {Types.ObjectId} createdBy - The ID of the user who created the ticket.\n * @property {Types.ObjectId[]} assignees - An array of IDs of users assigned to the ticket.\n * @property {Types.ObjectId} projectId - The ID of the project this ticket belongs to.\n * @property {string} status - The current status of the ticket.\n * @property {string} priority - The priority level of the ticket.\n * @property {Date} [dueDate] - The due date for the ticket (optional).\n */\n@Schema({ timestamps: true })\nexport class Ticket {\n  /**\n   * The title of the ticket.\n   *\n   * @example \"Fix login issue\"\n   * @required\n   */\n  @Prop({ required: true })\n  title: string;\n\n  /**\n   * A description of the ticket.\n   *\n   * @example \"The user is unable to log in with valid credentials\"\n   * @required\n   */\n  @Prop({ required: true })\n  description: string;\n\n  /**\n   * The ID of the user who created the ticket.\n   *\n   * @example \"60c72b2f5b1b2c6f5e8c9999\"\n   * @required\n   */\n  @Prop({ type: Types.ObjectId, ref: User.name, required: true })\n  createdBy: Types.ObjectId;\n\n  /**\n   * An array of IDs of users assigned to the ticket.\n   *\n   * @example [\"60c72b2f5b1b2c6f5e8c8888\", \"60c72b2f5b1b2c6f5e8c7777\"]\n   * @optional\n   */\n  @Prop({ type: [{ type: Types.ObjectId, ref: User.name }] })\n  assignees: Types.ObjectId[];\n\n  /**\n   * The ID of the project this ticket belongs to.\n   *\n   * @example \"60c72b2f5b1b2c6f5e8c6666\"\n   * @required\n   */\n  @Prop({ type: Types.ObjectId, ref: Project.name, required: true })\n  projectId: Types.ObjectId;\n\n  /**\n   * The current status of the ticket.\n   *\n   * @default 'open'\n   * @enum ['open', 'pending', 'in-progress', 'in-qa', 'staging', 'uat', 'production', 'wont-do', 'closed']\n   */\n  @Prop({\n    default: \"open\",\n    enum: [\"open\", \"pending\", \"in-progress\", \"in-qa\", \"staging\", \"uat\", \"production\", \"wont-do\", \"closed\"],\n  })\n  status: string;\n\n  /**\n   * The priority level of the ticket.\n   *\n   * @default 'medium'\n   * @enum ['low', 'medium', 'high']\n   */\n  @Prop({ default: \"medium\", enum: [\"low\", \"medium\", \"high\"] })\n  priority: string;\n\n  /**\n   * The due date for the ticket.\n   *\n   * @example \"2024-12-31T23:59:59Z\"\n   * @optional\n   * @default null\n   */\n  @Prop({ default: null })\n  dueDate: Date;\n}\n\n/**\n * TicketSchema is the Mongoose schema for the `Ticket` class.\n *\n * This schema is used by Mongoose to interact with the database.\n *\n * @constant TicketSchema\n */\nexport const TicketSchema = SchemaFactory.createForClass(Ticket);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TicketController.html":{"url":"controllers/TicketController.html","title":"controller - TicketController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TicketController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ticket/ticket.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1/tickets\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling HTTP requests related to tickets.\nProvides CRUD operations for ticket management.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTicketDto: CreateTicketDto, req: ExpressRequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/ticket/ticket.controller.ts:71\n                        \n                    \n\n\n            \n                \n                        Creates a new ticket for the authenticated user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createTicketDto\n                                            \n                                                            CreateTicketDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data required to create a new ticket.\n\n\n                                            \n                                        \n                                        \n                                                req\n                                            \n                                                            ExpressRequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request object, containing the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nResponse object with status, message, and the created ticket.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string, req: ExpressRequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/ticket/ticket.controller.ts:141\n                        \n                    \n\n\n            \n                \n                        Deletes a ticket by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the ticket to delete.\n\n\n                                            \n                                        \n                                        \n                                                req\n                                            \n                                                            ExpressRequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request object, containing the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nResponse object with the result status of the delete operation.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(req: ExpressRequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/ticket/ticket.controller.ts:30\n                        \n                    \n\n\n            \n                \n                        Retrieves all tickets accessible by the authenticated user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ExpressRequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request object, containing the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nA list of tickets accessible to the user.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string, req: ExpressRequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/ticket/ticket.controller.ts:50\n                        \n                    \n\n\n            \n                \n                        Retrieves a specific ticket by its ID for the authenticated user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the ticket to retrieve.\n\n\n                                            \n                                        \n                                        \n                                                req\n                                            \n                                                            ExpressRequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request object, containing the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe ticket object requested.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateTicketDto: UpdateTicketDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update an existing ticket by ID'})@ApiParam({name: 'id', description: 'The ID of the ticket to update', type: String})@ApiBody({type: UpdateTicketDto, description: 'The updated data for the ticket'})@ApiResponse({status: 200, description: 'Ticket successfully updated', type: Ticket})@ApiResponse({status: 304, description: 'Ticket not modified'})@ApiResponse({status: 500, description: 'Indicates, the request failed.'})\n                \n            \n\n                    \n                        \n                            Defined in src/ticket/ticket.controller.ts:122\n                        \n                    \n\n\n            \n                \n                        Updates an existing ticket by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the ticket to update.\n\n\n                                            \n                                        \n                                        \n                                                updateTicketDto\n                                            \n                                                            UpdateTicketDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe updated data for the ticket.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe updated ticket object.\n\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete, HttpStatus, Request, UseGuards } from \"@nestjs/common\";\nimport { TicketService } from \"./ticket.service\";\nimport { CreateTicketDto } from \"./dto/create-ticket.dto\";\nimport { UpdateTicketDto } from \"./dto/update-ticket.dto\";\nimport { ExpressRequestWithUser } from \"./interfaces/ticket.interface\";\nimport { ApiBearerAuth, ApiBody, ApiOperation, ApiParam, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { JwtAuthGuard } from \"@/auth/jwt-auth.guard\";\nimport { Ticket } from \"@/schemas/ticket.schema\";\nimport { handleDomainErrors } from \"@/utils\";\n\n/**\n * Controller for handling HTTP requests related to tickets.\n * Provides CRUD operations for ticket management.\n */\n@ApiBearerAuth()\n@ApiTags(\"Ticket Management\")\n@Controller(\"/api/v1/tickets\")\nexport class TicketController {\n  constructor(private readonly ticketService: TicketService) {}\n\n  /**\n   * Retrieves all tickets accessible by the authenticated user.\n   *\n   * @param {ExpressRequestWithUser} req - The request object, containing the user.\n   * @returns {Promise} - A list of tickets accessible to the user.\n   * @throws {any} - Handles domain errors.\n   */\n  @Get()\n  @UseGuards(JwtAuthGuard)\n  async findAll(@Request() req: ExpressRequestWithUser): Promise {\n    try {\n      const userId = req.user._id;\n      req.user = null; // Nullify the user object after usage to avoid unintended side effects\n      return await this.ticketService.findAll(userId);\n    } catch (error) {\n      handleDomainErrors(error);\n    }\n  }\n\n  /**\n   * Retrieves a specific ticket by its ID for the authenticated user.\n   *\n   * @param {string} id - The ID of the ticket to retrieve.\n   * @param {ExpressRequestWithUser} req - The request object, containing the user.\n   * @returns {Promise} - The ticket object requested.\n   * @throws {any} - Handles domain errors.\n   */\n  @Get(\":id\")\n  @UseGuards(JwtAuthGuard)\n  async findOne(@Param(\"id\") id: string, @Request() req: ExpressRequestWithUser): Promise {\n    try {\n      const userId = req.user._id;\n      req.user = null; // Nullify the user object after usage to avoid unintended side effects\n      const ticket = await this.ticketService.findOne(id, userId);\n      return ticket;\n    } catch (error) {\n      handleDomainErrors(error);\n    }\n  }\n\n  /**\n   * Creates a new ticket for the authenticated user.\n   *\n   * @param {CreateTicketDto} createTicketDto - The data required to create a new ticket.\n   * @param {ExpressRequestWithUser} req - The request object, containing the user.\n   * @returns {Promise} - Response object with status, message, and the created ticket.\n   * @throws {any} - Handles domain errors.\n   */\n  @Post()\n  @UseGuards(JwtAuthGuard)\n  async create(\n    @Body() createTicketDto: CreateTicketDto,\n    @Request() req: ExpressRequestWithUser,\n  ): Promise {\n    try {\n      const userId = req.user._id;\n      req.user = null; // Nullify the user object after usage to avoid unintended side effects\n      const createdTicket = await this.ticketService.create(createTicketDto, userId);\n      return {\n        statusCode: HttpStatus.CREATED,\n        message: \"Ticket created successfully\",\n        data: createdTicket,\n      };\n    } catch (error) {\n      handleDomainErrors(error);\n    }\n  }\n\n  /**\n   * Updates an existing ticket by its ID.\n   *\n   * @param {string} id - The ID of the ticket to update.\n   * @param {UpdateTicketDto} updateTicketDto - The updated data for the ticket.\n   * @returns {Promise} - The updated ticket object.\n   * @throws {any} - Handles domain errors.\n   */\n  @Patch(\":id\")\n  @ApiOperation({ summary: \"Update an existing ticket by ID\" })\n  @ApiParam({\n    name: \"id\",\n    description: \"The ID of the ticket to update\",\n    type: String,\n  })\n  @ApiBody({\n    type: UpdateTicketDto,\n    description: \"The updated data for the ticket\",\n  })\n  @ApiResponse({\n    status: 200,\n    description: \"Ticket successfully updated\",\n    type: Ticket,\n  })\n  @ApiResponse({\n    status: 304,\n    description: \"Ticket not modified\",\n  })\n  @ApiResponse({ status: 500, description: \"Indicates, the request failed.\" })\n  async update(@Param(\"id\") id: string, @Body() updateTicketDto: UpdateTicketDto): Promise {\n    try {\n      const updatedTicket = await this.ticketService.update(id, updateTicketDto);\n      return updatedTicket;\n    } catch (error) {\n      handleDomainErrors(error);\n    }\n  }\n\n  /**\n   * Deletes a ticket by its ID.\n   *\n   * @param {string} id - The ID of the ticket to delete.\n   * @param {ExpressRequestWithUser} req - The request object, containing the user.\n   * @returns {Promise} - Response object with the result status of the delete operation.\n   * @throws {any} - Handles domain errors.\n   */\n  @Delete(\":id\")\n  @UseGuards(JwtAuthGuard)\n  async delete(@Param(\"id\") id: string, @Request() req: ExpressRequestWithUser): Promise {\n    try {\n      const userId = req.user._id;\n      req.user = null; // Nullify the user object after usage to avoid unintended side effects\n      await this.ticketService.delete(id, userId);\n      return { result: \"success\" };\n    } catch (error) {\n      handleDomainErrors(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TicketDoesNotExist.html":{"url":"classes/TicketDoesNotExist.html","title":"class - TicketDoesNotExist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TicketDoesNotExist\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ticket/ticket.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for ticket not existing.\n\n            \n\n            \n                Extends\n            \n            \n                            TicketError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TicketError extends Error {\n  /**\n   * Creates an instance of TicketError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for ticket relation conflicts.\n * @class\n * @extends TicketError\n */\nexport class TicketRelationConflict extends TicketError {}\n\n/**\n * Error class for ticket not existing.\n * @class\n * @extends TicketError\n */\nexport class TicketDoesNotExist extends TicketError {}\n\n/**\n * Error class for ticket slug validation errors.\n * @class\n * @extends TicketError\n */\nexport class TicketSlugValidationError extends TicketError {}\n\n/**\n * Error class for ticket ID validation errors.\n * @class\n * @extends TicketError\n */\nexport class TicketIdValidationError extends TicketError {}\n\n/**\n * Error class for ticket insufficient permissions.\n * @class\n * @extends TicketError\n */\nexport class TicketInsufficientPermissionsError extends TicketError {}\n\n/**\n * Error class for ticket not being modified.\n * @class\n * @extends TicketError\n */\nexport class TicketNotModifiedError extends TicketError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TicketError.html":{"url":"classes/TicketError.html","title":"class - TicketError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TicketError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ticket/ticket.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom error class for ticket-related errors.\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/ticket/ticket.errors.ts:5\n                            \n                        \n\n                \n                    \n                            Creates an instance of TicketError.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe error message.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TicketError extends Error {\n  /**\n   * Creates an instance of TicketError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for ticket relation conflicts.\n * @class\n * @extends TicketError\n */\nexport class TicketRelationConflict extends TicketError {}\n\n/**\n * Error class for ticket not existing.\n * @class\n * @extends TicketError\n */\nexport class TicketDoesNotExist extends TicketError {}\n\n/**\n * Error class for ticket slug validation errors.\n * @class\n * @extends TicketError\n */\nexport class TicketSlugValidationError extends TicketError {}\n\n/**\n * Error class for ticket ID validation errors.\n * @class\n * @extends TicketError\n */\nexport class TicketIdValidationError extends TicketError {}\n\n/**\n * Error class for ticket insufficient permissions.\n * @class\n * @extends TicketError\n */\nexport class TicketInsufficientPermissionsError extends TicketError {}\n\n/**\n * Error class for ticket not being modified.\n * @class\n * @extends TicketError\n */\nexport class TicketNotModifiedError extends TicketError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TicketIdValidationError.html":{"url":"classes/TicketIdValidationError.html","title":"class - TicketIdValidationError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TicketIdValidationError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ticket/ticket.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for ticket ID validation errors.\n\n            \n\n            \n                Extends\n            \n            \n                            TicketError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TicketError extends Error {\n  /**\n   * Creates an instance of TicketError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for ticket relation conflicts.\n * @class\n * @extends TicketError\n */\nexport class TicketRelationConflict extends TicketError {}\n\n/**\n * Error class for ticket not existing.\n * @class\n * @extends TicketError\n */\nexport class TicketDoesNotExist extends TicketError {}\n\n/**\n * Error class for ticket slug validation errors.\n * @class\n * @extends TicketError\n */\nexport class TicketSlugValidationError extends TicketError {}\n\n/**\n * Error class for ticket ID validation errors.\n * @class\n * @extends TicketError\n */\nexport class TicketIdValidationError extends TicketError {}\n\n/**\n * Error class for ticket insufficient permissions.\n * @class\n * @extends TicketError\n */\nexport class TicketInsufficientPermissionsError extends TicketError {}\n\n/**\n * Error class for ticket not being modified.\n * @class\n * @extends TicketError\n */\nexport class TicketNotModifiedError extends TicketError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TicketInsufficientPermissionsError.html":{"url":"classes/TicketInsufficientPermissionsError.html","title":"class - TicketInsufficientPermissionsError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TicketInsufficientPermissionsError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ticket/ticket.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for ticket insufficient permissions.\n\n            \n\n            \n                Extends\n            \n            \n                            TicketError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TicketError extends Error {\n  /**\n   * Creates an instance of TicketError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for ticket relation conflicts.\n * @class\n * @extends TicketError\n */\nexport class TicketRelationConflict extends TicketError {}\n\n/**\n * Error class for ticket not existing.\n * @class\n * @extends TicketError\n */\nexport class TicketDoesNotExist extends TicketError {}\n\n/**\n * Error class for ticket slug validation errors.\n * @class\n * @extends TicketError\n */\nexport class TicketSlugValidationError extends TicketError {}\n\n/**\n * Error class for ticket ID validation errors.\n * @class\n * @extends TicketError\n */\nexport class TicketIdValidationError extends TicketError {}\n\n/**\n * Error class for ticket insufficient permissions.\n * @class\n * @extends TicketError\n */\nexport class TicketInsufficientPermissionsError extends TicketError {}\n\n/**\n * Error class for ticket not being modified.\n * @class\n * @extends TicketError\n */\nexport class TicketNotModifiedError extends TicketError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TicketModule.html":{"url":"modules/TicketModule.html","title":"module - TicketModule","body":"\n                   \n\n\n\n\n    Modules\n    TicketModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TicketModule\n\n\n\ncluster_TicketModule_providers\n\n\n\n\nTicketService\n\nTicketService\n\n\n\nTicketModule\n\nTicketModule\n\nTicketModule -->\n\nTicketService->TicketModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/ticket/ticket.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TicketService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TicketController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TicketService } from \"./ticket.service\";\nimport { TicketController } from \"./ticket.controller\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { Ticket, TicketSchema } from \"@/schemas/ticket.schema\";\nimport { Project, ProjectSchema } from \"@/schemas/project.schema\";\n\n@Module({\n  imports: [MongooseModule.forFeature([{ name: Ticket.name, schema: TicketSchema }]), MongooseModule.forFeature([{ name: Project.name, schema: ProjectSchema }])],\n  controllers: [TicketController],\n  providers: [TicketService],\n})\nexport class TicketModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TicketNotModifiedError.html":{"url":"classes/TicketNotModifiedError.html","title":"class - TicketNotModifiedError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TicketNotModifiedError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ticket/ticket.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for ticket not being modified.\n\n            \n\n            \n                Extends\n            \n            \n                            TicketError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TicketError extends Error {\n  /**\n   * Creates an instance of TicketError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for ticket relation conflicts.\n * @class\n * @extends TicketError\n */\nexport class TicketRelationConflict extends TicketError {}\n\n/**\n * Error class for ticket not existing.\n * @class\n * @extends TicketError\n */\nexport class TicketDoesNotExist extends TicketError {}\n\n/**\n * Error class for ticket slug validation errors.\n * @class\n * @extends TicketError\n */\nexport class TicketSlugValidationError extends TicketError {}\n\n/**\n * Error class for ticket ID validation errors.\n * @class\n * @extends TicketError\n */\nexport class TicketIdValidationError extends TicketError {}\n\n/**\n * Error class for ticket insufficient permissions.\n * @class\n * @extends TicketError\n */\nexport class TicketInsufficientPermissionsError extends TicketError {}\n\n/**\n * Error class for ticket not being modified.\n * @class\n * @extends TicketError\n */\nexport class TicketNotModifiedError extends TicketError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TicketRelationConflict.html":{"url":"classes/TicketRelationConflict.html","title":"class - TicketRelationConflict","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TicketRelationConflict\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ticket/ticket.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for ticket relation conflicts.\n\n            \n\n            \n                Extends\n            \n            \n                            TicketError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TicketError extends Error {\n  /**\n   * Creates an instance of TicketError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for ticket relation conflicts.\n * @class\n * @extends TicketError\n */\nexport class TicketRelationConflict extends TicketError {}\n\n/**\n * Error class for ticket not existing.\n * @class\n * @extends TicketError\n */\nexport class TicketDoesNotExist extends TicketError {}\n\n/**\n * Error class for ticket slug validation errors.\n * @class\n * @extends TicketError\n */\nexport class TicketSlugValidationError extends TicketError {}\n\n/**\n * Error class for ticket ID validation errors.\n * @class\n * @extends TicketError\n */\nexport class TicketIdValidationError extends TicketError {}\n\n/**\n * Error class for ticket insufficient permissions.\n * @class\n * @extends TicketError\n */\nexport class TicketInsufficientPermissionsError extends TicketError {}\n\n/**\n * Error class for ticket not being modified.\n * @class\n * @extends TicketError\n */\nexport class TicketNotModifiedError extends TicketError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TicketService.html":{"url":"injectables/TicketService.html","title":"injectable - TicketService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TicketService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ticket/ticket.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service class for managing ticket-related operations within projects.\nProvides methods for creating, updating, retrieving, and deleting tickets.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ticketModel: Model, projectModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/ticket/ticket.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ticketModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        projectModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTicketDto: CreateTicketDto, userId: mongoose.Types.ObjectId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/ticket/ticket.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Creates a new ticket for a project.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createTicketDto\n                                            \n                                                            CreateTicketDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data required to create a ticket.\n\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                        mongoose.Types.ObjectId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user creating the ticket.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe created ticket object.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(ticketId: string, userId: mongoose.Types.ObjectId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/ticket/ticket.service.ts:146\n                        \n                    \n\n\n            \n                \n                        Deletes a ticket by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ticketId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the ticket to delete.\n\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                        mongoose.Types.ObjectId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user attempting to delete the ticket.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe number of deleted tickets.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: mongoose.Types.ObjectId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/ticket/ticket.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Retrieves all tickets accessible by the given user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                        mongoose.Types.ObjectId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user requesting the tickets.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nA list of tickets accessible by the user.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(projectId: string, userId: mongoose.Types.ObjectId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/ticket/ticket.service.ts:82\n                        \n                    \n\n\n            \n                \n                        Retrieves a single ticket by its ID for the specified project and user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                projectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the project containing the ticket.\n\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                        mongoose.Types.ObjectId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user requesting the ticket.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe ticket that matches the provided ID.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(ticketId: string, updateTicketDto: UpdateTicketDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/ticket/ticket.service.ts:109\n                        \n                    \n\n\n            \n                \n                        Updates an existing ticket.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ticketId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the ticket to update.\n\n\n                                            \n                                        \n                                        \n                                                updateTicketDto\n                                            \n                                                            UpdateTicketDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to update the ticket with.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe updated ticket object.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport mongoose, { Model } from \"mongoose\";\nimport { Ticket } from \"@/schemas/ticket.schema\";\nimport { CreateTicketDto } from \"./dto/create-ticket.dto\";\nimport { UpdateTicketDto } from \"./dto/update-ticket.dto\";\nimport { Project } from \"@/schemas/project.schema\";\nimport { ProjectDoesNotExist, ProjectIdValidationError } from \"@/project/project.errors\";\nimport { plainToClass } from \"class-transformer\";\nimport { TicketDoesNotExist, TicketError, TicketIdValidationError, TicketInsufficientPermissionsError, TicketNotModifiedError } from \"./ticket.errors\";\nimport { hasChanges, isMongoDbIdValid } from \"@/utils\";\nimport { sanitizeUpdateTicketDto } from \"./utils/ticket.utils\";\n\n/**\n * Service class for managing ticket-related operations within projects.\n * Provides methods for creating, updating, retrieving, and deleting tickets.\n */\n@Injectable()\nexport class TicketService {\n  constructor(\n    @InjectModel(Ticket.name) private readonly ticketModel: Model,\n    @InjectModel(Project.name) private readonly projectModel: Model, // Inject Project model\n  ) {}\n\n  /**\n   * Creates a new ticket for a project.\n   *\n   * @param {CreateTicketDto} createTicketDto - The data required to create a ticket.\n   * @param {mongoose.Types.ObjectId} userId - The ID of the user creating the ticket.\n   * @returns {Promise} - The created ticket object.\n   * @throws {ProjectDoesNotExist} - Throws if the project with the provided ID doesn't exist.\n   * @throws {ProjectIdValidationError} - Throws if the provided project ID is invalid.\n   */\n  public async create(createTicketDto: CreateTicketDto, userId: mongoose.Types.ObjectId): Promise {\n    if (!isMongoDbIdValid(createTicketDto.projectId)) {\n      throw new ProjectIdValidationError(`Invalid project id: \\\"${createTicketDto.projectId}\\\"`);\n    }\n    const project = await this.projectModel.findById(createTicketDto.projectId).exec();\n    if (!project) {\n      throw new ProjectDoesNotExist(`Project with id \\\"${createTicketDto.projectId}\\\" doesn't exist.`);\n    }\n    const ticket = plainToClass(Ticket, createTicketDto);\n    const newTicket = new this.ticketModel({\n      ...ticket,\n      createdBy: userId,\n    });\n    const createdTicket = await newTicket.save();\n    project.tickets.push(createdTicket._id);\n    await project.save();\n    return createdTicket;\n  }\n\n  /**\n   * Retrieves all tickets accessible by the given user.\n   *\n   * @param {mongoose.Types.ObjectId} userId - The ID of the user requesting the tickets.\n   * @returns {Promise} - A list of tickets accessible by the user.\n   * @throws {TicketDoesNotExist} - Throws if no tickets are found.\n   */\n  public async findAll(userId: mongoose.Types.ObjectId): Promise {\n    const tickets = await this.ticketModel\n      .find({\n        $or: [{ createdBy: userId }, { members: { $in: [userId] } }, { assignees: { $in: [userId] } }],\n      })\n      .select(\"-__v\")\n      .exec();\n    if (tickets.length } - The ticket that matches the provided ID.\n   * @throws {ProjectIdValidationError} - Throws if the provided project ID is invalid.\n   * @throws {TicketDoesNotExist} - Throws if the ticket is not found or if the user does not have access.\n   */\n  public async findOne(projectId: string, userId: mongoose.Types.ObjectId): Promise {\n    if (!isMongoDbIdValid(projectId)) {\n      throw new ProjectIdValidationError(\"Provided id is not valid\");\n    }\n    const ticket = await this.ticketModel\n      .findOne({\n        _id: projectId,\n        $or: [{ createdBy: userId }, { members: { $in: [userId] } }, { assignees: { $in: [userId] } }],\n      })\n      .select(\"-__v -_id\")\n      .exec();\n    if (!ticket) {\n      throw new TicketDoesNotExist(\"Ticket not found or you do not have access\");\n    }\n    return ticket;\n  }\n\n  /**\n   * Updates an existing ticket.\n   *\n   * @param {string} ticketId - The ID of the ticket to update.\n   * @param {UpdateTicketDto} updateTicketDto - The data to update the ticket with.\n   * @returns {Promise} - The updated ticket object.\n   * @throws {TicketIdValidationError} - Throws if the provided ticket ID is invalid.\n   * @throws {TicketDoesNotExist} - Throws if the ticket does not exist.\n   * @throws {TicketNotModifiedError} - Throws if no changes are detected during the update.\n   */\n  public async update(ticketId: string, updateTicketDto: UpdateTicketDto): Promise {\n    if (!isMongoDbIdValid(ticketId)) {\n      throw new TicketIdValidationError(\"Provided id is not valid\");\n    }\n    const ticket = await this.ticketModel.findById(ticketId).exec();\n    if (!ticket) {\n      throw new TicketDoesNotExist(`Ticket with id \\\"${ticketId}\\\" doesn't exist.`);\n    }\n    if (!hasChanges(ticket, updateTicketDto)) {\n      throw new TicketNotModifiedError(\"No changes detected\");\n    }\n    const sanitizedUpdate = sanitizeUpdateTicketDto(updateTicketDto);\n    const updatedTicket = await this.ticketModel\n      .findByIdAndUpdate(\n        ticketId,\n        { $set: sanitizedUpdate },\n        {\n          new: true,\n          runValidators: true,\n        },\n      )\n      .select(\"-__v\")\n      .exec();\n    return updatedTicket;\n  }\n\n  /**\n   * Deletes a ticket by its ID.\n   *\n   * @param {string} ticketId - The ID of the ticket to delete.\n   * @param {mongoose.Types.ObjectId} userId - The ID of the user attempting to delete the ticket.\n   * @returns {Promise} - The number of deleted tickets.\n   * @throws {TicketIdValidationError} - Throws if the provided ticket ID is invalid.\n   * @throws {TicketDoesNotExist} - Throws if the ticket does not exist.\n   * @throws {TicketInsufficientPermissionsError} - Throws if the user does not have permissions to delete the ticket.\n   * @throws {TicketError} - Throws if an error occurs during ticket deletion.\n   */\n  public async delete(ticketId: string, userId: mongoose.Types.ObjectId): Promise {\n    if (!isMongoDbIdValid(ticketId)) {\n      throw new TicketIdValidationError(\"Provided id is not valid\");\n    }\n    const ticket = await this.ticketModel.findOne({ _id: ticketId }).select(\"-__v -_id\");\n    if (!ticket) {\n      throw new ProjectDoesNotExist(`Ticket with id \\\"${ticketId}\\\" doesn't exist.`);\n    }\n\n    if (!ticket.createdBy._id.equals(userId)) {\n      throw new TicketInsufficientPermissionsError(`You are not authorized to delete this ticket.`);\n    }\n\n    const result = await this.ticketModel.deleteOne({ _id: ticketId }).exec();\n    if (result.deletedCount === 0) {\n      throw new TicketError(`Didn't delete ticket with \\\"${ticketId}\\\" .`);\n    }\n    return result.deletedCount;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TicketSlugValidationError.html":{"url":"classes/TicketSlugValidationError.html","title":"class - TicketSlugValidationError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TicketSlugValidationError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ticket/ticket.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Error class for ticket slug validation errors.\n\n            \n\n            \n                Extends\n            \n            \n                            TicketError\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TicketError extends Error {\n  /**\n   * Creates an instance of TicketError.\n   * @param {string} message - The error message.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Error class for ticket relation conflicts.\n * @class\n * @extends TicketError\n */\nexport class TicketRelationConflict extends TicketError {}\n\n/**\n * Error class for ticket not existing.\n * @class\n * @extends TicketError\n */\nexport class TicketDoesNotExist extends TicketError {}\n\n/**\n * Error class for ticket slug validation errors.\n * @class\n * @extends TicketError\n */\nexport class TicketSlugValidationError extends TicketError {}\n\n/**\n * Error class for ticket ID validation errors.\n * @class\n * @extends TicketError\n */\nexport class TicketIdValidationError extends TicketError {}\n\n/**\n * Error class for ticket insufficient permissions.\n * @class\n * @extends TicketError\n */\nexport class TicketInsufficientPermissionsError extends TicketError {}\n\n/**\n * Error class for ticket not being modified.\n * @class\n * @extends TicketError\n */\nexport class TicketNotModifiedError extends TicketError {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProjectDto.html":{"url":"classes/UpdateProjectDto.html","title":"class - UpdateProjectDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProjectDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/project/dto/update-project.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO (Data Transfer Object) for updating an existing project.\nThis class defines the structure and validation rules for the data required to update a project.\nIt extends the CreateProjectDto class, meaning it inherits the properties for name, description, and members,\nwith all properties being optional for updates.\n\n            \n\n            \n                Extends\n            \n            \n                        PartialType(CreateProjectDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                members\n                            \n                            \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                owner\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                tickets\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The updated description of the project', example: 'Final Description', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/project/dto/update-project.dto.ts:47\n                        \n                    \n\n            \n                \n                    The updated description of the project.\nThis field is optional. If provided, it must be a string representing the new description of the project.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'List of user IDs who are members of the project', example: undefined, type: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/project/dto/update-project.dto.ts:81\n                        \n                    \n\n            \n                \n                    List of user IDs who are members of the project.\nThis field is optional. If provided, it must be an array of MongoDB ObjectIds that represent\nthe users who should be members of the project.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The updated name of the project', example: 'New Project Name', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/project/dto/update-project.dto.ts:31\n                        \n                    \n\n            \n                \n                    The updated name of the project.\nThis field is optional. If provided, it must be a string representing the new project name.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/project/dto/update-project.dto.ts:63\n                        \n                    \n\n            \n                \n                    The ID of the user who owns the project.\nThis field is optional. If provided, it must be a valid MongoDB ObjectId that represents a user.\nThe owner field is typically set during project creation and is usually not updated.\nExample: '63e4e8d6e92f5e0b6f9a2f33'\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        tickets\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@IsMongoId({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/project/dto/update-project.dto.ts:96\n                        \n                    \n\n            \n                \n                    List of ticket IDs associated with the project.\nThis field is optional. If provided, it must be an array of MongoDB ObjectIds that represent\nthe tickets associated with the project.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/mapped-types\";\nimport { CreateProjectDto } from \"./create-project.dto\";\nimport { ApiProperty } from \"@nestjs/swagger\";\nimport { Types } from \"mongoose\";\nimport { IsArray, IsMongoId, IsOptional } from \"class-validator\";\n\n/**\n * DTO (Data Transfer Object) for updating an existing project.\n *\n * This class defines the structure and validation rules for the data required to update a project.\n * It extends the `CreateProjectDto` class, meaning it inherits the properties for `name`, `description`, and `members`,\n * with all properties being optional for updates.\n *\n * @class UpdateProjectDto\n */\nexport class UpdateProjectDto extends PartialType(CreateProjectDto) {\n  /**\n   * The updated name of the project.\n   *\n   * This field is optional. If provided, it must be a string representing the new project name.\n   *\n   * @example 'New Project Name'\n   * @optional\n   * @type {string}\n   */\n  @ApiProperty({\n    description: \"The updated name of the project\",\n    example: \"New Project Name\",\n    required: false,\n  })\n  name?: string;\n\n  /**\n   * The updated description of the project.\n   *\n   * This field is optional. If provided, it must be a string representing the new description of the project.\n   *\n   * @example 'Final Description'\n   * @optional\n   * @type {string}\n   */\n  @ApiProperty({\n    description: \"The updated description of the project\",\n    example: \"Final Description\",\n    required: false,\n  })\n  description?: string;\n\n  /**\n   * The ID of the user who owns the project.\n   *\n   * This field is optional. If provided, it must be a valid MongoDB ObjectId that represents a user.\n   * The `owner` field is typically set during project creation and is usually not updated.\n   *\n   * Example: '63e4e8d6e92f5e0b6f9a2f33'\n   *\n   * @example '63e4e8d6e92f5e0b6f9a2f33'\n   * @optional\n   * @type {Types.ObjectId}\n   */\n  @IsOptional()\n  @IsMongoId()\n  owner?: Types.ObjectId;\n\n  /**\n   * List of user IDs who are members of the project.\n   *\n   * This field is optional. If provided, it must be an array of MongoDB ObjectIds that represent\n   * the users who should be members of the project.\n   *\n   * @example ['63e4e8d6e92f5e0b6f9a2f33', '63e4e8d6e92f5e0b6f9a2f34']\n   * @optional\n   * @type {Types.ObjectId[]}\n   */\n  @ApiProperty({\n    description: \"List of user IDs who are members of the project\",\n    example: [\"63e4e8d6e92f5e0b6f9a2f33\", \"63e4e8d6e92f5e0b6f9a2f34\"],\n    type: [Types.ObjectId],\n    required: false,\n  })\n  members?: Types.ObjectId[];\n\n  /**\n   * List of ticket IDs associated with the project.\n   *\n   * This field is optional. If provided, it must be an array of MongoDB ObjectIds that represent\n   * the tickets associated with the project.\n   *\n   * @example ['63e4e8d6e92f5e0b6f9a2f35', '63e4e8d6e92f5e0b6f9a2f36']\n   * @optional\n   * @type {Types.ObjectId[]}\n   */\n  @IsOptional()\n  @IsArray()\n  @IsMongoId({ each: true })\n  tickets?: Types.ObjectId[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTicketDto.html":{"url":"classes/UpdateTicketDto.html","title":"class - UpdateTicketDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTicketDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ticket/dto/update-ticket.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO (Data Transfer Object) for updating a ticket.\nThis class defines the structure of the data required to update an existing ticket.\nIt extends the CreateTicketDto class, making all fields optional, and includes additional validation\nto ensure the correct data types are provided for the update operation.\n\n            \n\n            \n                Extends\n            \n            \n                        PartialType(CreateTicketDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                assignees\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                dueDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                priority\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        assignees\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@IsMongoId({each: true})@ApiProperty({description: 'List of assignees for the ticket.', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticket/dto/update-ticket.dto.ts:68\n                        \n                    \n\n            \n                \n                    The list of assignees for the ticket.\nThis field is optional for updating. If provided, it must be an array of valid MongoDB ObjectIds.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@ApiProperty({description: 'The description of the ticket.', example: 'The login page does not load after clicking the login button.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticket/dto/update-ticket.dto.ts:50\n                        \n                    \n\n            \n                \n                    The description of the ticket.\nThis field is optional for updating. If provided, it must be a string.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        dueDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsDate()@Type(undefined)@ApiProperty({description: 'The due date for completing the ticket.', example: '2024-12-31T23:59:59.000Z'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticket/dto/update-ticket.dto.ts:123\n                        \n                    \n\n            \n                \n                    The due date for completing the ticket.\nThis field is optional for updating. If provided, it must be a valid date.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        priority\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@ApiProperty({description: 'The priority of the ticket.', example: 'high', enum: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticket/dto/update-ticket.dto.ts:86\n                        \n                    \n\n            \n                \n                    The priority of the ticket.\nThis field is optional for updating. If provided, it must be one of the specified values: 'low', 'medium', or 'high'.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@ApiProperty({description: 'The status of the ticket.', example: 'in-progress', enum: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticket/dto/update-ticket.dto.ts:105\n                        \n                    \n\n            \n                \n                    The status of the ticket.\nThis field is optional for updating. If provided, it must be one of the specified values:\n'open', 'pending', 'in-progress', 'in-qa', 'staging', 'uat', 'production', 'wont-do', or 'closed'.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@ApiProperty({description: 'The title of the ticket.', example: 'Bug in login page'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticket/dto/update-ticket.dto.ts:33\n                        \n                    \n\n            \n                \n                    The title of the ticket.\nThis field is optional for updating. If provided, it must be a string.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/mapped-types\";\nimport { CreateTicketDto } from \"./create-ticket.dto\";\nimport { IsString, IsOptional, IsMongoId, IsArray, IsDate } from \"class-validator\";\nimport { Types } from \"mongoose\";\nimport { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\n\n/**\n * DTO (Data Transfer Object) for updating a ticket.\n *\n * This class defines the structure of the data required to update an existing ticket.\n * It extends the `CreateTicketDto` class, making all fields optional, and includes additional validation\n * to ensure the correct data types are provided for the update operation.\n *\n * @class UpdateTicketDto\n */\nexport class UpdateTicketDto extends PartialType(CreateTicketDto) {\n  /**\n   * The title of the ticket.\n   *\n   * This field is optional for updating. If provided, it must be a string.\n   *\n   * @example 'Bug in login page'\n   * @optional\n   * @type {string}\n   */\n  @IsOptional()\n  @IsString()\n  @ApiProperty({\n    description: \"The title of the ticket.\",\n    example: \"Bug in login page\",\n  })\n  title?: string;\n\n  /**\n   * The description of the ticket.\n   *\n   * This field is optional for updating. If provided, it must be a string.\n   *\n   * @example 'The login page does not load after clicking the login button.'\n   * @optional\n   * @type {string}\n   */\n  @IsOptional()\n  @IsString()\n  @ApiProperty({\n    description: \"The description of the ticket.\",\n    example: \"The login page does not load after clicking the login button.\",\n  })\n  description?: string;\n\n  /**\n   * The list of assignees for the ticket.\n   *\n   * This field is optional for updating. If provided, it must be an array of valid MongoDB ObjectIds.\n   *\n   * @example ['507f1f77bcf86cd799439012', '507f1f77bcf86cd799439013']\n   * @optional\n   * @type {Types.ObjectId[]}\n   */\n  @IsOptional()\n  @IsArray()\n  @IsMongoId({ each: true })\n  @ApiProperty({\n    description: \"List of assignees for the ticket.\",\n    example: [\"507f1f77bcf86cd799439012\", \"507f1f77bcf86cd799439013\"],\n  })\n  assignees?: Types.ObjectId[];\n\n  /**\n   * The priority of the ticket.\n   *\n   * This field is optional for updating. If provided, it must be one of the specified values: 'low', 'medium', or 'high'.\n   *\n   * @example 'high'\n   * @optional\n   * @type {string}\n   */\n  @IsOptional()\n  @IsString()\n  @ApiProperty({\n    description: \"The priority of the ticket.\",\n    example: \"high\",\n    enum: [\"low\", \"medium\", \"high\"],\n  })\n  priority?: string;\n\n  /**\n   * The status of the ticket.\n   *\n   * This field is optional for updating. If provided, it must be one of the specified values:\n   * 'open', 'pending', 'in-progress', 'in-qa', 'staging', 'uat', 'production', 'wont-do', or 'closed'.\n   *\n   * @example 'in-progress'\n   * @optional\n   * @type {string}\n   */\n  @IsOptional()\n  @IsString()\n  @ApiProperty({\n    description: \"The status of the ticket.\",\n    example: \"in-progress\",\n    enum: [\"open\", \"pending\", \"in-progress\", \"in-qa\", \"staging\", \"uat\", \"production\", \"wont-do\", \"closed\"],\n  })\n  status?: string;\n\n  /**\n   * The due date for completing the ticket.\n   *\n   * This field is optional for updating. If provided, it must be a valid date.\n   *\n   * @example '2024-12-31T23:59:59.000Z'\n   * @optional\n   * @type {Date}\n   */\n  @IsOptional()\n  @IsDate()\n  @Type(() => Date)\n  @ApiProperty({\n    description: \"The due date for completing the ticket.\",\n    example: \"2024-12-31T23:59:59.000Z\",\n  })\n  dueDate?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This DTO is used to validate the new details provided for a user's profile update.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The new name of the user', example: 'John Doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:22\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from \"class-validator\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n\n/**\n * @class UpdateUserDto\n * @description Data transfer object for updating user information.\n * This DTO is used to validate the new details provided for a user's profile update.\n */\nexport class UpdateUserDto {\n  /**\n   * @property {string} name\n   * @description The new name of the user. This field is required and cannot be empty.\n   * @example \"John Doe\"\n   * @required\n   */\n  @ApiProperty({\n    description: \"The new name of the user\",\n    example: \"John Doe\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/user.schema.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a user in the ticket management system.\nThe User schema defines the structure of the user documents stored in MongoDB,\nincluding properties such as username, password, email, name, role, and active status.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/user.schema.ts:22\n                        \n                    \n\n            \n                \n                    The unique email address for the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/user.schema.ts:40\n                        \n                    \n\n            \n                \n                    Indicates whether the user account is active.\nInactive accounts may be restricted from accessing the system.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/user.schema.ts:26\n                        \n                    \n\n            \n                \n                    The name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/user.schema.ts:18\n                        \n                    \n\n            \n                \n                    The hashed password for the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: 'user', enum: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/user.schema.ts:33\n                        \n                    \n\n            \n                \n                    The role of the user in the system.\nDetermines permissions and access levels. Defaults to \"user\".\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/user.schema.ts:14\n                        \n                    \n\n            \n                \n                    The unique username for the user.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { HydratedDocument } from \"mongoose\";\n\n/**\n * Represents a user in the ticket management system.\n *\n * The User schema defines the structure of the user documents stored in MongoDB,\n * including properties such as username, password, email, name, role, and active status.\n */\n@Schema({ timestamps: true })\nexport class User {\n  /** The unique username for the user. */\n  @Prop({ required: true, unique: true })\n  username: string;\n\n  /** The hashed password for the user. */\n  @Prop({ required: true })\n  password: string;\n\n  /** The unique email address for the user. */\n  @Prop({ required: true, unique: true })\n  email: string;\n\n  /** The name of the user. */\n  @Prop({ required: true })\n  name: string;\n\n  /**\n   * The role of the user in the system.\n   * Determines permissions and access levels. Defaults to \"user\".\n   */\n  @Prop({ default: \"user\", enum: [\"user\", \"admin\", \"manager\"] })\n  role: string;\n\n  /**\n   * Indicates whether the user account is active.\n   * Inactive accounts may be restricted from accessing the system.\n   */\n  @Prop({ default: true })\n  isActive: boolean;\n}\n\n/**\n * The Mongoose schema for the User.\n * This schema is used to create and manage user documents in the MongoDB database.\n */\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n/**\n * The type representing a hydrated User document.\n * This type is used to work with user documents retrieved from MongoDB.\n */\nexport type UserDocument = HydratedDocument;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { UserService } from \"./user.service\";\nimport { User, UserSchema } from \"src/schemas/user.schema\";\n\n@Module({\n  imports: [MongooseModule.forFeature([{ name: User.name, schema: UserSchema }])],\n  controllers: [],\n  providers: [UserService],\n  exports: [UserService, MongooseModule.forFeature([{ name: User.name, schema: UserSchema }])],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                UserService is responsible for managing user-related operations,\nincluding registration, user information updates and more.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                comparePassword\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findByUsername\n                            \n                            \n                                    Async\n                                findByUsernameOrEmail\n                            \n                            \n                                    Public\n                                    Async\n                                register\n                            \n                            \n                                    Public\n                                    Async\n                                updateUserName\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:17\n                            \n                        \n\n                \n                    \n                            Creates an instance of the UserService.\nallowing interaction with the user data in the database.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe Mongoose model for the User schema,\nallowing interaction with the user data in the database.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(password: string, hashedPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:62\n                        \n                    \n\n\n            \n                \n                        Compares a plain text password with a hashed password.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe plain text password to compare.\n\n\n                                            \n                                        \n                                        \n                                                hashedPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe hashed password to compare against.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nA promise that resolves to a boolean indicating whether the passwords match.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:93\n                        \n                    \n\n\n            \n                \n                        Finds a user by their ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to find.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nA promise that resolves to the user document if found.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByUsername\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUsername(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:72\n                        \n                    \n\n\n            \n                \n                        Finds a user by their username.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe username of the user to find.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nA promise that resolves to the user document if found.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByUsernameOrEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUsernameOrEmail(identifier: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:82\n                        \n                    \n\n\n            \n                \n                        Finds a user by their username or email.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                identifier\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe username or email of the user to find.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nA promise that resolves to the user document if found.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerUserDto: RegisterUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Registers a new user in the system after validating that\nthe username and email are not already in use.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                registerUserDto\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing user registration information.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \nA promise that resolves to the newly created user data, excluding the password.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        updateUserName\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserName(userId: mongoose.Types.ObjectId, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:130\n                        \n                    \n\n\n            \n                \n                        Updates the name of a user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                        mongoose.Types.ObjectId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to update.\n\n\n                                            \n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the new user name.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \nA promise that resolves to the updated user data, excluding the password.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(loginUserDto: LoginUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:110\n                        \n                    \n\n\n            \n                \n                        Validates a user by their login credentials, checking if the user exists and\nif the password is correct.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                loginUserDto\n                                            \n                                                            LoginUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the login credentials.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nA promise that resolves to the user document if validation is successful.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException, ConflictException, UnauthorizedException } from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport mongoose, { Model } from \"mongoose\";\nimport * as bcrypt from \"bcrypt\";\n\nimport { User, UserDocument } from \"../schemas/user.schema\";\nimport { UpdateUserDto } from \"../auth/dto/update-user.dto\";\nimport { RegisterUserDto } from \"src/auth/dto/register-user.dto\";\nimport { LoginUserDto } from \"src/auth/dto/login-user.dto\";\n\n/**\n * @class UserService\n * UserService is responsible for managing user-related operations,\n * including registration, user information updates and more.\n */\n@Injectable()\nexport class UserService {\n  /**\n   * Creates an instance of the UserService.\n   *\n   * @param {Model} userModel - The Mongoose model for the User schema,\n   * allowing interaction with the user data in the database.\n   */\n  constructor(@InjectModel(User.name) private userModel: Model) {}\n\n  /**\n   * Registers a new user in the system after validating that\n   * the username and email are not already in use.\n   *\n   * @param {RegisterUserDto} registerUserDto - The data transfer object containing user registration information.\n   * @returns {Promise>} - A promise that resolves to the newly created user data, excluding the password.\n   * @throws {ConflictException} - If a user with the same username or email already exists.\n   */\n  public async register(registerUserDto: RegisterUserDto): Promise> {\n    const { username, password, email, name } = registerUserDto;\n    const existingUser = await this.userModel.findOne({ $or: [{ username }, { email }] }).exec();\n    if (existingUser) {\n      throw new ConflictException(\"User with this username or email already exists.\");\n    }\n\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    const newUser = new this.userModel({\n      username,\n      password: hashedPassword,\n      email,\n      name,\n    });\n    const savedUser = await newUser.save();\n\n    const { password: _, ...userWithoutPassword } = savedUser.toObject();\n    return userWithoutPassword;\n  }\n\n  /**\n   * Compares a plain text password with a hashed password.\n   *\n   * @param {string} password - The plain text password to compare.\n   * @param {string} hashedPassword - The hashed password to compare against.\n   * @returns {Promise} - A promise that resolves to a boolean indicating whether the passwords match.\n   */\n  public async comparePassword(password: string, hashedPassword: string): Promise {\n    return await bcrypt.compare(password, hashedPassword);\n  }\n\n  /**\n   * Finds a user by their username.\n   *\n   * @param {string} username - The username of the user to find.\n   * @returns {Promise} - A promise that resolves to the user document if found.\n   */\n  async findByUsername(username: string): Promise {\n    return await this.userModel.findOne({ username }).exec();\n  }\n\n  /**\n   * Finds a user by their username or email.\n   *\n   * @param {string} identifier - The username or email of the user to find.\n   * @returns {Promise} - A promise that resolves to the user document if found.\n   */\n  async findByUsernameOrEmail(identifier: string): Promise {\n    return await this.userModel.findOne({ $or: [{ username: identifier }, { email: identifier }] }).exec();\n  }\n\n  /**\n   * Finds a user by their ID.\n   *\n   * @param {string} userId - The ID of the user to find.\n   * @returns {Promise} - A promise that resolves to the user document if found.\n   * @throws {NotFoundException} - If the user is not found.\n   */\n  async findById(userId: string): Promise {\n    const user = await this.userModel.findById(userId).exec();\n    if (!user) {\n      throw new NotFoundException(\"User not found\");\n    }\n    return user;\n  }\n\n  /**\n   * Validates a user by their login credentials, checking if the user exists and\n   * if the password is correct.\n   *\n   * @param {LoginUserDto} loginUserDto - The data transfer object containing the login credentials.\n   * @returns {Promise} - A promise that resolves to the user document if validation is successful.\n   * @throws {NotFoundException} - If the user is not found.\n   * @throws {UnauthorizedException} - If the password is invalid.\n   */\n  async validateUser(loginUserDto: LoginUserDto): Promise {\n    const user = await this.findByUsernameOrEmail(loginUserDto.email ?? loginUserDto.username);\n    if (!user) {\n      throw new NotFoundException(\"User not found\");\n    }\n    const passwordMatches = await this.comparePassword(loginUserDto.password, user.password);\n    if (!passwordMatches) {\n      throw new UnauthorizedException(\"Invalid password\");\n    }\n    return user;\n  }\n\n  /**\n   * Updates the name of a user.\n   *\n   * @param {mongoose.Types.ObjectId} userId - The ID of the user to update.\n   * @param {UpdateUserDto} updateUserDto - The data transfer object containing the new user name.\n   * @returns {Promise>} - A promise that resolves to the updated user data, excluding the password.\n   * @throws {NotFoundException} - If the user is not found.\n   */\n  public async updateUserName(userId: mongoose.Types.ObjectId, updateUserDto: UpdateUserDto): Promise> {\n    const { name } = updateUserDto;\n\n    const user = await this.userModel.findById(userId).exec();\n    if (!user) {\n      throw new NotFoundException(\"User not found\");\n    }\n\n    user.name = name;\n    const updatedUser = await user.save();\n\n    const { password: _, ...userWithoutPassword } = updatedUser.toObject();\n    return userWithoutPassword;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/auth/decorators/hasUsernameOrEmail.decorator.ts\n            \n            function\n            hasUsernameOrEmail\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/dto/login-user.dto.ts\n            \n            class\n            LoginUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/auth/dto/register-user.dto.ts\n            \n            class\n            RegisterUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/auth/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/interfaces/user.interface.ts\n            \n            interface\n            ExpressRequestWithUser\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/project/dto/create-project.dto.ts\n            \n            class\n            CreateProjectDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/project/dto/update-project.dto.ts\n            \n            class\n            UpdateProjectDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/project/interfaces/project.interface.ts\n            \n            interface\n            ExpressRequestWithUser\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/project/project.controller.ts\n            \n            controller\n            ProjectController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/project/project.errors.ts\n            \n            class\n            ProjectDoesNotExist\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/project/project.errors.ts\n            \n            class\n            ProjectError\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/project/project.errors.ts\n            \n            class\n            ProjectIdValidationError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/project/project.errors.ts\n            \n            class\n            ProjectInsufficientPermissionsError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/project/project.errors.ts\n            \n            class\n            ProjectNotModifiedError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/project/project.errors.ts\n            \n            class\n            ProjectRelationConflict\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/project/project.errors.ts\n            \n            class\n            ProjectSlugValidationError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/project/project.errors.ts\n            \n            class\n            ProjectUpdateDataValidationError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/project/project.service.ts\n            \n            injectable\n            ProjectService\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/schemas/project.schema.ts\n            \n            class\n            Project\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                        src/schemas/project.schema.ts\n            \n            variable\n            ProjectSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/schemas/project.schema.ts\n            \n            type alias\n            ProjectDocument\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/schemas/ticket.schema.ts\n            \n            class\n            Ticket\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                        src/schemas/ticket.schema.ts\n            \n            variable\n            TicketSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/schemas/user.schema.ts\n            \n            class\n            User\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                        src/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/schemas/user.schema.ts\n            \n            type alias\n            UserDocument\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/ticket/dto/create-ticket.dto.ts\n            \n            class\n            CreateTicketDto\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/ticket/dto/update-ticket.dto.ts\n            \n            class\n            UpdateTicketDto\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/ticket/interfaces/ticket.interface.ts\n            \n            interface\n            ExpressRequestWithUser\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/ticket/ticket.controller.ts\n            \n            controller\n            TicketController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/ticket/ticket.errors.ts\n            \n            class\n            TicketDoesNotExist\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/ticket/ticket.errors.ts\n            \n            class\n            TicketError\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/ticket/ticket.errors.ts\n            \n            class\n            TicketIdValidationError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/ticket/ticket.errors.ts\n            \n            class\n            TicketInsufficientPermissionsError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/ticket/ticket.errors.ts\n            \n            class\n            TicketNotModifiedError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/ticket/ticket.errors.ts\n            \n            class\n            TicketRelationConflict\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/ticket/ticket.errors.ts\n            \n            class\n            TicketSlugValidationError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/ticket/ticket.service.ts\n            \n            injectable\n            TicketService\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                        src/ticket/utils/ticket.utils.ts\n            \n            function\n            sanitizeUpdateTicketDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                        src/utils/index.ts\n            \n            function\n            deepEqualArrays\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/index.ts\n            \n            function\n            handleDomainErrors\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/index.ts\n            \n            function\n            hasChanges\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/index.ts\n            \n            function\n            isMongoDbIdValid\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/axios : ^4.0.0\n        \n            @nestjs/common : ^11.0.11\n        \n            @nestjs/config : ^4.0.0\n        \n            @nestjs/core : ^11.0.11\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/mongoose : ^11.0.1\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.0.11\n        \n            @nestjs/swagger : ^11.0.6\n        \n            @nestjs/terminus : ^11.0.0\n        \n            @swc/helpers : ^0.5.15\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            compression : ^1.8.0\n        \n            mongoose : ^8.11.0\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            deepEqualArrays   (src/.../index.ts)\n                        \n                        \n                            handleDomainErrors   (src/.../index.ts)\n                        \n                        \n                            hasChanges   (src/.../index.ts)\n                        \n                        \n                            hasUsernameOrEmail   (src/.../hasUsernameOrEmail.decorator.ts)\n                        \n                        \n                            isMongoDbIdValid   (src/.../index.ts)\n                        \n                        \n                            sanitizeUpdateTicketDto   (src/.../ticket.utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Initializes and bootstraps the NestJS application.\nThis function creates the Nest application, sets up Swagger documentation\nif the environment is development, applies global middlewares, and starts\nthe server on the specified port.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves when the application is bootstrapped.\n\n                            \n                \n            \n        \n    \n    src/utils/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        deepEqualArrays\n                        \n                    \n                \n            \n            \n                \ndeepEqualArrays(arr1, arr2)\n                \n            \n\n\n\n\n            \n                \n                        Compares two arrays for deep equality.\nThis function checks if two arrays are identical in length and contents, comparing each element in order.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                arr1\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe first array to compare.\n\n\n                                            \n                                        \n                                        \n                                                arr2\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe second array to compare.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \nReturns true if both arrays are equal, false otherwise.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDomainErrors\n                        \n                    \n                \n            \n            \n                \nhandleDomainErrors(error)\n                \n            \n\n\n\n\n            \n                \n                        Handles domain-specific errors and maps them to appropriate HTTP exceptions.\nThis function checks if the error belongs to specific domain error classes (e.g., Ticket or Project errors) and\nthrows an HttpException with the correct HTTP status code and error message. If the error doesn't match any\nknown domain error, a generic internal server error is thrown.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                error\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe error object to handle.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     never\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasChanges\n                        \n                    \n                \n            \n            \n                \nhasChanges(original: T, updated: Partial)\n                \n            \n\n\n\n\n            \n                \n                        Checks whether there are any changes between the original and updated objects.\nThis function compares the original object and the updated object (which may contain partial fields) to\ndetermine if there are any differences. It handles arrays, Date objects, and simple field comparisons.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                original\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe original object before any changes.\n\n\n                                            \n                                        \n                                        \n                                                updated\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe updated object, possibly containing only some of the fields of original.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \nReturns true if there are changes between the two objects, false otherwise.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isMongoDbIdValid\n                        \n                    \n                \n            \n            \n                \nisMongoDbIdValid(id)\n                \n            \n\n\n\n\n            \n                \n                        Checks if a given string is a valid MongoDB ObjectId.\nThis function uses Mongoose's ObjectId.isValid method to determine if the provided string\nis a valid representation of a MongoDB ObjectId. MongoDB ObjectIds are 24-character hexadecimal\nstrings that are unique identifiers for documents in MongoDB collections.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe string to check for validity as a MongoDB ObjectId.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \nReturns true if the string is a valid MongoDB ObjectId, false otherwise.\n\n\n                            \n                \n            \n        \n    \n    src/auth/decorators/hasUsernameOrEmail.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        hasUsernameOrEmail\n                        \n                    \n                \n            \n            \n                \nhasUsernameOrEmail(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n                        A custom validation decorator that checks if either a username or an email is provided.\nThis is useful for scenarios where one of the two fields is required for user login or registration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                validationOptions\n                                            \n                                                        ValidationOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional validation options to customize the error message and behavior.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/ticket/utils/ticket.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        sanitizeUpdateTicketDto\n                        \n                    \n                \n            \n            \n                \nsanitizeUpdateTicketDto(updateTicketDto: UpdateTicketDto)\n                \n            \n\n\n\n\n            \n                \n                        Sanitizes the updateTicketDto object to ensure it only contains allowed fields and values.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updateTicketDto\n                                            \n                                                            UpdateTicketDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to update the ticket with.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Partial\n\n                        \n                            \n                                \nThe sanitized update data.\n\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n    \n      \n    \n  \n  Parchment TMS\n  A Headless Ticket Management System\n  \n    This is a toy project for a headless TMS built with \n    NestJS and MongoDB, enabling teams to \n    create, manage, and close tickets, \n    track their status and prioritize tasks.\n  \n  \n   \n  \n\n\n🚀 Getting Started\nTo get started with this project, you can choose to either run the project natively on your machine, or with Docker.\n🏠 Running natively\nTo run the project natively, you will need to have Node.js v22.14.0 or higher and npm v10.9.2 or higher installed on your machine.\n\n🍴 Clone this repository to your local machine.\n💻 Run npm install to install the necessary dependencies.\n🚀 Start a MongoDB instance on your machine by following the instructions provided by MongoDB for your specific operating system. You can download the MongoDB Community Server from here.\n📝 Rename .env.example to .env and replace the values with your own MongoDB connection details and desired api port.\n🚀 Run npm start to start the server.\n\n🐳 Running with Docker\nTo run the project with Docker, you will need to have Docker installed on your machine.\n\n🍴 Clone this repository to your local machine.\n📝 Copy the .env.example file and rename it to .env. Open the .env file and specify the desired values for MONGODB_URI and PORT variables.\nFor example:Example :# The MongoDB connection string for the TMS database\nMONGODB_URI=\"mongodb://mongodb/test\"\n# The port on which the TMS API will run\nPORT=\"3000\"\n# The seed string to be used for the JwtStrategy\nJWT_SECRET=\"42\"\n🐳 Run docker compose build to build the containers.\n🐳 Run docker compose up to start the containers.\n🌍 The API will be available at http://localhost:3000/.\n\n📖 Usage\nOnce the server is running, you can use the following endpoints to manage your projects/tickets:\nAuthenticate\n\nPOST /api/v1/register: Gives the ability to register\nPOST /api/v1/login: Returns a jwt token for authentication\n\nProjects\n\nGET /api/v1/projects: Returns a list of all projects\nPOST /api/v1/projects: Create a new project\nGET /api/v1/projects/:id: Returns a specific project by project ID.\nPATCH /api/v1/projects/:id: Update a project by ID\nDELETE /api/v1/projects/:id: Delete a project by ID\n\nTickets\n\nGET /api/v1/tickets: Returns a list of all tickets\nPOST /api/v1/tickets: Create a new ticket\nGET /api/v1/tickets/:id: Returns a specific ticket by ticket ID.\nPATCH /api/v1/tickets/:id: Update an existing ticket by ID\nDELETE /api/v1/tickets:id: Delete a ticket by ID\n\nHealth\n\nGET /heath: Returns useful system information, such as server uptime and memory usage. This endpoint can be used to monitor the health of the application.\n\n🚀 Future Improvements\nHere are some potential improvements that could be made to this project:\n\n Write Jest tests\n Add a process manager\n Add API rate limiting to prevent abuse\n Introduce automated ticket workflows or rules\n Create a frontend interface for ticket management.\n Add support for more auth providers (Auth0, OAuth2, etc)\n Implement backup and restore mechanism for data recovery\n Implement real-time ticket updates using WebSockets or SSE\n Add search and filter functionality for tickets and projects\n Enable file attachments for tickets (e.g., screenshots, logs)\n Improve documentation with detailed user guides and API examples\n Implement audit logs to track changes made to tickets and projects\n Optimize system performance (database queries, caching, file uploads)\n Support multiple languages for localization/internationalization (i18n)\n Add Github Actions to publish image to Docker Hub, Github Registry, etc.\n Allow customization of ticket fields (priority, labels, custom statuses)\n Support multiple deployment environments (e.g., dev, staging, production)\n Enable user profile changes and preferences (e.g., email notifications, themes)\n Create a reporting feature for ticket data (e.g., total tickets, resolution time)\n Add User Roles and Permissions for different access levels (admin, manager, developer)\n\n🤝 Contributing\nContributions to this project are welcome! If you have any suggestions, bug reports, or feature requests, please open an issue or submit a pull request.\n📝 License\nThis project is licensed under the Apache License, Version 2.0. See the LICENSE file for details.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nExample :                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\nDefinitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n\nGrant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n\nGrant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n\nRedistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and\n(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and\n(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and\n(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.\nYou may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n\nSubmission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n\nTrademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n\nDisclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n\nLimitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n\nAccepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\n\n\n   END OF TERMS AND CONDITIONS\n   APPENDIX: How to apply the Apache License to your work.\nExample :  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.   Copyright 2024 Nikolaos Grigoropoulos\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\nExample :   http://www.apache.org/licenses/LICENSE-2.0   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProjectModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TicketModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ProjectModule\n\n\n\ncluster_ProjectModule_providers\n\n\n\ncluster_TicketModule\n\n\n\ncluster_TicketModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nProjectModule\n\nProjectModule\n\nAppModule -->\n\nProjectModule->AppModule\n\n\n\n\n\nTicketModule\n\nTicketModule\n\nAppModule -->\n\nTicketModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nProjectService\n\nProjectService\n\nProjectModule -->\n\nProjectService->ProjectModule\n\n\n\n\n\nTicketService\n\nTicketService\n\nTicketModule -->\n\nTicketService->TicketModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    25 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0\n        \n            Description : A basic headless TMS to create and manage your own project/tickets with the help of mongodb and nestjs(express).\n        \n            Keywords : \n        \n            License : Apache-2.0\n        \n            Author : Nikolaos Grigoropoulos\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ProjectDocument   (src/.../project.schema.ts)\n                        \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/schemas/project.schema.ts\n    \n    \n        \n            \n                \n                    \n                    ProjectDocument\n                \n            \n            \n                \n                    ProjectDocument type that combines the Project class with Mongoose Document.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/schemas/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                    The type representing a hydrated User document.\nThis type is used to work with user documents retrieved from MongoDB.\n\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ProjectSchema   (src/.../project.schema.ts)\n                        \n                        \n                            TicketSchema   (src/.../ticket.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/schemas/project.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ProjectSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Project)\n                    \n                \n\n            \n                \n                    ProjectSchema is the Mongoose schema for the Project class.\nThis schema is used by Mongoose to interact with the database.\n\n                \n            \n\n        \n    \n\n    src/schemas/ticket.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TicketSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Ticket)\n                    \n                \n\n            \n                \n                    TicketSchema is the Mongoose schema for the Ticket class.\nThis schema is used by Mongoose to interact with the database.\n\n                \n            \n\n        \n    \n\n    src/schemas/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n            \n                \n                    The Mongoose schema for the User.\nThis schema is used to create and manage user documents in the MongoDB database.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
